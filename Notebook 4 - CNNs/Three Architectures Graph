{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Three Architectures Graph","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/04_Common_CNN_architectures.ipynb","timestamp":1615241287072}],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"fChsg_bNCseg"},"source":["\n","\n","\n","\n","height = IMAGE_SIZE\n","width = IMAGE_SIZE\n","channels = NUM_CHANNELS\n","n_inputs = height * width * channels\n","n_outputs = 200\n","\n","reset_graph()\n","\n","X = tf.placeholder(tf.float32, shape=[None, n_inputs], name=\"X\")\n","X_reshaped = tf.reshape(X, shape=[-1, height, width, channels])\n","y = tf.placeholder(tf.int32, shape=[None], name=\"y\")\n","\n","#input shape [-1, 64, 64, 3]\n","conv1 = tf.layers.conv2d(\n","            inputs=X_reshaped, \n","            filters=32, \n","            kernel_size=[5,5],\n","            padding='SAME',\n","            activation=tf.nn.relu, \n","            name=\"conv1\")\n","\n","#shape after conv1: [-1, 64, 64, 32]\n","pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)\n","\n","conv2 = tf.layers.conv2d(\n","            inputs=pool1, \n","            filters=64,\n","            kernel_size=[5,5],\n","            padding='SAME',\n","            activation=tf.nn.relu, \n","            name=\"conv2\")\n","\n","pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)\n","\n","# Dense Layer\n","pool2_flat = tf.reshape(pool2, [-1, 8 * 8 * 64])\n","dense = tf.layers.dense(inputs=pool2_flat, units=1024, activation=tf.nn.relu)\n","dropout = tf.layers.dropout(inputs=dense, rate=0.4)\n","dropout_reshape = tf.reshape(dropout, [-1, 8 * 8 * 64])\n","\n","# Logits Layer\n","logits = tf.layers.dense(inputs=dropout_reshape, units=200, name='output')\n","Y_proba = tf.nn.softmax(logits, name=\"Y_proba\")\n","\n","xentropy = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=logits, labels=y)\n","loss = tf.reduce_mean(xentropy)\n","optimizer = tf.train.AdamOptimizer()\n","training_op = optimizer.minimize(loss)\n","\n","correct = tf.nn.in_top_k(logits, y, 1)\n","accuracy = tf.reduce_mean(tf.cast(correct, tf.float32))\n","init = tf.global_variables_initializer()\n","saver = tf.train.Saver()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VHSwYg1-bUI8","executionInfo":{"status":"ok","timestamp":1616979016942,"user_tz":-60,"elapsed":2198,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dsZmj0kmbXxV","executionInfo":{"status":"ok","timestamp":1616979036986,"user_tz":-60,"elapsed":19978,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"e8f34e07-e13e-428f-8580-6b2c48fbe194"},"source":["drive.mount('/content/drive', force_remount=True)\n","os.chdir(\"/content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture\")\n","!ls"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," Content.ipynb\t\t\t  VGG16Scratch1.csv    'VGG16Transfer Model'\n","'Copy of Copy of Content.ipynb'   VGG16Scratch.csv      VGG16Tuning1.csv\n","'Copy of DL Notebook 4.ipynb'\t 'VGG16Scratch Model'   VGG16Tuning.csv\n","'Three Architectures Graph'\t  VGG16Transfer1.csv   'VGG16Tuning Model'\n","'Three Architectures.ipynb'\t  VGG16Transfer.csv\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"urw5Sugu1F7r"},"source":["# **Coursework**\n","\n","## Classification on Tiny-ImageNet\n","\n","In this task, we are going to explore different models to do classification on 64x64 Tiny-ImageNet. Tiny-ImageNet is a smaller version of ImageNet (as the name indicates), containing \"only\" 200 classes. Each class has 500 images. The test set contains 10,000 images. All images are 64x64 RGB images. \n","\n","In the Network Training notebook, we explained how to define a validation set, and now we will put that into practice. Hence, as we now have a bigger dataset, we are going to use the standard split of training, validation, and test data. Therefore, you will check the performance of the network in the validation set while training your network. Hence, your decisions need to be based on validation performance. Once you have obtained your best model using the training and validation data, you need to report the performance on the test set. Please try to no overfit to the test data, as in other problems it may not be available to you. \n","\n","In this exercise, you are asked to train VGG models with different strategies. Optionally, you are asked to use any other architecture of your choice to do classification in Tiny-ImageNet. \n","\n","Run the following script to get the data. \n","\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TboXcuUzC31r","outputId":"847878f0-c75f-4b3c-80ff-9683a06cb88b"},"source":["from statistics import mean\n","from itertools import chain\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","!ls\n","Scratch = pd.read_csv(\"VGG16Scratch.csv\")\n","Tuning = pd.read_csv(\"VGG16Tuning.csv\")\n","Transfer = pd.read_csv(\"VGG16Transfer.csv\")\n","\n","ScratchT=Scratch.categorical_accuracy[0:len(Scratch.val_loss)-4]*100\n","ScratchV=Scratch.val_categorical_accuracy[0:len(Scratch.val_loss)-4]*100\n","\n","TuningT=Tuning.categorical_accuracy[0:len(Tuning.val_loss)-4]*100\n","TuningV=Tuning.val_categorical_accuracy[0:len(Tuning.val_loss)-4]*100\n","\n","TransferT=Transfer.categorical_accuracy[0:len(Transfer.val_loss)-4]*100\n","TransferV=Transfer.val_categorical_accuracy[0:len(Transfer.val_loss)-4]*100\n","\n","\n","\n","plt.title('Accuracies of Applying a Common Model')\n","plt.plot(ScratchT, color='lightblue',linestyle='--')\n","plt.plot(ScratchV, color='blue',label=\"Scratch\",linestyle='-')\n","plt.plot(TuningT, color='grey',linestyle='--')\n","plt.plot(TuningV, color='black',label=\"Tuning\",linestyle='-')\n","plt.plot(TransferT, color='lightgreen',linestyle='--')\n","plt.plot(TransferV, color='green',label=\"Transfer\",linestyle='-')\n","\n","\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy(%)')\n","plt.ylim((0,100))\n","plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),ncol=1, fancybox=True, shadow=True)\n","plt.legend(prop={'size': 8})\n","plt.savefig(fname=\"LoadingVGG16.png\", dpi=1000)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" Content.ipynb\t\t\t 'VGG16Scratch Model'\n","'Copy of Copy of Content.ipynb'   VGG16Transfer1.csv\n","'Copy of DL Notebook 4.ipynb'\t  VGG16Transfer.csv\n"," LoadingVGG16.png\t\t 'VGG16Transfer Model'\n","'Three Architectures Graph'\t  VGG16Tuning1.csv\n","'Three Architectures.ipynb'\t  VGG16Tuning.csv\n"," VGG16Scratch1.csv\t\t 'VGG16Tuning Model'\n"," VGG16Scratch.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QmPJ2vKG5BB_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616614448163,"user_tz":0,"elapsed":43229,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"8ffdf9cf-1c59-4cc7-cff1-5884f2f51d76"},"source":["from keras import backend as K\n","import scipy.ndimage as nd\n","from keras.models import Sequential,load_model\n","from keras import regularizers\n","from keras import initializers\n","from keras import metrics\n","from keras.layers import Dense, Dropout, Activation, Flatten, Input, Convolution2D, MaxPooling2D, BatchNormalization, ReLU, LeakyReLU \n","from keras import layers\n","from keras import models\n","from keras.optimizers import Adam\n","import tensorflow as tf\n","from keras.preprocessing.image import ImageDataGenerator\n","import numpy as np\n","import os\n","import time\n","import cv2\n","import matplotlib.pyplot as plt\n","\n","# download TinyImageNet\n","! git clone https://github.com/seshuad/IMagenet\n","\n","def get_id_dictionary():\n","    id_dict = {}\n","    for i, line in enumerate(open('IMagenet/tiny-imagenet-200/wnids.txt', 'r')):\n","        id_dict[line.replace('\\n', '')] = i\n","    return id_dict\n","  \n","def get_class_to_id_dict():\n","    id_dict = get_id_dictionary()\n","    all_classes = {}\n","    result = {}\n","    for i, line in enumerate(open('IMagenet/tiny-imagenet-200/words.txt', 'r')):\n","        n_id, word = line.split('\\t')[:2]\n","        all_classes[n_id] = word\n","    for key, value in id_dict.items():\n","        result[value] = (key, all_classes[key])\n","        \n","    return result\n","\n","def get_data(id_dict):\n","\n","    print('starting loading data')\n","    train_data, val_data, test_data = [], [], []\n","    train_labels, val_labels, test_labels = [], [], []\n","    t = time.time()\n","    for key, value in id_dict.items():\n","        train_data += [cv2.imread('IMagenet/tiny-imagenet-200/train/{}/images/{}_{}.JPEG'.format(key, key, str(i))) for i in range(450)]\n","        \n","        train_labels_ = np.array([[0]*200]*450)\n","        train_labels_[:, value] = 1\n","        train_labels += train_labels_.tolist()\n","        \n","        val_data += [cv2.imread('IMagenet/tiny-imagenet-200/train/{}/images/{}_{}.JPEG'.format(key, key, str(i))) for i in range(450, 500)]\n","        \n","        val_labels_ = np.array([[0]*200]*50)\n","        val_labels_[:, value] = 1\n","        val_labels += val_labels_.tolist()\n","\n","    for line in open('IMagenet/tiny-imagenet-200/val/val_annotations.txt'):\n","        img_name, class_id = line.split('\\t')[:2]\n","        test_data.append(cv2.imread('IMagenet/tiny-imagenet-200/val/images/{}'.format(img_name)))\n","\n","        test_labels_ = np.array([[0]*200])\n","        test_labels_[0, id_dict[class_id]] = 1\n","        test_labels += test_labels_.tolist()\n","\n","    print('finished loading data, in {} seconds'.format(time.time() - t))\n","\n","    return np.array(train_data), np.array(train_labels), np.array(val_data), np.array(val_labels), np.array(test_data), np.array(test_labels)\n","  \n","def shuffle_data(train_data, train_labels, val_data, val_labels):\n","    # This function shuffles separately the train set and the \n","    # validation set\n","    size = len(train_data)\n","    train_idx = np.arange(size)\n","    np.random.shuffle(train_idx)\n","    \n","    size = len(val_data)\n","    val_idx = np.arange(size)\n","    np.random.shuffle(val_idx)\n","\n","    return train_data[train_idx], train_labels[train_idx], val_data[val_idx], val_labels[val_idx]\n","\n","train_data, train_labels, val_data, val_labels, test_data, test_labels = get_data(get_id_dictionary())\n","train_data, train_labels, val_data, val_labels = shuffle_data(train_data, train_labels, val_data, val_labels)\n","\n","# Let's visualize some examples\n","# N=3\n","# start_val = 0 # pick an element for the code to plot the following N**2 values\n","# fig, axes = plt.subplots(N,N)\n","# for row in range(N):\n","#   for col in range(N):\n","#     idx = start_val+row+N*col    \n","#     tmp = cv2.cvtColor(train_data[idx],cv2.COLOR_BGR2RGB)\n","#     axes[row,col].imshow(tmp, cmap='gray')\n","#     fig.subplots_adjust(hspace=0.5)\n","#     axes[row,col].set_xticks([])\n","#     axes[row,col].set_yticks([])\n","\n","# train_data = train_data.astype('float32') / 255.\n","# val_data = val_data.astype('float32') / 255.\n","# test_data = test_data.astype('float32') / 255.\n","\n","# mean = np.mean(train_data,axis=(0,1,2,3))\n","# std = np.std(train_data, axis=(0, 1, 2, 3))\n","# train_data = (train_data-mean)/(std+1e-7)\n","# val_data = (val_data-mean)/(std+1e-7)\n","# test_data = (test_data-mean)/(std+1e-7)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Cloning into 'IMagenet'...\n","remote: Enumerating objects: 120594, done.\u001b[K\n","remote: Total 120594 (delta 0), reused 0 (delta 0), pack-reused 120594\u001b[K\n","Receiving objects: 100% (120594/120594), 212.68 MiB | 33.70 MiB/s, done.\n","Resolving deltas: 100% (1115/1115), done.\n","Checking out files: 100% (120206/120206), done.\n","starting loading data\n","finished loading data, in 16.96746826171875 seconds\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"kXLjtvJEAF_r"},"source":["**Report**:\n","*   In a plot, please report the training and validation accuracy curves for the following models: \n","\n","> *   VGG16 trained from scratch.\n","\n","> *   Transfer Learning VGG16: load pre-trained ImageNet weights and only train the newly added dense layers.  To do so, freeze all layers and only train the dense layers you have modified in the model. \n","\n","> *   Fine-tuning VGG16: load pre-trained ImageNet weights and train the whole architecture.\n","\n","*   Discuss the previous figure in the main text. And report in a table the test accuracy and the training and inference times of previous VGG16 experiments. Training times are computed per epoch and you can find them displayed in the .fit() method information. Report either the total training time, or the number of epochs and training time per epoch. Inference times are computed per image, and we give you the code below to obtain them. "]},{"cell_type":"code","metadata":{"id":"yDIWZBXUjlN5"},"source":["class TimeHistory(keras.callbacks.Callback):\n","    def on_train_begin(self, logs={}):\n","        self.times = []\n","\n","    def on_epoch_begin(self, batch, logs={}):\n","        self.epoch_time_start = time.time()\n","\n","    def on_epoch_end(self, batch, logs={}):\n","        self.times.append(time.time() - self.epoch_time_start)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ae4MXFHF6Lsk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616620523226,"user_tz":0,"elapsed":762937,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"556ab1db-bcdf-47b2-fe77-bee9ebc615fa"},"source":["from keras.callbacks import EarlyStopping\n","from keras.applications.vgg16 import VGG16\n","from keras.models import Model\n","\n","model = VGG16(weights=None,input_shape=(64, 64, 3), include_top=False)\n","output = model.output\n","output = Flatten()(output)\n","output = Dense(units=4096, activation='relu')(output)\n","output = Dense(units=4096, activation='relu')(output)\n","output = Dense(units=200, activation='softmax')(output)\n","model = Model(model.input, output)\n","\n","# model.summary()\n","\n","early_stopping = EarlyStopping(monitor='val_categorical_accuracy', patience=4, restore_best_weights=True)\n","time_callback = TimeHistory()\n","\n","model.compile(optimizer=Adam(lr=1e-4),loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","history = model.fit(train_data, train_labels, epochs=20, batch_size=128, validation_data=(val_data, val_labels), callbacks=[early_stopping,time_callback],verbose=2)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","704/704 - 56s - loss: 5.0013 - categorical_accuracy: 0.0215 - val_loss: 4.7604 - val_categorical_accuracy: 0.0385\n","Epoch 2/20\n","704/704 - 54s - loss: 4.4450 - categorical_accuracy: 0.0676 - val_loss: 4.2256 - val_categorical_accuracy: 0.0897\n","Epoch 3/20\n","704/704 - 54s - loss: 3.9397 - categorical_accuracy: 0.1308 - val_loss: 3.7805 - val_categorical_accuracy: 0.1484\n","Epoch 4/20\n","704/704 - 54s - loss: 3.5195 - categorical_accuracy: 0.1946 - val_loss: 3.5219 - val_categorical_accuracy: 0.2012\n","Epoch 5/20\n","704/704 - 54s - loss: 3.1700 - categorical_accuracy: 0.2544 - val_loss: 3.3618 - val_categorical_accuracy: 0.2229\n","Epoch 6/20\n","704/704 - 54s - loss: 2.8642 - categorical_accuracy: 0.3106 - val_loss: 3.1316 - val_categorical_accuracy: 0.2688\n","Epoch 7/20\n","704/704 - 54s - loss: 2.5528 - categorical_accuracy: 0.3687 - val_loss: 3.1952 - val_categorical_accuracy: 0.2718\n","Epoch 8/20\n","704/704 - 54s - loss: 2.2320 - categorical_accuracy: 0.4338 - val_loss: 3.2361 - val_categorical_accuracy: 0.2833\n","Epoch 9/20\n","704/704 - 54s - loss: 1.8728 - categorical_accuracy: 0.5076 - val_loss: 3.2733 - val_categorical_accuracy: 0.2904\n","Epoch 10/20\n","704/704 - 54s - loss: 1.4870 - categorical_accuracy: 0.5942 - val_loss: 3.5323 - val_categorical_accuracy: 0.2937\n","Epoch 11/20\n","704/704 - 54s - loss: 1.1354 - categorical_accuracy: 0.6764 - val_loss: 3.9325 - val_categorical_accuracy: 0.2845\n","Epoch 12/20\n","704/704 - 54s - loss: 0.8687 - categorical_accuracy: 0.7458 - val_loss: 4.5296 - val_categorical_accuracy: 0.2842\n","Epoch 13/20\n","704/704 - 54s - loss: 0.6631 - categorical_accuracy: 0.8015 - val_loss: 4.9657 - val_categorical_accuracy: 0.2827\n","Epoch 14/20\n","704/704 - 54s - loss: 0.5454 - categorical_accuracy: 0.8329 - val_loss: 5.1498 - val_categorical_accuracy: 0.2853\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"9PFXPFFbcHlK","colab":{"base_uri":"https://localhost:8080/","height":418},"executionInfo":{"status":"ok","timestamp":1616621150853,"user_tz":0,"elapsed":7952,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"e00807df-496e-4e9f-be2a-b2b4ef4d39a4"},"source":["plot_history(history)\n","\n","times = time_callback.times\n","print(times)\n","\n","start_time = time.time()\n","score = model.evaluate(test_data, test_labels)\n","time_elapsed = time.time() - start_time\n","print('Test loss:', score[0])\n","print('Test accuracy:', score[1])\n","print('Average inference time per image: {:.4f} (ms)'.format(1000*time_elapsed/len(test_data)))\n","\n","\n","VGG16Scratch=pd.DataFrame.from_dict(history.history)\n","VGG16Scratch[\"times\"]=times[0:len(VGG16Scratch)]\n","\n","total = sum(times[0:len(VGG16Scratch)])\n","VGG16Scratch.loc[len(VGG16Scratch)]=['total for epochs',0,0,0,total]\n","VGG16Scratch.loc[len(VGG16Scratch)]=['time_elapsed',0,0,0,time_elapsed]\n","VGG16Scratch.loc[len(VGG16Scratch)]=['time_elapsed/image',0,0,0,(1000*time_elapsed/len(test_data))]\n","VGG16Scratch.loc[len(VGG16Scratch)]=['test accuracy',0,0,0,score[1]]\n","\n","\n","\n","VGG16Scratch.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture/VGG16Scratch.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture/VGG16Scratch Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[55.58315944671631, 54.3708598613739, 54.3954119682312, 54.3733012676239, 54.383182764053345, 54.37059664726257, 54.378836154937744, 54.379361629486084, 54.38101243972778, 54.37783098220825, 54.32603979110718, 54.30074381828308, 54.30299735069275, 54.33476424217224]\n","313/313 [==============================] - 3s 10ms/step - loss: 3.5375 - categorical_accuracy: 0.2925\n","Test loss: 3.5375118255615234\n","Test accuracy: 0.29249998927116394\n","Average inference time per image: 0.3133 (ms)\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture/VGG16Scratch Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8IJjYdDhD95z","executionInfo":{"status":"ok","timestamp":1616621400182,"user_tz":0,"elapsed":156942,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"e4afe42f-1145-4494-d30f-307237adce9c"},"source":["model = VGG16(weights='imagenet',input_shape=(64, 64, 3), include_top=False)\n","\n","for layer in model.layers[:]:\n","    layer.trainable = False\n","\n","output = model.output\n","output = Flatten()(output)\n","output = Dense(units=4096, activation='relu')(output)\n","output = Dense(units=4096, activation='relu')(output)\n","output = Dense(units=200, activation='softmax')(output)\n","model = Model(model.input, output)\n","\n","model.summary()\n","\n","early_stopping = EarlyStopping(monitor='val_categorical_accuracy', patience=4, restore_best_weights=True)\n","time_callback = TimeHistory()\n","\n","model.compile(optimizer=Adam(lr=1e-4),loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","history=model.fit(train_data, train_labels, epochs=20, batch_size=128, validation_data=(val_data, val_labels), callbacks=[early_stopping,time_callback],verbose=2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58892288/58889256 [==============================] - 1s 0us/step\n","Model: \"model_7\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_8 (InputLayer)         [(None, 64, 64, 3)]       0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 64, 64, 64)        1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 64, 64, 64)        36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 32, 32, 64)        0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 32, 32, 128)       73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 32, 32, 128)       147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 16, 16, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 16, 16, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 16, 16, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 16, 16, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 8, 8, 256)         0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 8, 8, 512)         1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 8, 8, 512)         2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 8, 8, 512)         2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 4, 4, 512)         0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 4, 4, 512)         2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 4, 4, 512)         2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 4, 4, 512)         2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 2, 2, 512)         0         \n","_________________________________________________________________\n","flatten_7 (Flatten)          (None, 2048)              0         \n","_________________________________________________________________\n","dense_21 (Dense)             (None, 4096)              8392704   \n","_________________________________________________________________\n","dense_22 (Dense)             (None, 4096)              16781312  \n","_________________________________________________________________\n","dense_23 (Dense)             (None, 200)               819400    \n","=================================================================\n","Total params: 40,708,104\n","Trainable params: 25,993,416\n","Non-trainable params: 14,714,688\n","_________________________________________________________________\n","Epoch 1/20\n","704/704 - 20s - loss: 4.1613 - categorical_accuracy: 0.2876 - val_loss: 2.8740 - val_categorical_accuracy: 0.3659\n","Epoch 2/20\n","704/704 - 19s - loss: 1.8192 - categorical_accuracy: 0.5608 - val_loss: 2.8512 - val_categorical_accuracy: 0.3907\n","Epoch 3/20\n","704/704 - 19s - loss: 0.8203 - categorical_accuracy: 0.7927 - val_loss: 3.0519 - val_categorical_accuracy: 0.3921\n","Epoch 4/20\n","704/704 - 19s - loss: 0.3093 - categorical_accuracy: 0.9283 - val_loss: 3.2610 - val_categorical_accuracy: 0.4014\n","Epoch 5/20\n","704/704 - 19s - loss: 0.1606 - categorical_accuracy: 0.9672 - val_loss: 3.5203 - val_categorical_accuracy: 0.3984\n","Epoch 6/20\n","704/704 - 19s - loss: 0.1647 - categorical_accuracy: 0.9630 - val_loss: 3.5240 - val_categorical_accuracy: 0.4008\n","Epoch 7/20\n","704/704 - 19s - loss: 0.1589 - categorical_accuracy: 0.9629 - val_loss: 3.7196 - val_categorical_accuracy: 0.3873\n","Epoch 8/20\n","704/704 - 19s - loss: 0.1302 - categorical_accuracy: 0.9684 - val_loss: 3.7948 - val_categorical_accuracy: 0.3964\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":398},"id":"oBDsk5ehI3Dd","executionInfo":{"status":"ok","timestamp":1616621407591,"user_tz":0,"elapsed":6904,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"ef8d902c-d133-4391-c671-d5b6758c6dd9"},"source":["plot_history(history)\n","\n","times = time_callback.times\n","print(times)\n","\n","start_time = time.time()\n","score = model.evaluate(test_data, test_labels)\n","time_elapsed = time.time() - start_time\n","print('Test loss:', score[0])\n","print('Test accuracy:', score[1])\n","print('Average inference time per image: {:.4f} (ms)'.format(1000*time_elapsed/len(test_data)))\n","\n","\n","VGG16Transfer=pd.DataFrame.from_dict(history.history)\n","VGG16Transfer[\"times\"]=times[0:len(VGG16Transfer)]\n","\n","total = sum(times[0:len(VGG16Transfer)])\n","VGG16Transfer.loc[len(VGG16Transfer)]=['total for epochs',0,0,0,total]\n","VGG16Transfer.loc[len(VGG16Transfer)]=['time_elapsed',0,0,0,time_elapsed]\n","VGG16Transfer.loc[len(VGG16Transfer)]=['time_elapsed/image',0,0,0,(1000*time_elapsed/len(test_data))]\n","VGG16Transfer.loc[len(VGG16Transfer)]=['test accuracy',0,0,0,score[1]]\n","\n","\n","\n","VGG16Transfer.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture/VGG16Transfer.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture/VGG16Transfer Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[20.296371936798096, 19.329278230667114, 19.31985592842102, 19.325024127960205, 19.239339351654053, 19.22882318496704, 19.241352081298828, 19.284515142440796]\n","313/313 [==============================] - 3s 10ms/step - loss: 3.2969 - categorical_accuracy: 0.4011\n","Test loss: 3.2968921661376953\n","Test accuracy: 0.4011000096797943\n","Average inference time per image: 0.3112 (ms)\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture/VGG16Transfer Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5iTVf_mDFlk3","executionInfo":{"status":"ok","timestamp":1616621681260,"user_tz":0,"elapsed":273667,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"80d1af43-8610-4686-f21e-a7ff088d449e"},"source":["model = VGG16(weights='imagenet',input_shape=(64, 64, 3), include_top=False)\n","\n","output = model.output\n","output = Flatten()(output)\n","output = Dense(units=4096, activation='relu')(output)\n","output = Dense(units=4096, activation='relu')(output)\n","output = Dense(units=200, activation='softmax')(output)\n","model = Model(model.input, output)\n","\n","model.summary()\n","\n","early_stopping = EarlyStopping(monitor='val_categorical_accuracy', patience=4, restore_best_weights=True)\n","time_callback = TimeHistory()\n","\n","model.compile(optimizer=Adam(lr=1e-4),loss='categorical_crossentropy', metrics=['categorical_accuracy'])\n","history=model.fit(train_data, train_labels, epochs=20, batch_size=128, validation_data=(val_data, val_labels), callbacks=[early_stopping,time_callback],verbose=2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"model_8\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_9 (InputLayer)         [(None, 64, 64, 3)]       0         \n","_________________________________________________________________\n","block1_conv1 (Conv2D)        (None, 64, 64, 64)        1792      \n","_________________________________________________________________\n","block1_conv2 (Conv2D)        (None, 64, 64, 64)        36928     \n","_________________________________________________________________\n","block1_pool (MaxPooling2D)   (None, 32, 32, 64)        0         \n","_________________________________________________________________\n","block2_conv1 (Conv2D)        (None, 32, 32, 128)       73856     \n","_________________________________________________________________\n","block2_conv2 (Conv2D)        (None, 32, 32, 128)       147584    \n","_________________________________________________________________\n","block2_pool (MaxPooling2D)   (None, 16, 16, 128)       0         \n","_________________________________________________________________\n","block3_conv1 (Conv2D)        (None, 16, 16, 256)       295168    \n","_________________________________________________________________\n","block3_conv2 (Conv2D)        (None, 16, 16, 256)       590080    \n","_________________________________________________________________\n","block3_conv3 (Conv2D)        (None, 16, 16, 256)       590080    \n","_________________________________________________________________\n","block3_pool (MaxPooling2D)   (None, 8, 8, 256)         0         \n","_________________________________________________________________\n","block4_conv1 (Conv2D)        (None, 8, 8, 512)         1180160   \n","_________________________________________________________________\n","block4_conv2 (Conv2D)        (None, 8, 8, 512)         2359808   \n","_________________________________________________________________\n","block4_conv3 (Conv2D)        (None, 8, 8, 512)         2359808   \n","_________________________________________________________________\n","block4_pool (MaxPooling2D)   (None, 4, 4, 512)         0         \n","_________________________________________________________________\n","block5_conv1 (Conv2D)        (None, 4, 4, 512)         2359808   \n","_________________________________________________________________\n","block5_conv2 (Conv2D)        (None, 4, 4, 512)         2359808   \n","_________________________________________________________________\n","block5_conv3 (Conv2D)        (None, 4, 4, 512)         2359808   \n","_________________________________________________________________\n","block5_pool (MaxPooling2D)   (None, 2, 2, 512)         0         \n","_________________________________________________________________\n","flatten_8 (Flatten)          (None, 2048)              0         \n","_________________________________________________________________\n","dense_24 (Dense)             (None, 4096)              8392704   \n","_________________________________________________________________\n","dense_25 (Dense)             (None, 4096)              16781312  \n","_________________________________________________________________\n","dense_26 (Dense)             (None, 200)               819400    \n","=================================================================\n","Total params: 40,708,104\n","Trainable params: 40,708,104\n","Non-trainable params: 0\n","_________________________________________________________________\n","Epoch 1/20\n","704/704 - 55s - loss: 5.3312 - categorical_accuracy: 0.0044 - val_loss: 5.2983 - val_categorical_accuracy: 0.0050\n","Epoch 2/20\n","704/704 - 54s - loss: 5.2984 - categorical_accuracy: 0.0044 - val_loss: 5.2983 - val_categorical_accuracy: 0.0050\n","Epoch 3/20\n","704/704 - 54s - loss: 5.2984 - categorical_accuracy: 0.0044 - val_loss: 5.2983 - val_categorical_accuracy: 0.0050\n","Epoch 4/20\n","704/704 - 54s - loss: 5.2986 - categorical_accuracy: 0.0046 - val_loss: 5.2983 - val_categorical_accuracy: 0.0050\n","Epoch 5/20\n","704/704 - 54s - loss: 5.2985 - categorical_accuracy: 0.0046 - val_loss: 5.2983 - val_categorical_accuracy: 0.0050\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":398},"id":"ktrlHKoCFobm","executionInfo":{"status":"ok","timestamp":1616621688701,"user_tz":0,"elapsed":281106,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"8d4ae1c3-bb38-4919-82f3-f9aa61952acb"},"source":["plot_history(history)\n","\n","times = time_callback.times\n","print(times)\n","\n","start_time = time.time()\n","score = model.evaluate(test_data, test_labels)\n","time_elapsed = time.time() - start_time\n","print('Test loss:', score[0])\n","print('Test accuracy:', score[1])\n","print('Average inference time per image: {:.4f} (ms)'.format(1000*time_elapsed/len(test_data)))\n","\n","\n","VGG16Tuning=pd.DataFrame.from_dict(history.history)\n","VGG16Tuning[\"times\"]=times[0:len(VGG16Tuning)]\n","\n","total = sum(times[0:len(VGG16Tuning)])\n","VGG16Tuning.loc[len(VGG16Tuning)]=['total for epochs',0,0,0,total]\n","VGG16Tuning.loc[len(VGG16Tuning)]=['time_elapsed',0,0,0,time_elapsed]\n","VGG16Tuning.loc[len(VGG16Tuning)]=['time_elapsed/image',0,0,0,(1000*time_elapsed/len(test_data))]\n","VGG16Tuning.loc[len(VGG16Tuning)]=['test accuracy',0,0,0,score[1]]\n","\n","\n","\n","VGG16Tuning.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture/VGG16Tuning.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture/VGG16Tuning Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[55.43704915046692, 54.21092391014099, 54.222612142562866, 54.207013845443726, 54.285624504089355]\n","313/313 [==============================] - 3s 10ms/step - loss: 5.2983 - categorical_accuracy: 0.0050\n","Test loss: 5.2983174324035645\n","Test accuracy: 0.004999999888241291\n","Average inference time per image: 0.3122 (ms)\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Four - Common CNN Architecture/VGG16Tuning Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eeYRbpLANgHo","executionInfo":{"status":"ok","timestamp":1616622638655,"user_tz":0,"elapsed":480,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"6462ae0a-0351-4351-956b-94361c1a2dda"},"source":["!nvidia-smi"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Wed Mar 24 21:50:38 2021       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 460.56       Driver Version: 460.32.03    CUDA Version: 11.2     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla P100-PCIE...  Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   44C    P0    34W / 250W |   8777MiB / 16280MiB |      0%      Default |\n","|                               |                      |                  N/A |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]}]}