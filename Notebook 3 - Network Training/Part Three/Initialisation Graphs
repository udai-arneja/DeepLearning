{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Initialisation Graphs","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1616950005658,"user_tz":-60,"elapsed":2678,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1616950018947,"user_tz":-60,"elapsed":15956,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"4dbd1e45-816c-4ba3-a8de-3cd29de28a1a"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," Content.ipynb\t\t\t  'Learning Rates.png'\t'Part Three'\n","'Copy of Copy of Dropout Graphs'  'Part Four'\t\t'Part Two'\n"," Initialisations-Three.png\t  'Part One'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","\n","* Without using any data augmentation, analyze the effect of using Dropout in the model. Carry out the same analysis for Batch Normalization. Finally, combine both. Report in the same table as in the data augmentation task the best validation accuracy for each of the three settings (baseline + Dropout, baseline + Batch Normalization, baseline + Batch Normalization + Dropout). The performance will vary depending on where the Dropout layers and Batch Normalization layers, so state clearly where you added the layers, and what rate you used for the Dropout layers. Discuss the results.\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":368},"id":"iD8Rgx9v_PUk","executionInfo":{"status":"ok","timestamp":1616950052581,"user_tz":-60,"elapsed":918,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"a8d3e041-77be-4a9d-af2d-55fc64ba9e0a"},"source":["from statistics import mean\n","from itertools import chain\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","!ls\n","Zeros = pd.read_csv(\"Part Three/ZerosInitial.csv\")\n","Uniform = pd.read_csv(\"Part Three/Glorot_Uniform.csv\")\n","\n","\n","plt.title('Observing Effects Of Different Initialisations')\n","plt.plot(Zeros.loss, color='lightblue',linestyle='--')\n","plt.plot(Zeros.val_loss, color='blue',label=\"Zeros\",linestyle='-')\n","plt.plot(Uniform.loss, color='grey',linestyle='--')\n","plt.plot(Uniform.val_loss, color='black',label=\"Glorot Uniform\",linestyle='-')\n","\n","print(max(Uniform.val_accuracy))\n","print(max(Zeros.val_accuracy))\n","\n","# plt.xlabel('Epochs')\n","# plt.ylabel('Validation Loss')\n","# plt.ylim((0,2.5))\n","# plt.legend(title=\"Initialisations\",prop={'size': 8}, loc=\"lower left\")\n","# plt.savefig('Initialisations.png', dpi=1000)\n","# plt.show()"],"execution_count":5,"outputs":[{"output_type":"stream","text":[" Content.ipynb\t\t\t  'Learning Rates.png'\t'Part Three'\n","'Copy of Copy of Dropout Graphs'  'Part Four'\t\t'Part Two'\n"," Initialisations-Three.png\t  'Part One'\n","0.7944999933242798\n","0.10000000149011612\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Batch123Norm=pd.DataFrame.from_dict(history.history)\n","Batch123Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch123Norm().csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch123Norm() Model\")"],"execution_count":null,"outputs":[]}]}