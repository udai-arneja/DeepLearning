{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Initialisations","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1616505760211,"user_tz":0,"elapsed":2562,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1616505780085,"user_tz":0,"elapsed":22404,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"8e72b7f8-08ea-4288-995f-603f675c4c35"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," Content.ipynb\t\t  Initialisations  'Part Three'\n","'Copy of Content.ipynb'  'Part One'\t   'Part Two'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","\n","* Without using any data augmentation, analyze the effect of using Dropout in the model. Carry out the same analysis for Batch Normalization. Finally, combine both. Report in the same table as in the data augmentation task the best validation accuracy for each of the three settings (baseline + Dropout, baseline + Batch Normalization, baseline + Batch Normalization + Dropout). The performance will vary depending on where the Dropout layers and Batch Normalization layers, so state clearly where you added the layers, and what rate you used for the Dropout layers. Discuss the results.\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1616506442227,"user_tz":0,"elapsed":543494,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"0cca8770-08d7-4f2b-9413-cb2ea3132e0f"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Glorot_Uniform=pd.DataFrame.from_dict(history.history)\n","Glorot_Uniform.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Glorot_Uniform.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Glorot_Uniform Model\")"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 11s 0us/step\n","Image shape: (32, 32, 3)\n","Total number of training samples: 50000\n","Total number of validation samples: 10000\n","Epoch 1/40\n","1563/1563 - 43s - loss: 1.5631 - accuracy: 0.4276 - val_loss: 1.2778 - val_accuracy: 0.5418\n","Epoch 2/40\n","1563/1563 - 12s - loss: 1.1928 - accuracy: 0.5758 - val_loss: 1.0635 - val_accuracy: 0.6280\n","Epoch 3/40\n","1563/1563 - 12s - loss: 1.0152 - accuracy: 0.6435 - val_loss: 0.9652 - val_accuracy: 0.6611\n","Epoch 4/40\n","1563/1563 - 12s - loss: 0.8990 - accuracy: 0.6834 - val_loss: 0.8890 - val_accuracy: 0.6860\n","Epoch 5/40\n","1563/1563 - 12s - loss: 0.8128 - accuracy: 0.7143 - val_loss: 0.8267 - val_accuracy: 0.7104\n","Epoch 6/40\n","1563/1563 - 12s - loss: 0.7455 - accuracy: 0.7407 - val_loss: 0.7692 - val_accuracy: 0.7339\n","Epoch 7/40\n","1563/1563 - 12s - loss: 0.6842 - accuracy: 0.7610 - val_loss: 0.7582 - val_accuracy: 0.7410\n","Epoch 8/40\n","1563/1563 - 12s - loss: 0.6301 - accuracy: 0.7815 - val_loss: 0.7137 - val_accuracy: 0.7553\n","Epoch 9/40\n","1563/1563 - 12s - loss: 0.5833 - accuracy: 0.7980 - val_loss: 0.7252 - val_accuracy: 0.7475\n","Epoch 10/40\n","1563/1563 - 12s - loss: 0.5360 - accuracy: 0.8142 - val_loss: 0.6962 - val_accuracy: 0.7600\n","Epoch 11/40\n","1563/1563 - 12s - loss: 0.4972 - accuracy: 0.8274 - val_loss: 0.6628 - val_accuracy: 0.7740\n","Epoch 12/40\n","1563/1563 - 12s - loss: 0.4560 - accuracy: 0.8427 - val_loss: 0.6783 - val_accuracy: 0.7716\n","Epoch 13/40\n","1563/1563 - 12s - loss: 0.4193 - accuracy: 0.8531 - val_loss: 0.6919 - val_accuracy: 0.7704\n","Epoch 14/40\n","1563/1563 - 12s - loss: 0.3836 - accuracy: 0.8663 - val_loss: 0.6767 - val_accuracy: 0.7789\n","Epoch 15/40\n","1563/1563 - 12s - loss: 0.3470 - accuracy: 0.8793 - val_loss: 0.6669 - val_accuracy: 0.7819\n","Epoch 16/40\n","1563/1563 - 12s - loss: 0.3158 - accuracy: 0.8911 - val_loss: 0.6831 - val_accuracy: 0.7822\n","Epoch 17/40\n","1563/1563 - 12s - loss: 0.2823 - accuracy: 0.9030 - val_loss: 0.6991 - val_accuracy: 0.7808\n","Epoch 18/40\n","1563/1563 - 12s - loss: 0.2529 - accuracy: 0.9135 - val_loss: 0.7628 - val_accuracy: 0.7761\n","Epoch 19/40\n","1563/1563 - 12s - loss: 0.2220 - accuracy: 0.9252 - val_loss: 0.7138 - val_accuracy: 0.7871\n","Epoch 20/40\n","1563/1563 - 12s - loss: 0.1988 - accuracy: 0.9327 - val_loss: 0.7384 - val_accuracy: 0.7884\n","Epoch 21/40\n","1563/1563 - 12s - loss: 0.1707 - accuracy: 0.9422 - val_loss: 0.8108 - val_accuracy: 0.7826\n","Epoch 22/40\n","1563/1563 - 12s - loss: 0.1482 - accuracy: 0.9506 - val_loss: 0.7701 - val_accuracy: 0.7945\n","Epoch 23/40\n","1563/1563 - 12s - loss: 0.1287 - accuracy: 0.9570 - val_loss: 0.8711 - val_accuracy: 0.7810\n","Epoch 24/40\n","1563/1563 - 12s - loss: 0.1125 - accuracy: 0.9631 - val_loss: 0.9059 - val_accuracy: 0.7783\n","Epoch 25/40\n","1563/1563 - 12s - loss: 0.0994 - accuracy: 0.9685 - val_loss: 0.9257 - val_accuracy: 0.7851\n","Epoch 26/40\n","1563/1563 - 12s - loss: 0.0860 - accuracy: 0.9730 - val_loss: 0.9572 - val_accuracy: 0.7795\n","Epoch 27/40\n","1563/1563 - 12s - loss: 0.0760 - accuracy: 0.9755 - val_loss: 1.0947 - val_accuracy: 0.7707\n","Epoch 28/40\n","1563/1563 - 12s - loss: 0.0668 - accuracy: 0.9791 - val_loss: 1.0789 - val_accuracy: 0.7728\n","Epoch 29/40\n","1563/1563 - 12s - loss: 0.0571 - accuracy: 0.9829 - val_loss: 1.1958 - val_accuracy: 0.7674\n","Epoch 30/40\n","1563/1563 - 12s - loss: 0.0577 - accuracy: 0.9814 - val_loss: 1.1973 - val_accuracy: 0.7687\n","Epoch 31/40\n","1563/1563 - 12s - loss: 0.0503 - accuracy: 0.9842 - val_loss: 1.1327 - val_accuracy: 0.7781\n","Epoch 32/40\n","1563/1563 - 12s - loss: 0.0468 - accuracy: 0.9848 - val_loss: 1.1714 - val_accuracy: 0.7768\n","Epoch 33/40\n","1563/1563 - 12s - loss: 0.0433 - accuracy: 0.9865 - val_loss: 1.1385 - val_accuracy: 0.7883\n","Epoch 34/40\n","1563/1563 - 12s - loss: 0.0438 - accuracy: 0.9859 - val_loss: 1.1630 - val_accuracy: 0.7868\n","Epoch 35/40\n","1563/1563 - 12s - loss: 0.0393 - accuracy: 0.9876 - val_loss: 1.2218 - val_accuracy: 0.7850\n","Epoch 36/40\n","1563/1563 - 12s - loss: 0.0399 - accuracy: 0.9877 - val_loss: 1.3300 - val_accuracy: 0.7792\n","Epoch 37/40\n","1563/1563 - 12s - loss: 0.0360 - accuracy: 0.9883 - val_loss: 1.3243 - val_accuracy: 0.7825\n","Epoch 38/40\n","1563/1563 - 12s - loss: 0.0315 - accuracy: 0.9895 - val_loss: 1.3129 - val_accuracy: 0.7870\n","Epoch 39/40\n","1563/1563 - 12s - loss: 0.0365 - accuracy: 0.9890 - val_loss: 1.3015 - val_accuracy: 0.7859\n","Epoch 40/40\n","1563/1563 - 12s - loss: 0.0374 - accuracy: 0.9884 - val_loss: 1.3287 - val_accuracy: 0.7804\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Glorot_Uniform Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"J3dpRIryQub5","executionInfo":{"status":"ok","timestamp":1616506942030,"user_tz":0,"elapsed":496564,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"d61fff41-151d-4449-9d65-3a37a0c0ef34"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'zeros'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","ZeroInitial=pd.DataFrame.from_dict(history.history)\n","ZeroInitial.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/ZerosInitial.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/ZerosInitial Model\")"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 14s - loss: 2.3027 - accuracy: 0.0968 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 2/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0975 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 3/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0980 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 4/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0977 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 5/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0970 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 6/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0968 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 7/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0993 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 8/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0986 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 9/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0965 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 10/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0973 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 11/40\n","1563/1563 - 12s - loss: 2.3026 - accuracy: 0.0981 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 12/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0988 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 13/40\n","1563/1563 - 12s - loss: 2.3026 - accuracy: 0.0982 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 14/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0991 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 15/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0974 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 16/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0967 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 17/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0991 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 18/40\n","1563/1563 - 12s - loss: 2.3026 - accuracy: 0.0997 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 19/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0966 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 20/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0971 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 21/40\n","1563/1563 - 12s - loss: 2.3026 - accuracy: 0.0985 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 22/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0983 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 23/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0991 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 24/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0982 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 25/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0969 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 26/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0961 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 27/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0962 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 28/40\n","1563/1563 - 12s - loss: 2.3026 - accuracy: 0.0970 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 29/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0966 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 30/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0977 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 31/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0971 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 32/40\n","1563/1563 - 12s - loss: 2.3026 - accuracy: 0.0975 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 33/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0969 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 34/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0977 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 35/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0973 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 36/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0957 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 37/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0970 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 38/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0991 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 39/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0984 - val_loss: 2.3026 - val_accuracy: 0.1000\n","Epoch 40/40\n","1563/1563 - 12s - loss: 2.3027 - accuracy: 0.0962 - val_loss: 2.3026 - val_accuracy: 0.1000\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/ZerosInitial Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}