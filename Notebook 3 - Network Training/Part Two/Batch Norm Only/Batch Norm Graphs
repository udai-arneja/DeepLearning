{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Batch Norm Graphs","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1616950795221,"user_tz":-60,"elapsed":2588,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1616950810460,"user_tz":-60,"elapsed":17815,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"c0466ce0-adf4-4855-8637-09430e47cd07"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," Content.ipynb\t\t\t   Initialisations-Three.png  'Part One'\n","'Copy of Copy of Dropout Graphs'  'Learning Rates.png'\t      'Part Three'\n"," Dropout.png\t\t\t  'Part Four'\t\t      'Part Two'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","\n","* Without using any data augmentation, analyze the effect of using Dropout in the model. Carry out the same analysis for Batch Normalization. Finally, combine both. Report in the same table as in the data augmentation task the best validation accuracy for each of the three settings (baseline + Dropout, baseline + Batch Normalization, baseline + Batch Normalization + Dropout). The performance will vary depending on where the Dropout layers and Batch Normalization layers, so state clearly where you added the layers, and what rate you used for the Dropout layers. Discuss the results.\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"iD8Rgx9v_PUk","executionInfo":{"status":"ok","timestamp":1616950833260,"user_tz":-60,"elapsed":5232,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"314217ef-3db8-487e-ec1f-7370af88340d"},"source":["from statistics import mean\n","from itertools import chain\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","!ls\n","Batch1 = pd.read_csv(\"Part Two/Batch Norm Only/Batch()Norm1.csv\")\n","Batch2 = pd.read_csv(\"Part Two/Batch Norm Only/Batch()Norm2.csv\")\n","Batch3 = pd.read_csv(\"Part Two/Batch Norm Only/Batch()Norm3.csv\")\n","Batch12 = pd.read_csv(\"Part Two/Batch Norm Only/Batch()Norm12.csv\")\n","Batch23 = pd.read_csv(\"Part Two/Batch Norm Only/Batch()Norm23.csv\")\n","Batch123 = pd.read_csv(\"Part Two/Batch Norm Only/Batch()Norm123.csv\")\n","\n","\n","\n","\n","# n=2\n","\n","# h1l=list(chain.from_iterable([mean(history1['loss'][i:i+n])]*n for i in range(0,len(history1['loss']),n)))\n","# h1vl=list(chain.from_iterable([mean(history1['val_loss'][i:i+n])]*n for i in range(0,len(history1['val_loss']),n)))\n","# h2l=list(chain.from_iterable([mean(history2['loss'][i:i+n])]*n for i in range(0,len(history2['loss']),n)))\n","# h2vl=list(chain.from_iterable([mean(history2['val_loss'][i:i+n])]*n for i in range(0,len(history2['val_loss']),n)))\n","# h3l=list(chain.from_iterable([mean(history3['loss'][i:i+n])]*n for i in range(0,len(history3['loss']),n)))\n","# h3vl=list(chain.from_iterable([mean(history3['val_loss'][i:i+n])]*n for i in range(0,len(history3['val_loss']),n)))\n","\n","\n","plt.title('Model Loss')\n","plt.plot(Batch1.loss, color='lightblue',linestyle='--')\n","plt.plot(Batch1.val_loss, color='blue',label=\"Layer One\",linestyle='-')\n","plt.plot(Batch2.loss, color='grey',linestyle='--')\n","plt.plot(Batch2.val_loss, color='black',label=\"Layer Two\",linestyle='-')\n","plt.plot(Batch3.loss, color='lightgreen',linestyle='--')\n","plt.plot(Batch3.val_loss, color='green',label=\"Layer Three\",linestyle='-')\n","plt.plot(Batch12.loss, color='pink',linestyle='--')\n","plt.plot(Batch12.val_loss, color='red',label=\"Layer One,Two\",linestyle='-')\n","plt.plot(Batch23.loss, color='orange',linestyle='--')\n","plt.plot(Batch23.val_loss, color='darkorange',label=\"Layer Two,Three\",linestyle='-')\n","plt.plot(Batch123.loss, color='yellow',linestyle='--')\n","plt.plot(Batch123.val_loss, color='yellow',label=\"Layer One,Two,Three\",linestyle='-')\n","# plt.plot(h2l, color='grey',linestyle='--')\n","# plt.plot(h2vl, color='black', label='[16,64,D10,D1]',linestyle='-')\n","# plt.plot(h3l, color='lightgreen',linestyle='--')\n","# plt.plot(h3vl, color='green', label='[8,16p,16p,32p,64p,64,128,248,300,D40,D10,D1]',linestyle='-')\n","\n","\n","print(max(Batch1.val_accuracy))\n","print(max(Batch2.val_accuracy))\n","print(max(Batch3.val_accuracy))\n","print(max(Batch123.val_accuracy))\n","print(max(Batch12.val_accuracy))\n","print(max(Batch23.val_accuracy))\n","\n","\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.ylim((0,2))\n","# plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),ncol=1, fancybox=True, shadow=True)\n","plt.legend(prop={'size': 8})\n","plt.savefig(\"BatchNorm.png\", dpi=1000)\n","plt.show()"],"execution_count":4,"outputs":[{"output_type":"stream","text":[" Content.ipynb\t\t\t   Initialisations-Three.png  'Part One'\n","'Copy of Copy of Dropout Graphs'  'Learning Rates.png'\t      'Part Three'\n"," Dropout.png\t\t\t  'Part Four'\t\t      'Part Two'\n","0.8015999794006348\n","0.8008999824523926\n","0.7885000109672546\n","0.7930999994277954\n","0.807200014591217\n","0.7851999998092651\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Batch123Norm=pd.DataFrame.from_dict(history.history)\n","Batch123Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch123Norm().csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch123Norm() Model\")"],"execution_count":null,"outputs":[]}]}