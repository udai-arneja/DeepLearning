{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Batch Norm DataAugmentation","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1616499207297,"user_tz":0,"elapsed":2368,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1616499224228,"user_tz":0,"elapsed":19281,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"36a28b94-54f4-4921-f3c8-1cd1ec8d0f0c"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n","'Batch Norm DataAugmentation'  'Flip Results'\t     'Rotation Results'\n"," Content.ipynb\t\t       'Multiple&Agressive'  'Shift Results'\n","'Dropout DataAugmentation'     'No Augmentation'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","\n","* Without using any data augmentation, analyze the effect of using Dropout in the model. Carry out the same analysis for Batch Normalization. Finally, combine both. Report in the same table as in the data augmentation task the best validation accuracy for each of the three settings (baseline + Dropout, baseline + Batch Normalization, baseline + Batch Normalization + Dropout). The performance will vary depending on where the Dropout layers and Batch Normalization layers, so state clearly where you added the layers, and what rate you used for the Dropout layers. Discuss the results.\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1616499610656,"user_tz":0,"elapsed":312137,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"54822c63-6896-45ff-c64d-278a2cb1fc46"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","BatchNorm123=pd.DataFrame.from_dict(history.history)\n","BatchNorm123.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm123.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm123 Model\")"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 3s 0us/step\n","Image shape: (32, 32, 3)\n","Total number of training samples: 50000\n","Total number of validation samples: 10000\n","Epoch 1/40\n","1563/1563 - 40s - loss: 1.2166 - accuracy: 0.5640 - val_loss: 0.9808 - val_accuracy: 0.6570\n","Epoch 2/40\n","1563/1563 - 7s - loss: 0.8654 - accuracy: 0.6962 - val_loss: 0.8027 - val_accuracy: 0.7151\n","Epoch 3/40\n","1563/1563 - 7s - loss: 0.7087 - accuracy: 0.7545 - val_loss: 0.7398 - val_accuracy: 0.7431\n","Epoch 4/40\n","1563/1563 - 7s - loss: 0.5978 - accuracy: 0.7925 - val_loss: 0.7207 - val_accuracy: 0.7467\n","Epoch 5/40\n","1563/1563 - 7s - loss: 0.5111 - accuracy: 0.8242 - val_loss: 0.6770 - val_accuracy: 0.7662\n","Epoch 6/40\n","1563/1563 - 7s - loss: 0.4397 - accuracy: 0.8475 - val_loss: 0.6737 - val_accuracy: 0.7729\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.3723 - accuracy: 0.8732 - val_loss: 0.6815 - val_accuracy: 0.7737\n","Epoch 8/40\n","1563/1563 - 7s - loss: 0.3141 - accuracy: 0.8932 - val_loss: 0.6912 - val_accuracy: 0.7750\n","Epoch 9/40\n","1563/1563 - 7s - loss: 0.2661 - accuracy: 0.9106 - val_loss: 0.7063 - val_accuracy: 0.7784\n","Epoch 10/40\n","1563/1563 - 7s - loss: 0.2220 - accuracy: 0.9255 - val_loss: 0.7130 - val_accuracy: 0.7825\n","Epoch 11/40\n","1563/1563 - 7s - loss: 0.1899 - accuracy: 0.9364 - val_loss: 0.7466 - val_accuracy: 0.7750\n","Epoch 12/40\n","1563/1563 - 7s - loss: 0.1561 - accuracy: 0.9498 - val_loss: 0.7470 - val_accuracy: 0.7870\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.1313 - accuracy: 0.9584 - val_loss: 0.7947 - val_accuracy: 0.7845\n","Epoch 14/40\n","1563/1563 - 7s - loss: 0.1119 - accuracy: 0.9654 - val_loss: 0.7935 - val_accuracy: 0.7870\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.1011 - accuracy: 0.9673 - val_loss: 0.8513 - val_accuracy: 0.7855\n","Epoch 16/40\n","1563/1563 - 7s - loss: 0.0871 - accuracy: 0.9725 - val_loss: 0.8805 - val_accuracy: 0.7785\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.0731 - accuracy: 0.9781 - val_loss: 0.8743 - val_accuracy: 0.7898\n","Epoch 18/40\n","1563/1563 - 7s - loss: 0.0694 - accuracy: 0.9785 - val_loss: 0.9278 - val_accuracy: 0.7836\n","Epoch 19/40\n","1563/1563 - 7s - loss: 0.0640 - accuracy: 0.9800 - val_loss: 0.9070 - val_accuracy: 0.7871\n","Epoch 20/40\n","1563/1563 - 7s - loss: 0.0556 - accuracy: 0.9834 - val_loss: 0.9772 - val_accuracy: 0.7835\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.0556 - accuracy: 0.9817 - val_loss: 0.9278 - val_accuracy: 0.7930\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.0485 - accuracy: 0.9846 - val_loss: 0.9645 - val_accuracy: 0.7866\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.0488 - accuracy: 0.9842 - val_loss: 0.9913 - val_accuracy: 0.7879\n","Epoch 24/40\n","1563/1563 - 7s - loss: 0.0417 - accuracy: 0.9874 - val_loss: 1.0304 - val_accuracy: 0.7856\n","Epoch 25/40\n","1563/1563 - 7s - loss: 0.0473 - accuracy: 0.9844 - val_loss: 1.0635 - val_accuracy: 0.7817\n","Epoch 26/40\n","1563/1563 - 7s - loss: 0.0385 - accuracy: 0.9875 - val_loss: 1.1061 - val_accuracy: 0.7765\n","Epoch 27/40\n","1563/1563 - 7s - loss: 0.0386 - accuracy: 0.9872 - val_loss: 1.0742 - val_accuracy: 0.7810\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.0361 - accuracy: 0.9883 - val_loss: 1.0687 - val_accuracy: 0.7833\n","Epoch 29/40\n","1563/1563 - 7s - loss: 0.0335 - accuracy: 0.9894 - val_loss: 1.1236 - val_accuracy: 0.7810\n","Epoch 30/40\n","1563/1563 - 7s - loss: 0.0354 - accuracy: 0.9884 - val_loss: 1.1779 - val_accuracy: 0.7736\n","Epoch 31/40\n","1563/1563 - 7s - loss: 0.0298 - accuracy: 0.9905 - val_loss: 1.1155 - val_accuracy: 0.7858\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.0338 - accuracy: 0.9895 - val_loss: 1.1024 - val_accuracy: 0.7869\n","Epoch 33/40\n","1563/1563 - 7s - loss: 0.0284 - accuracy: 0.9909 - val_loss: 1.0885 - val_accuracy: 0.7922\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.0292 - accuracy: 0.9906 - val_loss: 1.1141 - val_accuracy: 0.7892\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.0315 - accuracy: 0.9898 - val_loss: 1.1778 - val_accuracy: 0.7830\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.0212 - accuracy: 0.9935 - val_loss: 1.1634 - val_accuracy: 0.7853\n","Epoch 37/40\n","1563/1563 - 7s - loss: 0.0281 - accuracy: 0.9905 - val_loss: 1.1679 - val_accuracy: 0.7845\n","Epoch 38/40\n","1563/1563 - 7s - loss: 0.0271 - accuracy: 0.9913 - val_loss: 1.1636 - val_accuracy: 0.7931\n","Epoch 39/40\n","1563/1563 - 7s - loss: 0.0240 - accuracy: 0.9916 - val_loss: 1.2162 - val_accuracy: 0.7865\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.0277 - accuracy: 0.9903 - val_loss: 1.2512 - val_accuracy: 0.7802\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm123 Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"8w0kMlkZsrOT","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1616499864855,"user_tz":0,"elapsed":253348,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"8fd62e80-84f7-4734-bd23-1d875a9e776b"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","BatchNorm1=pd.DataFrame.from_dict(history.history)\n","BatchNorm1.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm1.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm1 Model\")"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.3791 - accuracy: 0.4985 - val_loss: 1.1658 - val_accuracy: 0.5805\n","Epoch 2/40\n","1563/1563 - 6s - loss: 0.9874 - accuracy: 0.6492 - val_loss: 0.8859 - val_accuracy: 0.6931\n","Epoch 3/40\n","1563/1563 - 6s - loss: 0.8277 - accuracy: 0.7095 - val_loss: 0.8197 - val_accuracy: 0.7122\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.7150 - accuracy: 0.7499 - val_loss: 0.7277 - val_accuracy: 0.7488\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.6311 - accuracy: 0.7785 - val_loss: 0.7008 - val_accuracy: 0.7571\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.5641 - accuracy: 0.8049 - val_loss: 0.6493 - val_accuracy: 0.7787\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.5021 - accuracy: 0.8244 - val_loss: 0.6570 - val_accuracy: 0.7780\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.4484 - accuracy: 0.8438 - val_loss: 0.6173 - val_accuracy: 0.7901\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.3961 - accuracy: 0.8622 - val_loss: 0.6423 - val_accuracy: 0.7900\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.3527 - accuracy: 0.8783 - val_loss: 0.6533 - val_accuracy: 0.7917\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.3072 - accuracy: 0.8939 - val_loss: 0.6924 - val_accuracy: 0.7803\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.2688 - accuracy: 0.9064 - val_loss: 0.6743 - val_accuracy: 0.7937\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.2285 - accuracy: 0.9205 - val_loss: 0.7396 - val_accuracy: 0.7824\n","Epoch 14/40\n","1563/1563 - 7s - loss: 0.1912 - accuracy: 0.9349 - val_loss: 0.7560 - val_accuracy: 0.7927\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.1637 - accuracy: 0.9435 - val_loss: 0.7411 - val_accuracy: 0.7960\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.1376 - accuracy: 0.9538 - val_loss: 0.7756 - val_accuracy: 0.7913\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.1140 - accuracy: 0.9620 - val_loss: 0.8948 - val_accuracy: 0.7809\n","Epoch 18/40\n","1563/1563 - 7s - loss: 0.1007 - accuracy: 0.9661 - val_loss: 0.8377 - val_accuracy: 0.7941\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.0848 - accuracy: 0.9722 - val_loss: 0.8533 - val_accuracy: 0.7988\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.0680 - accuracy: 0.9784 - val_loss: 1.0175 - val_accuracy: 0.7782\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.0685 - accuracy: 0.9769 - val_loss: 1.0444 - val_accuracy: 0.7822\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.0635 - accuracy: 0.9787 - val_loss: 0.9802 - val_accuracy: 0.7956\n","Epoch 23/40\n","1563/1563 - 7s - loss: 0.0599 - accuracy: 0.9792 - val_loss: 1.0078 - val_accuracy: 0.7933\n","Epoch 24/40\n","1563/1563 - 7s - loss: 0.0528 - accuracy: 0.9822 - val_loss: 1.0532 - val_accuracy: 0.7851\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.0527 - accuracy: 0.9819 - val_loss: 1.0850 - val_accuracy: 0.7914\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.0463 - accuracy: 0.9847 - val_loss: 1.0976 - val_accuracy: 0.7885\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.0500 - accuracy: 0.9834 - val_loss: 1.0436 - val_accuracy: 0.8016\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.0404 - accuracy: 0.9866 - val_loss: 1.0613 - val_accuracy: 0.7924\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.0437 - accuracy: 0.9856 - val_loss: 1.2119 - val_accuracy: 0.7808\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.0446 - accuracy: 0.9846 - val_loss: 1.2005 - val_accuracy: 0.7818\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.0356 - accuracy: 0.9882 - val_loss: 1.1232 - val_accuracy: 0.7946\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.0382 - accuracy: 0.9875 - val_loss: 1.2100 - val_accuracy: 0.7939\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.0354 - accuracy: 0.9881 - val_loss: 1.1472 - val_accuracy: 0.7960\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.0337 - accuracy: 0.9887 - val_loss: 1.2071 - val_accuracy: 0.7880\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.0329 - accuracy: 0.9892 - val_loss: 1.2830 - val_accuracy: 0.7948\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.0343 - accuracy: 0.9882 - val_loss: 1.5557 - val_accuracy: 0.7686\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.0280 - accuracy: 0.9908 - val_loss: 1.3846 - val_accuracy: 0.7785\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.0328 - accuracy: 0.9891 - val_loss: 1.2401 - val_accuracy: 0.8012\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.0292 - accuracy: 0.9901 - val_loss: 1.3243 - val_accuracy: 0.7880\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.0297 - accuracy: 0.9897 - val_loss: 1.4508 - val_accuracy: 0.7809\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm1 Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"7lFPBdNa2MTs","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1616500117114,"user_tz":0,"elapsed":252242,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"7ea99762-9332-4490-8cc5-674f69e04c0f"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","BatchNorm2=pd.DataFrame.from_dict(history.history)\n","BatchNorm2.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm2.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm2 Model\")"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.3278 - accuracy: 0.5183 - val_loss: 1.1016 - val_accuracy: 0.6051\n","Epoch 2/40\n","1563/1563 - 6s - loss: 0.9487 - accuracy: 0.6645 - val_loss: 0.9154 - val_accuracy: 0.6760\n","Epoch 3/40\n","1563/1563 - 6s - loss: 0.7903 - accuracy: 0.7216 - val_loss: 0.8460 - val_accuracy: 0.7059\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.6773 - accuracy: 0.7624 - val_loss: 0.7262 - val_accuracy: 0.7473\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.5994 - accuracy: 0.7911 - val_loss: 0.6944 - val_accuracy: 0.7634\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.5338 - accuracy: 0.8133 - val_loss: 0.6913 - val_accuracy: 0.7600\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.4770 - accuracy: 0.8350 - val_loss: 0.6332 - val_accuracy: 0.7808\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.4261 - accuracy: 0.8520 - val_loss: 0.6382 - val_accuracy: 0.7794\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.3779 - accuracy: 0.8698 - val_loss: 0.6963 - val_accuracy: 0.7804\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.3329 - accuracy: 0.8860 - val_loss: 0.6410 - val_accuracy: 0.7929\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.2924 - accuracy: 0.8996 - val_loss: 0.6469 - val_accuracy: 0.7913\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.2551 - accuracy: 0.9124 - val_loss: 0.6927 - val_accuracy: 0.7798\n","Epoch 13/40\n","1563/1563 - 7s - loss: 0.2212 - accuracy: 0.9245 - val_loss: 0.6650 - val_accuracy: 0.7944\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.1922 - accuracy: 0.9337 - val_loss: 0.7265 - val_accuracy: 0.7858\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.1634 - accuracy: 0.9457 - val_loss: 0.7667 - val_accuracy: 0.7838\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.1431 - accuracy: 0.9512 - val_loss: 0.8481 - val_accuracy: 0.7765\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.1203 - accuracy: 0.9591 - val_loss: 0.7900 - val_accuracy: 0.7993\n","Epoch 18/40\n","1563/1563 - 7s - loss: 0.1061 - accuracy: 0.9644 - val_loss: 0.8607 - val_accuracy: 0.7845\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.0934 - accuracy: 0.9688 - val_loss: 0.8289 - val_accuracy: 0.7911\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.0861 - accuracy: 0.9720 - val_loss: 0.8686 - val_accuracy: 0.7975\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.0723 - accuracy: 0.9780 - val_loss: 0.9194 - val_accuracy: 0.7915\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.0731 - accuracy: 0.9754 - val_loss: 0.9879 - val_accuracy: 0.7787\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.0595 - accuracy: 0.9810 - val_loss: 0.8934 - val_accuracy: 0.7995\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.0595 - accuracy: 0.9797 - val_loss: 0.9858 - val_accuracy: 0.7895\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.0531 - accuracy: 0.9823 - val_loss: 0.9631 - val_accuracy: 0.7960\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.0528 - accuracy: 0.9824 - val_loss: 1.0436 - val_accuracy: 0.7877\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.0493 - accuracy: 0.9840 - val_loss: 1.0498 - val_accuracy: 0.7900\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.0488 - accuracy: 0.9834 - val_loss: 0.9735 - val_accuracy: 0.7984\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.0419 - accuracy: 0.9862 - val_loss: 1.0733 - val_accuracy: 0.7970\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.0426 - accuracy: 0.9854 - val_loss: 1.1189 - val_accuracy: 0.7924\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.0427 - accuracy: 0.9856 - val_loss: 1.3995 - val_accuracy: 0.7702\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.0434 - accuracy: 0.9857 - val_loss: 1.0371 - val_accuracy: 0.7893\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.0350 - accuracy: 0.9878 - val_loss: 1.1527 - val_accuracy: 0.7916\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.0412 - accuracy: 0.9864 - val_loss: 1.0563 - val_accuracy: 0.7984\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.0348 - accuracy: 0.9885 - val_loss: 1.0850 - val_accuracy: 0.7944\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.0347 - accuracy: 0.9882 - val_loss: 1.2291 - val_accuracy: 0.7816\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.0328 - accuracy: 0.9889 - val_loss: 1.0747 - val_accuracy: 0.7998\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.0307 - accuracy: 0.9894 - val_loss: 1.2578 - val_accuracy: 0.7865\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.0359 - accuracy: 0.9878 - val_loss: 1.0900 - val_accuracy: 0.8009\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.0325 - accuracy: 0.9892 - val_loss: 1.1504 - val_accuracy: 0.7995\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm2 Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"5nGcByR82SxZ","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1616500366541,"user_tz":0,"elapsed":249402,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"32a2f395-ce83-43aa-af37-56eb778e70e7"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","BatchNorm3=pd.DataFrame.from_dict(history.history)\n","BatchNorm3.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm3.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm3 Model\")"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.2277 - accuracy: 0.5591 - val_loss: 1.1518 - val_accuracy: 0.5882\n","Epoch 2/40\n","1563/1563 - 6s - loss: 0.8507 - accuracy: 0.7006 - val_loss: 0.8704 - val_accuracy: 0.7008\n","Epoch 3/40\n","1563/1563 - 6s - loss: 0.6982 - accuracy: 0.7544 - val_loss: 0.8198 - val_accuracy: 0.7123\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.5926 - accuracy: 0.7945 - val_loss: 0.7395 - val_accuracy: 0.7447\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.5134 - accuracy: 0.8220 - val_loss: 0.6885 - val_accuracy: 0.7629\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.4429 - accuracy: 0.8475 - val_loss: 0.7183 - val_accuracy: 0.7611\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.3822 - accuracy: 0.8687 - val_loss: 0.6696 - val_accuracy: 0.7806\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.3304 - accuracy: 0.8861 - val_loss: 0.6883 - val_accuracy: 0.7773\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.2803 - accuracy: 0.9032 - val_loss: 0.7230 - val_accuracy: 0.7726\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.2388 - accuracy: 0.9191 - val_loss: 0.7863 - val_accuracy: 0.7620\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.2010 - accuracy: 0.9326 - val_loss: 0.8285 - val_accuracy: 0.7677\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.1692 - accuracy: 0.9447 - val_loss: 0.7823 - val_accuracy: 0.7832\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.1394 - accuracy: 0.9550 - val_loss: 0.9040 - val_accuracy: 0.7591\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.1222 - accuracy: 0.9612 - val_loss: 0.8812 - val_accuracy: 0.7723\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.1008 - accuracy: 0.9686 - val_loss: 0.9040 - val_accuracy: 0.7745\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.0908 - accuracy: 0.9708 - val_loss: 0.9510 - val_accuracy: 0.7689\n","Epoch 17/40\n","1563/1563 - 7s - loss: 0.0793 - accuracy: 0.9753 - val_loss: 1.0045 - val_accuracy: 0.7683\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.0671 - accuracy: 0.9791 - val_loss: 0.9641 - val_accuracy: 0.7778\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.0653 - accuracy: 0.9798 - val_loss: 0.9493 - val_accuracy: 0.7841\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.0585 - accuracy: 0.9815 - val_loss: 1.1452 - val_accuracy: 0.7638\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.0557 - accuracy: 0.9821 - val_loss: 1.0404 - val_accuracy: 0.7716\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.0502 - accuracy: 0.9843 - val_loss: 1.1463 - val_accuracy: 0.7728\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.0455 - accuracy: 0.9854 - val_loss: 1.1914 - val_accuracy: 0.7635\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.0459 - accuracy: 0.9857 - val_loss: 1.0643 - val_accuracy: 0.7773\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.0409 - accuracy: 0.9873 - val_loss: 1.1359 - val_accuracy: 0.7788\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.0419 - accuracy: 0.9868 - val_loss: 1.1819 - val_accuracy: 0.7663\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.0396 - accuracy: 0.9872 - val_loss: 1.0811 - val_accuracy: 0.7865\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.0349 - accuracy: 0.9889 - val_loss: 1.0702 - val_accuracy: 0.7836\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.0341 - accuracy: 0.9893 - val_loss: 1.1046 - val_accuracy: 0.7821\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.0335 - accuracy: 0.9893 - val_loss: 1.2704 - val_accuracy: 0.7766\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.0364 - accuracy: 0.9879 - val_loss: 1.2618 - val_accuracy: 0.7739\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.0306 - accuracy: 0.9906 - val_loss: 1.1322 - val_accuracy: 0.7873\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.0291 - accuracy: 0.9909 - val_loss: 1.1501 - val_accuracy: 0.7885\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.0285 - accuracy: 0.9910 - val_loss: 1.2587 - val_accuracy: 0.7793\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.0346 - accuracy: 0.9885 - val_loss: 1.2689 - val_accuracy: 0.7718\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.0225 - accuracy: 0.9933 - val_loss: 1.2716 - val_accuracy: 0.7754\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.0278 - accuracy: 0.9910 - val_loss: 1.2776 - val_accuracy: 0.7826\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.0224 - accuracy: 0.9926 - val_loss: 1.3768 - val_accuracy: 0.7714\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.0310 - accuracy: 0.9899 - val_loss: 1.2845 - val_accuracy: 0.7750\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.0239 - accuracy: 0.9921 - val_loss: 1.2549 - val_accuracy: 0.7800\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm3 Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"1Dy2R6bX2fy3","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1616500622565,"user_tz":0,"elapsed":505411,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"d6b60bba-0c55-4c67-cccd-98a5530038eb"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","BatchNorm12=pd.DataFrame.from_dict(history.history)\n","BatchNorm12.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm12.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm12 Model\")"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.3003 - accuracy: 0.5248 - val_loss: 1.0662 - val_accuracy: 0.6130\n","Epoch 2/40\n","1563/1563 - 6s - loss: 0.9334 - accuracy: 0.6709 - val_loss: 0.8548 - val_accuracy: 0.6945\n","Epoch 3/40\n","1563/1563 - 6s - loss: 0.7758 - accuracy: 0.7277 - val_loss: 0.7772 - val_accuracy: 0.7268\n","Epoch 4/40\n","1563/1563 - 7s - loss: 0.6735 - accuracy: 0.7639 - val_loss: 0.7406 - val_accuracy: 0.7411\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.5944 - accuracy: 0.7929 - val_loss: 0.6818 - val_accuracy: 0.7649\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.5299 - accuracy: 0.8150 - val_loss: 0.6798 - val_accuracy: 0.7674\n","Epoch 7/40\n","1563/1563 - 7s - loss: 0.4733 - accuracy: 0.8359 - val_loss: 0.6309 - val_accuracy: 0.7842\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.4241 - accuracy: 0.8520 - val_loss: 0.6227 - val_accuracy: 0.7862\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.3754 - accuracy: 0.8707 - val_loss: 0.6203 - val_accuracy: 0.7944\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.3326 - accuracy: 0.8852 - val_loss: 0.6363 - val_accuracy: 0.7931\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.2938 - accuracy: 0.8995 - val_loss: 0.6529 - val_accuracy: 0.7918\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.2598 - accuracy: 0.9111 - val_loss: 0.6201 - val_accuracy: 0.7993\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.2250 - accuracy: 0.9222 - val_loss: 0.6513 - val_accuracy: 0.8009\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.1946 - accuracy: 0.9329 - val_loss: 0.7376 - val_accuracy: 0.7863\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.1713 - accuracy: 0.9414 - val_loss: 0.6974 - val_accuracy: 0.7985\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.1462 - accuracy: 0.9500 - val_loss: 0.7556 - val_accuracy: 0.7935\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.1272 - accuracy: 0.9571 - val_loss: 0.7329 - val_accuracy: 0.8005\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.1114 - accuracy: 0.9620 - val_loss: 0.7996 - val_accuracy: 0.7972\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.0973 - accuracy: 0.9673 - val_loss: 0.7831 - val_accuracy: 0.8027\n","Epoch 20/40\n","1563/1563 - 7s - loss: 0.0869 - accuracy: 0.9713 - val_loss: 0.8345 - val_accuracy: 0.7912\n","Epoch 21/40\n","1563/1563 - 7s - loss: 0.0806 - accuracy: 0.9733 - val_loss: 0.8559 - val_accuracy: 0.7967\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.0694 - accuracy: 0.9771 - val_loss: 0.8732 - val_accuracy: 0.7995\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.0659 - accuracy: 0.9777 - val_loss: 0.8579 - val_accuracy: 0.8019\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.0590 - accuracy: 0.9805 - val_loss: 0.8778 - val_accuracy: 0.8049\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.0543 - accuracy: 0.9819 - val_loss: 1.0128 - val_accuracy: 0.7820\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.0542 - accuracy: 0.9826 - val_loss: 1.0598 - val_accuracy: 0.7843\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.0503 - accuracy: 0.9833 - val_loss: 1.0598 - val_accuracy: 0.7926\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.0484 - accuracy: 0.9838 - val_loss: 0.9474 - val_accuracy: 0.8055\n","Epoch 29/40\n","1563/1563 - 7s - loss: 0.0427 - accuracy: 0.9857 - val_loss: 0.9932 - val_accuracy: 0.8016\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.0440 - accuracy: 0.9852 - val_loss: 1.0242 - val_accuracy: 0.8048\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.0409 - accuracy: 0.9861 - val_loss: 1.0240 - val_accuracy: 0.7959\n","Epoch 32/40\n","1563/1563 - 7s - loss: 0.0406 - accuracy: 0.9871 - val_loss: 0.9934 - val_accuracy: 0.8052\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.0364 - accuracy: 0.9878 - val_loss: 1.1020 - val_accuracy: 0.7949\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.0365 - accuracy: 0.9876 - val_loss: 1.0166 - val_accuracy: 0.8064\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.0362 - accuracy: 0.9885 - val_loss: 1.0484 - val_accuracy: 0.8000\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.0344 - accuracy: 0.9888 - val_loss: 1.1095 - val_accuracy: 0.8017\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.0359 - accuracy: 0.9878 - val_loss: 1.0818 - val_accuracy: 0.8012\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.0306 - accuracy: 0.9898 - val_loss: 1.1054 - val_accuracy: 0.8049\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.0360 - accuracy: 0.9882 - val_loss: 1.0614 - val_accuracy: 0.8072\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.0271 - accuracy: 0.9911 - val_loss: 1.1983 - val_accuracy: 0.7911\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm12 Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Wapo_o5E2nIT","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1616500878640,"user_tz":0,"elapsed":255198,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"fb42f88d-5245-44dd-b25d-9092107a9a2f"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","BatchNorm23=pd.DataFrame.from_dict(history.history)\n","Batch2Norm23.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm23.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm23 Model\")"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.2381 - accuracy: 0.5568 - val_loss: 1.0426 - val_accuracy: 0.6261\n","Epoch 2/40\n","1563/1563 - 6s - loss: 0.8727 - accuracy: 0.6960 - val_loss: 0.8666 - val_accuracy: 0.6938\n","Epoch 3/40\n","1563/1563 - 6s - loss: 0.7185 - accuracy: 0.7489 - val_loss: 0.7677 - val_accuracy: 0.7330\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.6063 - accuracy: 0.7906 - val_loss: 0.7423 - val_accuracy: 0.7439\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.5193 - accuracy: 0.8205 - val_loss: 0.6941 - val_accuracy: 0.7610\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.4419 - accuracy: 0.8483 - val_loss: 0.7176 - val_accuracy: 0.7597\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.3786 - accuracy: 0.8714 - val_loss: 0.7418 - val_accuracy: 0.7545\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.3192 - accuracy: 0.8912 - val_loss: 0.6874 - val_accuracy: 0.7775\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.2675 - accuracy: 0.9104 - val_loss: 0.6914 - val_accuracy: 0.7829\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.2254 - accuracy: 0.9242 - val_loss: 0.7461 - val_accuracy: 0.7784\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.1852 - accuracy: 0.9394 - val_loss: 0.7725 - val_accuracy: 0.7693\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.1583 - accuracy: 0.9480 - val_loss: 0.8034 - val_accuracy: 0.7695\n","Epoch 13/40\n","1563/1563 - 7s - loss: 0.1282 - accuracy: 0.9595 - val_loss: 0.8680 - val_accuracy: 0.7664\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.1087 - accuracy: 0.9654 - val_loss: 0.8439 - val_accuracy: 0.7701\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.0964 - accuracy: 0.9698 - val_loss: 0.8678 - val_accuracy: 0.7762\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.0836 - accuracy: 0.9745 - val_loss: 0.9399 - val_accuracy: 0.7691\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.0751 - accuracy: 0.9764 - val_loss: 0.9734 - val_accuracy: 0.7709\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.0661 - accuracy: 0.9798 - val_loss: 0.9935 - val_accuracy: 0.7720\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.0652 - accuracy: 0.9792 - val_loss: 0.9412 - val_accuracy: 0.7814\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.0561 - accuracy: 0.9831 - val_loss: 1.0254 - val_accuracy: 0.7716\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.0535 - accuracy: 0.9837 - val_loss: 1.0534 - val_accuracy: 0.7741\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.0528 - accuracy: 0.9827 - val_loss: 1.0667 - val_accuracy: 0.7687\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.0440 - accuracy: 0.9859 - val_loss: 1.1017 - val_accuracy: 0.7731\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.0441 - accuracy: 0.9859 - val_loss: 1.1238 - val_accuracy: 0.7716\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.0449 - accuracy: 0.9853 - val_loss: 1.0931 - val_accuracy: 0.7730\n","Epoch 26/40\n","1563/1563 - 7s - loss: 0.0387 - accuracy: 0.9879 - val_loss: 1.1712 - val_accuracy: 0.7715\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.0389 - accuracy: 0.9873 - val_loss: 1.1463 - val_accuracy: 0.7744\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.0354 - accuracy: 0.9884 - val_loss: 1.1572 - val_accuracy: 0.7771\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.0347 - accuracy: 0.9892 - val_loss: 1.0992 - val_accuracy: 0.7852\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.0383 - accuracy: 0.9885 - val_loss: 1.1927 - val_accuracy: 0.7744\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.0294 - accuracy: 0.9909 - val_loss: 1.1849 - val_accuracy: 0.7771\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.0324 - accuracy: 0.9901 - val_loss: 1.1501 - val_accuracy: 0.7785\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.0300 - accuracy: 0.9902 - val_loss: 1.1600 - val_accuracy: 0.7835\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.0272 - accuracy: 0.9913 - val_loss: 1.1694 - val_accuracy: 0.7842\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.0314 - accuracy: 0.9897 - val_loss: 1.2750 - val_accuracy: 0.7659\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.0253 - accuracy: 0.9921 - val_loss: 1.2215 - val_accuracy: 0.7834\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.0278 - accuracy: 0.9911 - val_loss: 1.2659 - val_accuracy: 0.7698\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.0232 - accuracy: 0.9927 - val_loss: 1.2463 - val_accuracy: 0.7704\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.0293 - accuracy: 0.9901 - val_loss: 1.2979 - val_accuracy: 0.7743\n","Epoch 40/40\n","1563/1563 - 7s - loss: 0.0232 - accuracy: 0.9924 - val_loss: 1.2437 - val_accuracy: 0.7839\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch()Norm23 Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}