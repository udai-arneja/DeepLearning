{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Batch and Dropout DataAugmentation Graphs","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1616503658101,"user_tz":0,"elapsed":1823,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1616503675591,"user_tz":0,"elapsed":15699,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"7970bb0d-c04d-49e7-8c05-72779df64c30"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n","'Batch & Dropout DataAugmentation'  'Both - Batch and Dropout'\t'Dropout Only'\n","'Batch Norm DataAugmentation'\t     Content.ipynb\t\t'Part One'\n","'Batch Norm Only'\t\t    'Dropout DataAugmentation'\t'Part Two'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","\n","* Without using any data augmentation, analyze the effect of using Dropout in the model. Carry out the same analysis for Batch Normalization. Finally, combine both. Report in the same table as in the data augmentation task the best validation accuracy for each of the three settings (baseline + Dropout, baseline + Batch Normalization, baseline + Batch Normalization + Dropout). The performance will vary depending on where the Dropout layers and Batch Normalization layers, so state clearly where you added the layers, and what rate you used for the Dropout layers. Discuss the results.\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":343},"id":"iD8Rgx9v_PUk","executionInfo":{"status":"ok","timestamp":1616503681654,"user_tz":0,"elapsed":2901,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"66b5b1e0-f8da-48c7-dd0f-fe52ab634f04"},"source":["from statistics import mean\n","from itertools import chain\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","!ls\n","Drop1Norm1 = pd.read_csv(\"Both - Batch and Dropout/Drop1Norm1.csv\")\n","Drop2Norm2 = pd.read_csv(\"Both - Batch and Dropout/Drop2Norm2.csv\")\n","Drop3Norm3 = pd.read_csv(\"Both - Batch and Dropout/Drop3Norm3.csv\")\n","Drop12Norm12 = pd.read_csv(\"Both - Batch and Dropout/Drop12Norm12.csv\")\n","Drop23Norm23 = pd.read_csv(\"Both - Batch and Dropout/Drop23Norm23.csv\")\n","Drop123Norm123 = pd.read_csv(\"Both - Batch and Dropout/Drop123Norm123.csv\")\n","\n","\n","# n=2\n","\n","# h1l=list(chain.from_iterable([mean(history1['loss'][i:i+n])]*n for i in range(0,len(history1['loss']),n)))\n","# h1vl=list(chain.from_iterable([mean(history1['val_loss'][i:i+n])]*n for i in range(0,len(history1['val_loss']),n)))\n","# h2l=list(chain.from_iterable([mean(history2['loss'][i:i+n])]*n for i in range(0,len(history2['loss']),n)))\n","# h2vl=list(chain.from_iterable([mean(history2['val_loss'][i:i+n])]*n for i in range(0,len(history2['val_loss']),n)))\n","# h3l=list(chain.from_iterable([mean(history3['loss'][i:i+n])]*n for i in range(0,len(history3['loss']),n)))\n","# h3vl=list(chain.from_iterable([mean(history3['val_loss'][i:i+n])]*n for i in range(0,len(history3['val_loss']),n)))\n","\n","\n","plt.title('Model Loss')\n","plt.plot(Drop1Norm1.loss, color='lightblue',linestyle='--')\n","plt.plot(Drop1Norm1.val_loss, color='blue',label=\"Layer One\",linestyle='-')\n","plt.plot(Drop2Norm2.loss, color='grey',linestyle='--')\n","plt.plot(Drop2Norm2.val_loss, color='black',label=\"Layer Two\",linestyle='-')\n","plt.plot(Drop3Norm3.loss, color='lightgreen',linestyle='--')\n","plt.plot(Drop3Norm3.val_loss, color='green',label=\"Layer Three\",linestyle='-')\n","plt.plot(Drop12Norm12.loss, color='pink',linestyle='--')\n","plt.plot(Drop12Norm12.val_loss, color='red',label=\"Layer One,Two\",linestyle='-')\n","plt.plot(Drop23Norm23.loss, color='orange',linestyle='--')\n","plt.plot(Drop23Norm23.val_loss, color='darkorange',label=\"Layer Two,Three\",linestyle='-')\n","plt.plot(Drop123Norm123.loss, color='yellow',linestyle='--')\n","plt.plot(Drop123Norm123.val_loss, color='yellow',label=\"Layer One,Two,Three\",linestyle='-')\n","# plt.plot(h2l, color='grey',linestyle='--')\n","# plt.plot(h2vl, color='black', label='[16,64,D10,D1]',linestyle='-')\n","# plt.plot(h3l, color='lightgreen',linestyle='--')\n","# plt.plot(h3vl, color='green', label='[8,16p,16p,32p,64p,64,128,248,300,D40,D10,D1]',linestyle='-')\n","\n","\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.ylim((0,2))\n","# plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),ncol=1, fancybox=True, shadow=True)\n","plt.legend(prop={'size': 8})\n","plt.show()"],"execution_count":4,"outputs":[{"output_type":"stream","text":["'Batch & Dropout DataAugmentation'  'Both - Batch and Dropout'\t'Dropout Only'\n","'Batch Norm DataAugmentation'\t     Content.ipynb\t\t'Part One'\n","'Batch Norm Only'\t\t    'Dropout DataAugmentation'\t'Part Two'\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Batch123Norm=pd.DataFrame.from_dict(history.history)\n","Batch123Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch123Norm().csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch123Norm() Model\")"],"execution_count":null,"outputs":[]}]}