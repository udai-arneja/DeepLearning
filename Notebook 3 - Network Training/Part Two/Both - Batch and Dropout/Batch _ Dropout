{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":1845,"status":"ok","timestamp":1616500861091,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"},"user_tz":0},"id":"awkdj4xOqsZL"},"outputs":[],"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18554,"status":"ok","timestamp":1616500877819,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"},"user_tz":0},"id":"boROCEDxr6P4","outputId":"0bdd8b9f-830d-4d22-f7a8-db927931cee5"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n","'Batch \u0026 Dropout DataAugmentation'  'Batch Norm Only'\t\t'Dropout Only'\n","'Batch()Norm12.csv'\t\t    'Both - Batch and Dropout'\t'Part One'\n","'Batch()Norm12 Model'\t\t     Content.ipynb\t\t'Part Two'\n","'Batch Norm DataAugmentation'\t    'Dropout DataAugmentation'\n"]}],"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","\n","* Without using any data augmentation, analyze the effect of using Dropout in the model. Carry out the same analysis for Batch Normalization. Finally, combine both. Report in the same table as in the data augmentation task the best validation accuracy for each of the three settings (baseline + Dropout, baseline + Batch Normalization, baseline + Batch Normalization + Dropout). The performance will vary depending on where the Dropout layers and Batch Normalization layers, so state clearly where you added the layers, and what rate you used for the Dropout layers. Discuss the results.\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":338489,"status":"ok","timestamp":1616501197756,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"},"user_tz":0},"id":"g3kbDP402H_u","outputId":"539b3daf-7b0e-47b1-cce8-10c5cf88161e"},"outputs":[{"name":"stdout","output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 2s 0us/step\n","Image shape: (32, 32, 3)\n","Total number of training samples: 50000\n","Total number of validation samples: 10000\n","Epoch 1/40\n","1563/1563 - 39s - loss: 1.3916 - accuracy: 0.4963 - val_loss: 1.3845 - val_accuracy: 0.5152\n","Epoch 2/40\n","1563/1563 - 7s - loss: 1.0895 - accuracy: 0.6110 - val_loss: 1.1590 - val_accuracy: 0.5921\n","Epoch 3/40\n","1563/1563 - 7s - loss: 0.9624 - accuracy: 0.6602 - val_loss: 1.0342 - val_accuracy: 0.6372\n","Epoch 4/40\n","1563/1563 - 7s - loss: 0.8733 - accuracy: 0.6935 - val_loss: 0.8573 - val_accuracy: 0.6947\n","Epoch 5/40\n","1563/1563 - 7s - loss: 0.8112 - accuracy: 0.7144 - val_loss: 0.9176 - val_accuracy: 0.6775\n","Epoch 6/40\n","1563/1563 - 7s - loss: 0.7568 - accuracy: 0.7360 - val_loss: 0.7996 - val_accuracy: 0.7213\n","Epoch 7/40\n","1563/1563 - 7s - loss: 0.7212 - accuracy: 0.7477 - val_loss: 0.7579 - val_accuracy: 0.7387\n","Epoch 8/40\n","1563/1563 - 7s - loss: 0.6822 - accuracy: 0.7613 - val_loss: 0.7330 - val_accuracy: 0.7434\n","Epoch 9/40\n","1563/1563 - 7s - loss: 0.6509 - accuracy: 0.7728 - val_loss: 0.7502 - val_accuracy: 0.7431\n","Epoch 10/40\n","1563/1563 - 7s - loss: 0.6223 - accuracy: 0.7832 - val_loss: 0.6987 - val_accuracy: 0.7573\n","Epoch 11/40\n","1563/1563 - 7s - loss: 0.6007 - accuracy: 0.7904 - val_loss: 0.6576 - val_accuracy: 0.7732\n","Epoch 12/40\n","1563/1563 - 7s - loss: 0.5821 - accuracy: 0.7944 - val_loss: 0.6242 - val_accuracy: 0.7822\n","Epoch 13/40\n","1563/1563 - 7s - loss: 0.5597 - accuracy: 0.8031 - val_loss: 0.6929 - val_accuracy: 0.7720\n","Epoch 14/40\n","1563/1563 - 7s - loss: 0.5430 - accuracy: 0.8101 - val_loss: 0.6407 - val_accuracy: 0.7815\n","Epoch 15/40\n","1563/1563 - 7s - loss: 0.5233 - accuracy: 0.8165 - val_loss: 0.6214 - val_accuracy: 0.7916\n","Epoch 16/40\n","1563/1563 - 7s - loss: 0.5085 - accuracy: 0.8200 - val_loss: 0.6254 - val_accuracy: 0.7908\n","Epoch 17/40\n","1563/1563 - 7s - loss: 0.4965 - accuracy: 0.8237 - val_loss: 0.6019 - val_accuracy: 0.7939\n","Epoch 18/40\n","1563/1563 - 7s - loss: 0.4823 - accuracy: 0.8323 - val_loss: 0.6080 - val_accuracy: 0.7963\n","Epoch 19/40\n","1563/1563 - 7s - loss: 0.4692 - accuracy: 0.8337 - val_loss: 0.5692 - val_accuracy: 0.8033\n","Epoch 20/40\n","1563/1563 - 7s - loss: 0.4611 - accuracy: 0.8373 - val_loss: 0.5843 - val_accuracy: 0.8039\n","Epoch 21/40\n","1563/1563 - 7s - loss: 0.4479 - accuracy: 0.8436 - val_loss: 0.5588 - val_accuracy: 0.8128\n","Epoch 22/40\n","1563/1563 - 7s - loss: 0.4418 - accuracy: 0.8444 - val_loss: 0.5698 - val_accuracy: 0.8085\n","Epoch 23/40\n","1563/1563 - 7s - loss: 0.4270 - accuracy: 0.8493 - val_loss: 0.5940 - val_accuracy: 0.8030\n","Epoch 24/40\n","1563/1563 - 7s - loss: 0.4187 - accuracy: 0.8514 - val_loss: 0.5993 - val_accuracy: 0.8038\n","Epoch 25/40\n","1563/1563 - 7s - loss: 0.4154 - accuracy: 0.8527 - val_loss: 0.5663 - val_accuracy: 0.8146\n","Epoch 26/40\n","1563/1563 - 7s - loss: 0.3995 - accuracy: 0.8581 - val_loss: 0.5483 - val_accuracy: 0.8149\n","Epoch 27/40\n","1563/1563 - 7s - loss: 0.3927 - accuracy: 0.8621 - val_loss: 0.5625 - val_accuracy: 0.8140\n","Epoch 28/40\n","1563/1563 - 7s - loss: 0.3854 - accuracy: 0.8628 - val_loss: 0.5996 - val_accuracy: 0.8040\n","Epoch 29/40\n","1563/1563 - 7s - loss: 0.3832 - accuracy: 0.8644 - val_loss: 0.5644 - val_accuracy: 0.8171\n","Epoch 30/40\n","1563/1563 - 7s - loss: 0.3651 - accuracy: 0.8703 - val_loss: 0.5624 - val_accuracy: 0.8192\n","Epoch 31/40\n","1563/1563 - 7s - loss: 0.3643 - accuracy: 0.8693 - val_loss: 0.5914 - val_accuracy: 0.8122\n","Epoch 32/40\n","1563/1563 - 7s - loss: 0.3576 - accuracy: 0.8743 - val_loss: 0.5753 - val_accuracy: 0.8150\n","Epoch 33/40\n","1563/1563 - 7s - loss: 0.3532 - accuracy: 0.8752 - val_loss: 0.5948 - val_accuracy: 0.8120\n","Epoch 34/40\n","1563/1563 - 7s - loss: 0.3455 - accuracy: 0.8765 - val_loss: 0.5365 - val_accuracy: 0.8262\n","Epoch 35/40\n","1563/1563 - 7s - loss: 0.3347 - accuracy: 0.8810 - val_loss: 0.5765 - val_accuracy: 0.8210\n","Epoch 36/40\n","1563/1563 - 7s - loss: 0.3361 - accuracy: 0.8797 - val_loss: 0.5719 - val_accuracy: 0.8187\n","Epoch 37/40\n","1563/1563 - 7s - loss: 0.3314 - accuracy: 0.8808 - val_loss: 0.5421 - val_accuracy: 0.8295\n","Epoch 38/40\n","1563/1563 - 7s - loss: 0.3251 - accuracy: 0.8836 - val_loss: 0.5606 - val_accuracy: 0.8232\n","Epoch 39/40\n","1563/1563 - 7s - loss: 0.3183 - accuracy: 0.8858 - val_loss: 0.5694 - val_accuracy: 0.8256\n","Epoch 40/40\n","1563/1563 - 7s - loss: 0.3112 - accuracy: 0.8892 - val_loss: 0.5726 - val_accuracy: 0.8179\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop123Norm123 Model/assets\n"]},{"data":{"image/png":"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\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Drop123Norm123=pd.DataFrame.from_dict(history.history)\n","Drop123Norm123.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop123Norm123.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop123Norm123 Model\")"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":600753,"status":"ok","timestamp":1616501460022,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"},"user_tz":0},"id":"8w0kMlkZsrOT","outputId":"ae8cb478-500b-44d0-c476-227c13c9a65d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.4438 - accuracy: 0.4737 - val_loss: 1.1625 - val_accuracy: 0.5749\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.0670 - accuracy: 0.6221 - val_loss: 0.9460 - val_accuracy: 0.6626\n","Epoch 3/40\n","1563/1563 - 6s - loss: 0.9073 - accuracy: 0.6795 - val_loss: 0.8473 - val_accuracy: 0.6987\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.7981 - accuracy: 0.7199 - val_loss: 0.8830 - val_accuracy: 0.6915\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.7142 - accuracy: 0.7500 - val_loss: 0.7206 - val_accuracy: 0.7425\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.6477 - accuracy: 0.7712 - val_loss: 0.7167 - val_accuracy: 0.7461\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.5871 - accuracy: 0.7919 - val_loss: 0.6786 - val_accuracy: 0.7646\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.5353 - accuracy: 0.8121 - val_loss: 0.6820 - val_accuracy: 0.7594\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.4877 - accuracy: 0.8292 - val_loss: 0.6403 - val_accuracy: 0.7783\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.4444 - accuracy: 0.8458 - val_loss: 0.6365 - val_accuracy: 0.7837\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.4061 - accuracy: 0.8574 - val_loss: 0.6514 - val_accuracy: 0.7822\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.3604 - accuracy: 0.8736 - val_loss: 0.6607 - val_accuracy: 0.7871\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.3247 - accuracy: 0.8856 - val_loss: 0.6691 - val_accuracy: 0.7820\n","Epoch 14/40\n","1563/1563 - 7s - loss: 0.2935 - accuracy: 0.8972 - val_loss: 0.7026 - val_accuracy: 0.7802\n","Epoch 15/40\n","1563/1563 - 7s - loss: 0.2607 - accuracy: 0.9093 - val_loss: 0.6963 - val_accuracy: 0.7846\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.2324 - accuracy: 0.9185 - val_loss: 0.7596 - val_accuracy: 0.7781\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.2110 - accuracy: 0.9255 - val_loss: 0.7759 - val_accuracy: 0.7823\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.1832 - accuracy: 0.9355 - val_loss: 0.7525 - val_accuracy: 0.7907\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.1622 - accuracy: 0.9422 - val_loss: 0.7853 - val_accuracy: 0.7862\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.1481 - accuracy: 0.9470 - val_loss: 0.8140 - val_accuracy: 0.7900\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.1343 - accuracy: 0.9528 - val_loss: 0.8678 - val_accuracy: 0.7870\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.1221 - accuracy: 0.9571 - val_loss: 0.8573 - val_accuracy: 0.7883\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.1134 - accuracy: 0.9599 - val_loss: 0.9554 - val_accuracy: 0.7753\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.1056 - accuracy: 0.9630 - val_loss: 0.9362 - val_accuracy: 0.7887\n","Epoch 25/40\n","1563/1563 - 7s - loss: 0.0965 - accuracy: 0.9662 - val_loss: 0.9313 - val_accuracy: 0.7888\n","Epoch 26/40\n","1563/1563 - 7s - loss: 0.0956 - accuracy: 0.9667 - val_loss: 0.9877 - val_accuracy: 0.7758\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.0885 - accuracy: 0.9694 - val_loss: 0.9863 - val_accuracy: 0.7853\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.0806 - accuracy: 0.9720 - val_loss: 0.9966 - val_accuracy: 0.7884\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.0812 - accuracy: 0.9713 - val_loss: 1.0169 - val_accuracy: 0.7913\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.0750 - accuracy: 0.9739 - val_loss: 1.0162 - val_accuracy: 0.7904\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.0740 - accuracy: 0.9738 - val_loss: 1.1065 - val_accuracy: 0.7826\n","Epoch 32/40\n","1563/1563 - 7s - loss: 0.0687 - accuracy: 0.9760 - val_loss: 1.0496 - val_accuracy: 0.7914\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.0712 - accuracy: 0.9748 - val_loss: 1.0898 - val_accuracy: 0.7909\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.0651 - accuracy: 0.9768 - val_loss: 1.1068 - val_accuracy: 0.7871\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.0670 - accuracy: 0.9764 - val_loss: 1.0981 - val_accuracy: 0.7900\n","Epoch 36/40\n","1563/1563 - 7s - loss: 0.0618 - accuracy: 0.9786 - val_loss: 1.1441 - val_accuracy: 0.7845\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.0594 - accuracy: 0.9796 - val_loss: 1.1362 - val_accuracy: 0.7852\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.0588 - accuracy: 0.9795 - val_loss: 1.1940 - val_accuracy: 0.7853\n","Epoch 39/40\n","1563/1563 - 7s - loss: 0.0574 - accuracy: 0.9803 - val_loss: 1.2169 - val_accuracy: 0.7857\n","Epoch 40/40\n","1563/1563 - 7s - loss: 0.0580 - accuracy: 0.9798 - val_loss: 1.2290 - val_accuracy: 0.7842\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop1Norm1 Model/assets\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Drop1Norm1=pd.DataFrame.from_dict(history.history)\n","Drop1Norm1.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop1Norm1.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop1Norm1 Model\")"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":859808,"status":"ok","timestamp":1616501719079,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"},"user_tz":0},"id":"7lFPBdNa2MTs","outputId":"a51b958d-4332-4896-a7c0-db38241cea58"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.3582 - accuracy: 0.5071 - val_loss: 1.0959 - val_accuracy: 0.6063\n","Epoch 2/40\n","1563/1563 - 6s - loss: 0.9974 - accuracy: 0.6455 - val_loss: 1.0040 - val_accuracy: 0.6481\n","Epoch 3/40\n","1563/1563 - 6s - loss: 0.8578 - accuracy: 0.6983 - val_loss: 0.8382 - val_accuracy: 0.7072\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.7596 - accuracy: 0.7335 - val_loss: 0.7440 - val_accuracy: 0.7423\n","Epoch 5/40\n","1563/1563 - 7s - loss: 0.6901 - accuracy: 0.7592 - val_loss: 0.7366 - val_accuracy: 0.7421\n","Epoch 6/40\n","1563/1563 - 7s - loss: 0.6384 - accuracy: 0.7763 - val_loss: 0.7039 - val_accuracy: 0.7547\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.5903 - accuracy: 0.7933 - val_loss: 0.6635 - val_accuracy: 0.7695\n","Epoch 8/40\n","1563/1563 - 7s - loss: 0.5501 - accuracy: 0.8082 - val_loss: 0.6159 - val_accuracy: 0.7876\n","Epoch 9/40\n","1563/1563 - 7s - loss: 0.5165 - accuracy: 0.8179 - val_loss: 0.6242 - val_accuracy: 0.7850\n","Epoch 10/40\n","1563/1563 - 7s - loss: 0.4803 - accuracy: 0.8306 - val_loss: 0.6042 - val_accuracy: 0.7918\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.4500 - accuracy: 0.8401 - val_loss: 0.6436 - val_accuracy: 0.7788\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.4246 - accuracy: 0.8521 - val_loss: 0.5869 - val_accuracy: 0.8012\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.3998 - accuracy: 0.8593 - val_loss: 0.5813 - val_accuracy: 0.8014\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.3749 - accuracy: 0.8678 - val_loss: 0.5859 - val_accuracy: 0.7986\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.3538 - accuracy: 0.8749 - val_loss: 0.5579 - val_accuracy: 0.8105\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.3295 - accuracy: 0.8841 - val_loss: 0.5764 - val_accuracy: 0.8097\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.3092 - accuracy: 0.8903 - val_loss: 0.5927 - val_accuracy: 0.8038\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.2921 - accuracy: 0.8945 - val_loss: 0.5730 - val_accuracy: 0.8142\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.2771 - accuracy: 0.9013 - val_loss: 0.5901 - val_accuracy: 0.8076\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.2607 - accuracy: 0.9062 - val_loss: 0.5907 - val_accuracy: 0.8087\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.2484 - accuracy: 0.9111 - val_loss: 0.6202 - val_accuracy: 0.8030\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.2311 - accuracy: 0.9186 - val_loss: 0.5912 - val_accuracy: 0.8134\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.2192 - accuracy: 0.9216 - val_loss: 0.5829 - val_accuracy: 0.8180\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.2051 - accuracy: 0.9263 - val_loss: 0.6298 - val_accuracy: 0.8120\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.1987 - accuracy: 0.9291 - val_loss: 0.6371 - val_accuracy: 0.8095\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.1832 - accuracy: 0.9349 - val_loss: 0.6084 - val_accuracy: 0.8206\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.1750 - accuracy: 0.9366 - val_loss: 0.6038 - val_accuracy: 0.8287\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.1656 - accuracy: 0.9412 - val_loss: 0.6580 - val_accuracy: 0.8189\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.1627 - accuracy: 0.9433 - val_loss: 0.6254 - val_accuracy: 0.8263\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.1510 - accuracy: 0.9467 - val_loss: 0.6457 - val_accuracy: 0.8228\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.1453 - accuracy: 0.9478 - val_loss: 0.6599 - val_accuracy: 0.8204\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.1374 - accuracy: 0.9516 - val_loss: 0.7338 - val_accuracy: 0.8076\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.1339 - accuracy: 0.9525 - val_loss: 0.6596 - val_accuracy: 0.8244\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.1251 - accuracy: 0.9556 - val_loss: 0.6883 - val_accuracy: 0.8229\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.1235 - accuracy: 0.9551 - val_loss: 0.6911 - val_accuracy: 0.8193\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.1177 - accuracy: 0.9589 - val_loss: 0.7118 - val_accuracy: 0.8134\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.1131 - accuracy: 0.9598 - val_loss: 0.7328 - val_accuracy: 0.8155\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.1143 - accuracy: 0.9596 - val_loss: 0.7773 - val_accuracy: 0.8112\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.1043 - accuracy: 0.9632 - val_loss: 0.7434 - val_accuracy: 0.8187\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.1060 - accuracy: 0.9626 - val_loss: 0.7249 - val_accuracy: 0.8216\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop2Norm2 Model/assets\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Drop2Norm2=pd.DataFrame.from_dict(history.history)\n","Drop2Norm2.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop2Norm2.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop2Norm2 Model\")"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1120030,"status":"ok","timestamp":1616501979303,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"},"user_tz":0},"id":"5nGcByR82SxZ","outputId":"4372c5f7-ba10-4ce8-8e4a-f83c0624c0ee"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.2934 - accuracy: 0.5339 - val_loss: 1.1615 - val_accuracy: 0.5885\n","Epoch 2/40\n","1563/1563 - 6s - loss: 0.9469 - accuracy: 0.6662 - val_loss: 0.9365 - val_accuracy: 0.6678\n","Epoch 3/40\n","1563/1563 - 6s - loss: 0.8042 - accuracy: 0.7173 - val_loss: 0.8550 - val_accuracy: 0.7135\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.7060 - accuracy: 0.7544 - val_loss: 0.7207 - val_accuracy: 0.7481\n","Epoch 5/40\n","1563/1563 - 7s - loss: 0.6396 - accuracy: 0.7761 - val_loss: 0.7176 - val_accuracy: 0.7541\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.5788 - accuracy: 0.7982 - val_loss: 0.7495 - val_accuracy: 0.7464\n","Epoch 7/40\n","1563/1563 - 7s - loss: 0.5346 - accuracy: 0.8123 - val_loss: 0.6976 - val_accuracy: 0.7618\n","Epoch 8/40\n","1563/1563 - 7s - loss: 0.4906 - accuracy: 0.8283 - val_loss: 0.6350 - val_accuracy: 0.7858\n","Epoch 9/40\n","1563/1563 - 7s - loss: 0.4533 - accuracy: 0.8426 - val_loss: 0.6259 - val_accuracy: 0.7834\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.4210 - accuracy: 0.8508 - val_loss: 0.5984 - val_accuracy: 0.7945\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.3886 - accuracy: 0.8655 - val_loss: 0.6373 - val_accuracy: 0.7847\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.3620 - accuracy: 0.8724 - val_loss: 0.6243 - val_accuracy: 0.7941\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.3344 - accuracy: 0.8805 - val_loss: 0.6318 - val_accuracy: 0.7936\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.3140 - accuracy: 0.8887 - val_loss: 0.6703 - val_accuracy: 0.7892\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.2924 - accuracy: 0.8960 - val_loss: 0.6789 - val_accuracy: 0.7782\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.2763 - accuracy: 0.9033 - val_loss: 0.6199 - val_accuracy: 0.8033\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.2549 - accuracy: 0.9103 - val_loss: 0.6932 - val_accuracy: 0.7889\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.2398 - accuracy: 0.9144 - val_loss: 0.6787 - val_accuracy: 0.7949\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.2244 - accuracy: 0.9204 - val_loss: 0.7128 - val_accuracy: 0.7972\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.2156 - accuracy: 0.9230 - val_loss: 0.6405 - val_accuracy: 0.8055\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.2035 - accuracy: 0.9282 - val_loss: 0.6870 - val_accuracy: 0.7992\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.1897 - accuracy: 0.9329 - val_loss: 0.6641 - val_accuracy: 0.8060\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.1809 - accuracy: 0.9367 - val_loss: 0.7095 - val_accuracy: 0.7973\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.1710 - accuracy: 0.9392 - val_loss: 0.7374 - val_accuracy: 0.7976\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.1614 - accuracy: 0.9423 - val_loss: 0.6618 - val_accuracy: 0.8072\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.1572 - accuracy: 0.9431 - val_loss: 0.6605 - val_accuracy: 0.8112\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.1554 - accuracy: 0.9444 - val_loss: 0.7710 - val_accuracy: 0.7950\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.1420 - accuracy: 0.9498 - val_loss: 0.6616 - val_accuracy: 0.8141\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.1343 - accuracy: 0.9527 - val_loss: 0.7356 - val_accuracy: 0.8045\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.1351 - accuracy: 0.9518 - val_loss: 0.7278 - val_accuracy: 0.8062\n","Epoch 31/40\n","1563/1563 - 7s - loss: 0.1299 - accuracy: 0.9542 - val_loss: 0.7186 - val_accuracy: 0.8075\n","Epoch 32/40\n","1563/1563 - 7s - loss: 0.1185 - accuracy: 0.9587 - val_loss: 0.7396 - val_accuracy: 0.8068\n","Epoch 33/40\n","1563/1563 - 7s - loss: 0.1211 - accuracy: 0.9585 - val_loss: 0.7623 - val_accuracy: 0.8071\n","Epoch 34/40\n","1563/1563 - 7s - loss: 0.1192 - accuracy: 0.9576 - val_loss: 0.7350 - val_accuracy: 0.8128\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.1126 - accuracy: 0.9601 - val_loss: 0.7623 - val_accuracy: 0.8053\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.1094 - accuracy: 0.9611 - val_loss: 0.7587 - val_accuracy: 0.8041\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.1053 - accuracy: 0.9636 - val_loss: 0.7307 - val_accuracy: 0.8144\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.1039 - accuracy: 0.9637 - val_loss: 0.7418 - val_accuracy: 0.8078\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.0992 - accuracy: 0.9640 - val_loss: 0.7640 - val_accuracy: 0.8129\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.1015 - accuracy: 0.9634 - val_loss: 0.7397 - val_accuracy: 0.8135\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop3Norm3 Model/assets\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{"tags":[]},"output_type":"display_data"}],"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Drop3Norm3=pd.DataFrame.from_dict(history.history)\n","Drop3Norm3.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop3Norm3.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop3Norm3 Model\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"1Dy2R6bX2fy3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 8s - loss: 1.3948 - accuracy: 0.4916 - val_loss: 1.4120 - val_accuracy: 0.5028\n","Epoch 2/40\n","1563/1563 - 7s - loss: 1.0495 - accuracy: 0.6255 - val_loss: 1.1802 - val_accuracy: 0.5834\n","Epoch 3/40\n","1563/1563 - 7s - loss: 0.9095 - accuracy: 0.6777 - val_loss: 1.1459 - val_accuracy: 0.6074\n","Epoch 4/40\n","1563/1563 - 7s - loss: 0.8143 - accuracy: 0.7115 - val_loss: 0.8778 - val_accuracy: 0.6911\n","Epoch 5/40\n","1563/1563 - 7s - loss: 0.7505 - accuracy: 0.7366 - val_loss: 0.8034 - val_accuracy: 0.7224\n","Epoch 6/40\n","1563/1563 - 7s - loss: 0.6874 - accuracy: 0.7601 - val_loss: 0.7267 - val_accuracy: 0.7470\n","Epoch 7/40\n","1563/1563 - 7s - loss: 0.6472 - accuracy: 0.7727 - val_loss: 0.7058 - val_accuracy: 0.7593\n","Epoch 8/40\n","1563/1563 - 7s - loss: 0.6076 - accuracy: 0.7891 - val_loss: 0.7109 - val_accuracy: 0.7576\n","Epoch 9/40\n","1563/1563 - 7s - loss: 0.5754 - accuracy: 0.7970 - val_loss: 0.6523 - val_accuracy: 0.7727\n","Epoch 10/40\n","1563/1563 - 7s - loss: 0.5423 - accuracy: 0.8105 - val_loss: 0.6207 - val_accuracy: 0.7831\n","Epoch 11/40\n","1563/1563 - 7s - loss: 0.5170 - accuracy: 0.8183 - val_loss: 0.6571 - val_accuracy: 0.7793\n","Epoch 12/40\n","1563/1563 - 7s - loss: 0.4906 - accuracy: 0.8277 - val_loss: 0.5950 - val_accuracy: 0.7957\n","Epoch 13/40\n","1563/1563 - 7s - loss: 0.4662 - accuracy: 0.8369 - val_loss: 0.6352 - val_accuracy: 0.7893\n","Epoch 14/40\n","1563/1563 - 7s - loss: 0.4453 - accuracy: 0.8434 - val_loss: 0.6710 - val_accuracy: 0.7813\n","Epoch 15/40\n","1563/1563 - 7s - loss: 0.4263 - accuracy: 0.8511 - val_loss: 0.5949 - val_accuracy: 0.8039\n","Epoch 16/40\n","1563/1563 - 7s - loss: 0.4069 - accuracy: 0.8566 - val_loss: 0.6294 - val_accuracy: 0.7977\n","Epoch 17/40\n","1563/1563 - 7s - loss: 0.3842 - accuracy: 0.8668 - val_loss: 0.5700 - val_accuracy: 0.8116\n","Epoch 18/40\n","1563/1563 - 7s - loss: 0.3705 - accuracy: 0.8706 - val_loss: 0.6246 - val_accuracy: 0.8007\n","Epoch 19/40\n","1563/1563 - 7s - loss: 0.3485 - accuracy: 0.8765 - val_loss: 0.6588 - val_accuracy: 0.7952\n","Epoch 20/40\n","1563/1563 - 7s - loss: 0.3346 - accuracy: 0.8809 - val_loss: 0.5643 - val_accuracy: 0.8180\n","Epoch 21/40\n","1563/1563 - 7s - loss: 0.3217 - accuracy: 0.8859 - val_loss: 0.5831 - val_accuracy: 0.8190\n","Epoch 22/40\n","1563/1563 - 7s - loss: 0.3091 - accuracy: 0.8910 - val_loss: 0.5819 - val_accuracy: 0.8196\n","Epoch 23/40\n","1563/1563 - 7s - loss: 0.2908 - accuracy: 0.8979 - val_loss: 0.5806 - val_accuracy: 0.8179\n","Epoch 24/40\n","1563/1563 - 7s - loss: 0.2772 - accuracy: 0.9020 - val_loss: 0.6222 - val_accuracy: 0.8129\n","Epoch 25/40\n","1563/1563 - 7s - loss: 0.2700 - accuracy: 0.9044 - val_loss: 0.6108 - val_accuracy: 0.8158\n","Epoch 26/40\n","1563/1563 - 7s - loss: 0.2553 - accuracy: 0.9083 - val_loss: 0.6434 - val_accuracy: 0.8075\n","Epoch 27/40\n","1563/1563 - 7s - loss: 0.2442 - accuracy: 0.9145 - val_loss: 0.6136 - val_accuracy: 0.8173\n","Epoch 28/40\n","1563/1563 - 7s - loss: 0.2333 - accuracy: 0.9174 - val_loss: 0.6635 - val_accuracy: 0.8082\n","Epoch 29/40\n","1563/1563 - 7s - loss: 0.2249 - accuracy: 0.9199 - val_loss: 0.6212 - val_accuracy: 0.8194\n","Epoch 30/40\n","1563/1563 - 7s - loss: 0.2145 - accuracy: 0.9235 - val_loss: 0.6796 - val_accuracy: 0.8060\n","Epoch 31/40\n","1563/1563 - 7s - loss: 0.2092 - accuracy: 0.9248 - val_loss: 0.6934 - val_accuracy: 0.8090\n","Epoch 32/40\n","1563/1563 - 7s - loss: 0.1985 - accuracy: 0.9284 - val_loss: 0.6215 - val_accuracy: 0.8264\n","Epoch 33/40\n","1563/1563 - 7s - loss: 0.1936 - accuracy: 0.9308 - val_loss: 0.6192 - val_accuracy: 0.8267\n","Epoch 34/40\n","1563/1563 - 7s - loss: 0.1804 - accuracy: 0.9360 - val_loss: 0.6832 - val_accuracy: 0.8157\n","Epoch 35/40\n","1563/1563 - 7s - loss: 0.1809 - accuracy: 0.9350 - val_loss: 0.6402 - val_accuracy: 0.8234\n","Epoch 36/40\n","1563/1563 - 7s - loss: 0.1699 - accuracy: 0.9407 - val_loss: 0.6679 - val_accuracy: 0.8236\n","Epoch 37/40\n","1563/1563 - 7s - loss: 0.1606 - accuracy: 0.9423 - val_loss: 0.7342 - val_accuracy: 0.8122\n","Epoch 38/40\n","1563/1563 - 7s - loss: 0.1615 - accuracy: 0.9422 - val_loss: 0.7188 - val_accuracy: 0.8092\n","Epoch 39/40\n","1563/1563 - 7s - loss: 0.1562 - accuracy: 0.9438 - val_loss: 0.7172 - val_accuracy: 0.8197\n","Epoch 40/40\n","1563/1563 - 7s - loss: 0.1452 - accuracy: 0.9493 - val_loss: 0.7333 - val_accuracy: 0.8192\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop12Norm12 Model/assets\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Drop12Norm12=pd.DataFrame.from_dict(history.history)\n","Drop12Norm12.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop12Norm12.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop12Norm12 Model\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"Wapo_o5E2nIT"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 8s - loss: 1.3329 - accuracy: 0.5183 - val_loss: 1.1217 - val_accuracy: 0.5957\n","Epoch 2/40\n","1563/1563 - 7s - loss: 1.0070 - accuracy: 0.6441 - val_loss: 0.9612 - val_accuracy: 0.6593\n","Epoch 3/40\n","1563/1563 - 7s - loss: 0.8737 - accuracy: 0.6944 - val_loss: 0.8169 - val_accuracy: 0.7178\n","Epoch 4/40\n","1563/1563 - 7s - loss: 0.7867 - accuracy: 0.7237 - val_loss: 0.7901 - val_accuracy: 0.7250\n","Epoch 5/40\n","1563/1563 - 7s - loss: 0.7234 - accuracy: 0.7469 - val_loss: 0.7119 - val_accuracy: 0.7540\n","Epoch 6/40\n","1563/1563 - 7s - loss: 0.6770 - accuracy: 0.7639 - val_loss: 0.6973 - val_accuracy: 0.7611\n","Epoch 7/40\n","1563/1563 - 7s - loss: 0.6327 - accuracy: 0.7797 - val_loss: 0.6630 - val_accuracy: 0.7716\n","Epoch 8/40\n","1563/1563 - 7s - loss: 0.5985 - accuracy: 0.7901 - val_loss: 0.6441 - val_accuracy: 0.7796\n","Epoch 9/40\n","1563/1563 - 7s - loss: 0.5677 - accuracy: 0.8031 - val_loss: 0.6019 - val_accuracy: 0.7917\n","Epoch 10/40\n","1563/1563 - 7s - loss: 0.5379 - accuracy: 0.8125 - val_loss: 0.6652 - val_accuracy: 0.7741\n","Epoch 11/40\n","1563/1563 - 7s - loss: 0.5159 - accuracy: 0.8208 - val_loss: 0.5834 - val_accuracy: 0.7989\n","Epoch 12/40\n","1563/1563 - 7s - loss: 0.4991 - accuracy: 0.8232 - val_loss: 0.6304 - val_accuracy: 0.7937\n","Epoch 13/40\n","1563/1563 - 7s - loss: 0.4766 - accuracy: 0.8331 - val_loss: 0.6008 - val_accuracy: 0.7974\n","Epoch 14/40\n","1563/1563 - 7s - loss: 0.4570 - accuracy: 0.8412 - val_loss: 0.6028 - val_accuracy: 0.7967\n","Epoch 15/40\n","1563/1563 - 7s - loss: 0.4353 - accuracy: 0.8457 - val_loss: 0.5954 - val_accuracy: 0.8066\n","Epoch 16/40\n","1563/1563 - 7s - loss: 0.4265 - accuracy: 0.8499 - val_loss: 0.5574 - val_accuracy: 0.8122\n","Epoch 17/40\n","1563/1563 - 7s - loss: 0.4123 - accuracy: 0.8550 - val_loss: 0.5624 - val_accuracy: 0.8151\n","Epoch 18/40\n","1563/1563 - 7s - loss: 0.3985 - accuracy: 0.8594 - val_loss: 0.6034 - val_accuracy: 0.8028\n","Epoch 19/40\n","1563/1563 - 7s - loss: 0.3814 - accuracy: 0.8653 - val_loss: 0.5404 - val_accuracy: 0.8187\n","Epoch 20/40\n","1563/1563 - 7s - loss: 0.3748 - accuracy: 0.8662 - val_loss: 0.6164 - val_accuracy: 0.8027\n","Epoch 21/40\n","1563/1563 - 7s - loss: 0.3613 - accuracy: 0.8740 - val_loss: 0.5553 - val_accuracy: 0.8171\n","Epoch 22/40\n","1563/1563 - 7s - loss: 0.3509 - accuracy: 0.8760 - val_loss: 0.5552 - val_accuracy: 0.8146\n","Epoch 23/40\n","1563/1563 - 7s - loss: 0.3404 - accuracy: 0.8782 - val_loss: 0.5931 - val_accuracy: 0.8117\n","Epoch 24/40\n","1563/1563 - 7s - loss: 0.3310 - accuracy: 0.8847 - val_loss: 0.5537 - val_accuracy: 0.8188\n","Epoch 25/40\n","1563/1563 - 7s - loss: 0.3207 - accuracy: 0.8869 - val_loss: 0.5733 - val_accuracy: 0.8212\n","Epoch 26/40\n","1563/1563 - 7s - loss: 0.3125 - accuracy: 0.8907 - val_loss: 0.5496 - val_accuracy: 0.8255\n","Epoch 27/40\n","1563/1563 - 7s - loss: 0.3072 - accuracy: 0.8903 - val_loss: 0.5573 - val_accuracy: 0.8282\n","Epoch 28/40\n","1563/1563 - 7s - loss: 0.2958 - accuracy: 0.8939 - val_loss: 0.5576 - val_accuracy: 0.8265\n","Epoch 29/40\n","1563/1563 - 7s - loss: 0.2896 - accuracy: 0.8962 - val_loss: 0.5687 - val_accuracy: 0.8217\n","Epoch 30/40\n","1563/1563 - 7s - loss: 0.2808 - accuracy: 0.8996 - val_loss: 0.5742 - val_accuracy: 0.8237\n","Epoch 31/40\n","1563/1563 - 7s - loss: 0.2741 - accuracy: 0.9024 - val_loss: 0.5720 - val_accuracy: 0.8240\n","Epoch 32/40\n","1563/1563 - 7s - loss: 0.2693 - accuracy: 0.9034 - val_loss: 0.5746 - val_accuracy: 0.8277\n","Epoch 33/40\n","1563/1563 - 7s - loss: 0.2644 - accuracy: 0.9048 - val_loss: 0.5776 - val_accuracy: 0.8253\n","Epoch 34/40\n","1563/1563 - 7s - loss: 0.2583 - accuracy: 0.9082 - val_loss: 0.5596 - val_accuracy: 0.8298\n","Epoch 35/40\n","1563/1563 - 7s - loss: 0.2551 - accuracy: 0.9089 - val_loss: 0.5662 - val_accuracy: 0.8288\n","Epoch 36/40\n","1563/1563 - 7s - loss: 0.2497 - accuracy: 0.9097 - val_loss: 0.5811 - val_accuracy: 0.8242\n","Epoch 37/40\n","1563/1563 - 7s - loss: 0.2481 - accuracy: 0.9105 - val_loss: 0.5884 - val_accuracy: 0.8248\n","Epoch 38/40\n","1563/1563 - 7s - loss: 0.2370 - accuracy: 0.9160 - val_loss: 0.5930 - val_accuracy: 0.8254\n","Epoch 39/40\n","1563/1563 - 7s - loss: 0.2356 - accuracy: 0.9152 - val_loss: 0.5901 - val_accuracy: 0.8301\n","Epoch 40/40\n","1563/1563 - 7s - loss: 0.2320 - accuracy: 0.9171 - val_loss: 0.6096 - val_accuracy: 0.8264\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop23Norm23 Model/assets\n"]},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 432x288 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Drop23Norm23=pd.DataFrame.from_dict(history.history)\n","Drop23Norm23.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop23Norm23.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop23Norm23 Model\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5WtorQV08Jb-"},"outputs":[],"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(BatchNormalization())\n","model.add(Dropout(0.3))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Drop13Norm13=pd.DataFrame.from_dict(history.history)\n","Drop13Norm13.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop13Norm13.csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Drop13Norm13 Model\")"]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"name":"Batch \u0026 Dropout DataAugmentation","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"toc_visible":true,"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}