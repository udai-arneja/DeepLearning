{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Dropout","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1617051076234,"user_tz":-60,"elapsed":2493,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gitw9wgt1tkpkaA0M2DceBy82OW_PzJmQl0xko6PMI=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1617051092736,"user_tz":-60,"elapsed":18971,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gitw9wgt1tkpkaA0M2DceBy82OW_PzJmQl0xko6PMI=s64","userId":"09880777762577870649"}},"outputId":"f31373e1-717f-4fff-e2fc-0de3fde4d131"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," Content.ipynb\t\t\t   Graphs      'Part Three'\n","'Copy of Copy of Dropout Graphs'  'Part Four'  'Part Two'\n"," DataAugmentationStrats.png\t  'Part One'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","\n","* Without using any data augmentation, analyze the effect of using Dropout in the model. Carry out the same analysis for Batch Normalization. Finally, combine both. Report in the same table as in the data augmentation task the best validation accuracy for each of the three settings (baseline + Dropout, baseline + Batch Normalization, baseline + Batch Normalization + Dropout). The performance will vary depending on where the Dropout layers and Batch Normalization layers, so state clearly where you added the layers, and what rate you used for the Dropout layers. Discuss the results.\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617051280256,"user_tz":-60,"elapsed":6087,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gitw9wgt1tkpkaA0M2DceBy82OW_PzJmQl0xko6PMI=s64","userId":"09880777762577870649"}},"outputId":"d7392f69-4954-402e-b547-09c06e6614ff"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# # to not performing any augmentation)\n","# data_augmentation = keras.Sequential(\n","#     [\n","#         preprocessing.RandomZoom(0)\n","#     ]\n","# )\n","# # We will use glorot_uniform as a initialization by default\n","# initialization = 'glorot_uniform'\n","# # Use the architecture given below, only modify it to add Dropout/BatchNorm\n","# model = Sequential()\n","# model.add(data_augmentation)\n","# model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","# model.add(Activation('relu'))\n","# model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","# model.add(Dropout(0.6))\n","# model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","# model.add(Activation('relu'))\n","# model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","# model.add(Dropout(0.6))\n","# model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","# model.add(Activation('relu'))\n","# model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","# model.add(Dropout(0.6))\n","# model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","# model.add(Activation('relu'))\n","# # As we use global average pooling, we don't need to use Flatten\n","# model.add(GlobalAveragePooling2D())\n","# model.add(Dense(10, kernel_initializer=initialization))\n","# model.add(Activation('softmax'))\n","\n","\n","# Y_train_class = np_utils.to_categorical(y_train, 10)\n","# Y_test_class = np_utils.to_categorical(y_test, 10)\n","# # By default use Adam with lr=3e-4. Change it to SGD when asked to\n","# opt = Adam(lr=3e-4)\n","# model.compile(loss='categorical_crossentropy',\n","#               optimizer=opt,\n","#               metrics=['accuracy'])\n","# # Use 40 epochs as default value to plot your curves\n","# history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","# plot_history(history)\n","\n","# Batch123Norm=pd.DataFrame.from_dict(history.history)\n","# Batch123Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/d6.csv')\n","\n","# model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/d6 Model\")"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 2s 0us/step\n","Image shape: (32, 32, 3)\n","Total number of training samples: 50000\n","Total number of validation samples: 10000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8w0kMlkZsrOT","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1616499464430,"user_tz":0,"elapsed":229345,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"d12beec3-6b92-4bb8-f05c-36bcb850f523"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.6))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Batch1Norm=pd.DataFrame.from_dict(history.history)\n","Batch1Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch1Norm().csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch1Norm() Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.5963 - accuracy: 0.4191 - val_loss: 1.3318 - val_accuracy: 0.5175\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.2252 - accuracy: 0.5639 - val_loss: 1.0792 - val_accuracy: 0.6259\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.0697 - accuracy: 0.6209 - val_loss: 1.0250 - val_accuracy: 0.6389\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.9590 - accuracy: 0.6622 - val_loss: 0.9511 - val_accuracy: 0.6619\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.8824 - accuracy: 0.6911 - val_loss: 0.8930 - val_accuracy: 0.6847\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.8157 - accuracy: 0.7144 - val_loss: 0.8287 - val_accuracy: 0.7020\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.7633 - accuracy: 0.7324 - val_loss: 0.7695 - val_accuracy: 0.7274\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.7109 - accuracy: 0.7501 - val_loss: 0.7945 - val_accuracy: 0.7201\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.6649 - accuracy: 0.7665 - val_loss: 0.7715 - val_accuracy: 0.7279\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.6233 - accuracy: 0.7818 - val_loss: 0.7090 - val_accuracy: 0.7525\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.5839 - accuracy: 0.7953 - val_loss: 0.7062 - val_accuracy: 0.7525\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.5510 - accuracy: 0.8060 - val_loss: 0.6817 - val_accuracy: 0.7680\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.5185 - accuracy: 0.8172 - val_loss: 0.6757 - val_accuracy: 0.7678\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.4868 - accuracy: 0.8305 - val_loss: 0.6669 - val_accuracy: 0.7746\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.4500 - accuracy: 0.8422 - val_loss: 0.6480 - val_accuracy: 0.7739\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.4250 - accuracy: 0.8514 - val_loss: 0.6749 - val_accuracy: 0.7770\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.3962 - accuracy: 0.8628 - val_loss: 0.6537 - val_accuracy: 0.7855\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.3697 - accuracy: 0.8682 - val_loss: 0.6536 - val_accuracy: 0.7850\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.3408 - accuracy: 0.8824 - val_loss: 0.6767 - val_accuracy: 0.7852\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.3218 - accuracy: 0.8857 - val_loss: 0.7281 - val_accuracy: 0.7771\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.2947 - accuracy: 0.8974 - val_loss: 0.6755 - val_accuracy: 0.7911\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.2737 - accuracy: 0.9046 - val_loss: 0.6926 - val_accuracy: 0.7816\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.2500 - accuracy: 0.9119 - val_loss: 0.6800 - val_accuracy: 0.7945\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.2360 - accuracy: 0.9154 - val_loss: 0.7193 - val_accuracy: 0.7881\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.2123 - accuracy: 0.9254 - val_loss: 0.7176 - val_accuracy: 0.7909\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.1948 - accuracy: 0.9318 - val_loss: 0.7289 - val_accuracy: 0.7891\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.1789 - accuracy: 0.9373 - val_loss: 0.7579 - val_accuracy: 0.7909\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.1660 - accuracy: 0.9423 - val_loss: 0.8025 - val_accuracy: 0.7863\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.1547 - accuracy: 0.9450 - val_loss: 0.8193 - val_accuracy: 0.7903\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.1431 - accuracy: 0.9494 - val_loss: 0.8092 - val_accuracy: 0.7932\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.1326 - accuracy: 0.9529 - val_loss: 0.8275 - val_accuracy: 0.7924\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.1228 - accuracy: 0.9565 - val_loss: 0.8902 - val_accuracy: 0.7836\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.1118 - accuracy: 0.9611 - val_loss: 0.8973 - val_accuracy: 0.7873\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.1103 - accuracy: 0.9617 - val_loss: 0.9219 - val_accuracy: 0.7841\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.0995 - accuracy: 0.9650 - val_loss: 0.9218 - val_accuracy: 0.7853\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.0976 - accuracy: 0.9652 - val_loss: 0.9425 - val_accuracy: 0.7882\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.0890 - accuracy: 0.9692 - val_loss: 0.9601 - val_accuracy: 0.7870\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.0876 - accuracy: 0.9691 - val_loss: 1.0226 - val_accuracy: 0.7784\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.0810 - accuracy: 0.9721 - val_loss: 0.9770 - val_accuracy: 0.7858\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.0771 - accuracy: 0.9735 - val_loss: 0.9997 - val_accuracy: 0.7879\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch1Norm() Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"7lFPBdNa2MTs","executionInfo":{"status":"ok","timestamp":1616499694161,"user_tz":0,"elapsed":229724,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"3aa5fead-57a0-478f-a5f8-b59a3d40953a"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Batch2Norm=pd.DataFrame.from_dict(history.history)\n","Batch2Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch2Norm().csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch2Norm() Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 6s - loss: 1.5958 - accuracy: 0.4161 - val_loss: 1.3188 - val_accuracy: 0.5263\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.2302 - accuracy: 0.5615 - val_loss: 1.1326 - val_accuracy: 0.5994\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.0714 - accuracy: 0.6213 - val_loss: 0.9776 - val_accuracy: 0.6608\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.9635 - accuracy: 0.6617 - val_loss: 0.9272 - val_accuracy: 0.6724\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.8849 - accuracy: 0.6896 - val_loss: 0.8700 - val_accuracy: 0.6996\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.8166 - accuracy: 0.7118 - val_loss: 0.7909 - val_accuracy: 0.7190\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.7570 - accuracy: 0.7359 - val_loss: 0.7575 - val_accuracy: 0.7355\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.7073 - accuracy: 0.7522 - val_loss: 0.7206 - val_accuracy: 0.7476\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.6657 - accuracy: 0.7692 - val_loss: 0.7409 - val_accuracy: 0.7445\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.6234 - accuracy: 0.7842 - val_loss: 0.6859 - val_accuracy: 0.7617\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.5950 - accuracy: 0.7938 - val_loss: 0.6793 - val_accuracy: 0.7604\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.5635 - accuracy: 0.8033 - val_loss: 0.6561 - val_accuracy: 0.7750\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.5304 - accuracy: 0.8139 - val_loss: 0.6370 - val_accuracy: 0.7829\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.5057 - accuracy: 0.8233 - val_loss: 0.5955 - val_accuracy: 0.7961\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.4788 - accuracy: 0.8322 - val_loss: 0.6024 - val_accuracy: 0.7894\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.4554 - accuracy: 0.8406 - val_loss: 0.6049 - val_accuracy: 0.7919\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.4324 - accuracy: 0.8477 - val_loss: 0.5740 - val_accuracy: 0.8040\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.4115 - accuracy: 0.8578 - val_loss: 0.6071 - val_accuracy: 0.7918\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.3877 - accuracy: 0.8639 - val_loss: 0.6000 - val_accuracy: 0.8020\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.3713 - accuracy: 0.8694 - val_loss: 0.5763 - val_accuracy: 0.8054\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.3535 - accuracy: 0.8767 - val_loss: 0.5726 - val_accuracy: 0.8077\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.3337 - accuracy: 0.8832 - val_loss: 0.5838 - val_accuracy: 0.8105\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.3180 - accuracy: 0.8892 - val_loss: 0.6126 - val_accuracy: 0.7990\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.3034 - accuracy: 0.8938 - val_loss: 0.5893 - val_accuracy: 0.8100\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.2889 - accuracy: 0.8973 - val_loss: 0.5935 - val_accuracy: 0.8099\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.2738 - accuracy: 0.9043 - val_loss: 0.5847 - val_accuracy: 0.8158\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.2559 - accuracy: 0.9094 - val_loss: 0.6380 - val_accuracy: 0.8046\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.2439 - accuracy: 0.9137 - val_loss: 0.6506 - val_accuracy: 0.8027\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.2296 - accuracy: 0.9181 - val_loss: 0.6008 - val_accuracy: 0.8145\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.2226 - accuracy: 0.9218 - val_loss: 0.6538 - val_accuracy: 0.8050\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.2057 - accuracy: 0.9274 - val_loss: 0.6263 - val_accuracy: 0.8108\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.1946 - accuracy: 0.9304 - val_loss: 0.6349 - val_accuracy: 0.8168\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.1891 - accuracy: 0.9340 - val_loss: 0.6354 - val_accuracy: 0.8121\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.1803 - accuracy: 0.9362 - val_loss: 0.6842 - val_accuracy: 0.8112\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.1667 - accuracy: 0.9415 - val_loss: 0.6692 - val_accuracy: 0.8142\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.1577 - accuracy: 0.9435 - val_loss: 0.7324 - val_accuracy: 0.8078\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.1541 - accuracy: 0.9461 - val_loss: 0.7157 - val_accuracy: 0.8067\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.1455 - accuracy: 0.9482 - val_loss: 0.6838 - val_accuracy: 0.8122\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.1352 - accuracy: 0.9525 - val_loss: 0.7320 - val_accuracy: 0.8121\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.1307 - accuracy: 0.9534 - val_loss: 0.7492 - val_accuracy: 0.8096\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch2Norm() Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"5nGcByR82SxZ","executionInfo":{"status":"ok","timestamp":1616499923711,"user_tz":0,"elapsed":229546,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"dc444a24-43c5-4669-effe-58ae8783994e"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Batch3Norm=pd.DataFrame.from_dict(history.history)\n","Batch3Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch3Norm().csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch3Norm() Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.5836 - accuracy: 0.4190 - val_loss: 1.3325 - val_accuracy: 0.5207\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.2284 - accuracy: 0.5582 - val_loss: 1.1405 - val_accuracy: 0.5935\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.0647 - accuracy: 0.6204 - val_loss: 1.0125 - val_accuracy: 0.6424\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.9546 - accuracy: 0.6632 - val_loss: 0.9187 - val_accuracy: 0.6792\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.8786 - accuracy: 0.6893 - val_loss: 0.8824 - val_accuracy: 0.6852\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.8111 - accuracy: 0.7166 - val_loss: 0.8189 - val_accuracy: 0.7086\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.7556 - accuracy: 0.7353 - val_loss: 0.7728 - val_accuracy: 0.7310\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.7097 - accuracy: 0.7522 - val_loss: 0.7723 - val_accuracy: 0.7286\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.6660 - accuracy: 0.7679 - val_loss: 0.7231 - val_accuracy: 0.7459\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.6313 - accuracy: 0.7790 - val_loss: 0.6813 - val_accuracy: 0.7646\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.5945 - accuracy: 0.7936 - val_loss: 0.6644 - val_accuracy: 0.7708\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.5618 - accuracy: 0.8050 - val_loss: 0.6550 - val_accuracy: 0.7727\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.5368 - accuracy: 0.8115 - val_loss: 0.6360 - val_accuracy: 0.7802\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.5112 - accuracy: 0.8211 - val_loss: 0.6341 - val_accuracy: 0.7782\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.4822 - accuracy: 0.8310 - val_loss: 0.6397 - val_accuracy: 0.7796\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.4624 - accuracy: 0.8383 - val_loss: 0.6262 - val_accuracy: 0.7836\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.4376 - accuracy: 0.8473 - val_loss: 0.6273 - val_accuracy: 0.7843\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.4176 - accuracy: 0.8551 - val_loss: 0.5923 - val_accuracy: 0.8014\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.4012 - accuracy: 0.8590 - val_loss: 0.5871 - val_accuracy: 0.7958\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.3769 - accuracy: 0.8668 - val_loss: 0.6345 - val_accuracy: 0.7872\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.3599 - accuracy: 0.8727 - val_loss: 0.6088 - val_accuracy: 0.7962\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.3414 - accuracy: 0.8792 - val_loss: 0.6026 - val_accuracy: 0.8031\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.3239 - accuracy: 0.8861 - val_loss: 0.5943 - val_accuracy: 0.8047\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.3096 - accuracy: 0.8903 - val_loss: 0.6034 - val_accuracy: 0.8020\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.2934 - accuracy: 0.8957 - val_loss: 0.5808 - val_accuracy: 0.8101\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.2780 - accuracy: 0.9012 - val_loss: 0.6141 - val_accuracy: 0.8063\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.2682 - accuracy: 0.9041 - val_loss: 0.6053 - val_accuracy: 0.8032\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.2510 - accuracy: 0.9114 - val_loss: 0.6099 - val_accuracy: 0.8043\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.2402 - accuracy: 0.9150 - val_loss: 0.6228 - val_accuracy: 0.8055\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.2304 - accuracy: 0.9185 - val_loss: 0.6451 - val_accuracy: 0.7984\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.2175 - accuracy: 0.9227 - val_loss: 0.6193 - val_accuracy: 0.8132\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.2092 - accuracy: 0.9253 - val_loss: 0.6228 - val_accuracy: 0.8097\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.1984 - accuracy: 0.9297 - val_loss: 0.6444 - val_accuracy: 0.8091\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.1883 - accuracy: 0.9334 - val_loss: 0.6378 - val_accuracy: 0.8128\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.1809 - accuracy: 0.9354 - val_loss: 0.6259 - val_accuracy: 0.8159\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.1727 - accuracy: 0.9380 - val_loss: 0.6540 - val_accuracy: 0.8074\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.1653 - accuracy: 0.9416 - val_loss: 0.6878 - val_accuracy: 0.8066\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.1586 - accuracy: 0.9432 - val_loss: 0.6769 - val_accuracy: 0.8067\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.1542 - accuracy: 0.9455 - val_loss: 0.6539 - val_accuracy: 0.8145\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.1492 - accuracy: 0.9474 - val_loss: 0.6939 - val_accuracy: 0.8112\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch3Norm() Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"1Dy2R6bX2fy3","executionInfo":{"status":"ok","timestamp":1616500157432,"user_tz":0,"elapsed":232837,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"c872569c-256b-4a04-f41d-e57d143c3883"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.3))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Batch12Norm=pd.DataFrame.from_dict(history.history)\n","Batch12Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch12Norm().csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch12Norm() Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.6224 - accuracy: 0.4024 - val_loss: 1.3675 - val_accuracy: 0.5079\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.2785 - accuracy: 0.5389 - val_loss: 1.1670 - val_accuracy: 0.5849\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.1320 - accuracy: 0.5992 - val_loss: 1.0319 - val_accuracy: 0.6347\n","Epoch 4/40\n","1563/1563 - 6s - loss: 1.0376 - accuracy: 0.6359 - val_loss: 0.9763 - val_accuracy: 0.6562\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.9627 - accuracy: 0.6630 - val_loss: 0.9068 - val_accuracy: 0.6796\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.9003 - accuracy: 0.6840 - val_loss: 0.8405 - val_accuracy: 0.7065\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.8447 - accuracy: 0.7063 - val_loss: 0.8064 - val_accuracy: 0.7230\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.7992 - accuracy: 0.7185 - val_loss: 0.7852 - val_accuracy: 0.7297\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.7534 - accuracy: 0.7374 - val_loss: 0.7797 - val_accuracy: 0.7254\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.7184 - accuracy: 0.7494 - val_loss: 0.7347 - val_accuracy: 0.7463\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.6808 - accuracy: 0.7605 - val_loss: 0.6808 - val_accuracy: 0.7689\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.6470 - accuracy: 0.7704 - val_loss: 0.6697 - val_accuracy: 0.7689\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.6219 - accuracy: 0.7828 - val_loss: 0.6848 - val_accuracy: 0.7621\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.5918 - accuracy: 0.7945 - val_loss: 0.6550 - val_accuracy: 0.7735\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.5702 - accuracy: 0.8024 - val_loss: 0.6510 - val_accuracy: 0.7773\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.5437 - accuracy: 0.8087 - val_loss: 0.6304 - val_accuracy: 0.7833\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.5265 - accuracy: 0.8154 - val_loss: 0.6309 - val_accuracy: 0.7850\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.5028 - accuracy: 0.8238 - val_loss: 0.6543 - val_accuracy: 0.7780\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.4837 - accuracy: 0.8302 - val_loss: 0.6197 - val_accuracy: 0.7926\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.4662 - accuracy: 0.8381 - val_loss: 0.6457 - val_accuracy: 0.7811\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.4474 - accuracy: 0.8424 - val_loss: 0.6156 - val_accuracy: 0.7933\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.4275 - accuracy: 0.8498 - val_loss: 0.6163 - val_accuracy: 0.7948\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.4132 - accuracy: 0.8539 - val_loss: 0.6464 - val_accuracy: 0.7901\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.3984 - accuracy: 0.8605 - val_loss: 0.6003 - val_accuracy: 0.7985\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.3874 - accuracy: 0.8633 - val_loss: 0.6158 - val_accuracy: 0.7957\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.3662 - accuracy: 0.8710 - val_loss: 0.6164 - val_accuracy: 0.7965\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.3556 - accuracy: 0.8750 - val_loss: 0.6148 - val_accuracy: 0.8036\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.3395 - accuracy: 0.8786 - val_loss: 0.6057 - val_accuracy: 0.8065\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.3255 - accuracy: 0.8848 - val_loss: 0.6246 - val_accuracy: 0.8016\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.3099 - accuracy: 0.8915 - val_loss: 0.6271 - val_accuracy: 0.8048\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.3045 - accuracy: 0.8914 - val_loss: 0.6401 - val_accuracy: 0.8038\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.2893 - accuracy: 0.8982 - val_loss: 0.6381 - val_accuracy: 0.8043\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.2801 - accuracy: 0.9011 - val_loss: 0.6353 - val_accuracy: 0.8075\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.2726 - accuracy: 0.9018 - val_loss: 0.6387 - val_accuracy: 0.8052\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.2574 - accuracy: 0.9078 - val_loss: 0.6649 - val_accuracy: 0.8021\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.2491 - accuracy: 0.9111 - val_loss: 0.6608 - val_accuracy: 0.8040\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.2379 - accuracy: 0.9151 - val_loss: 0.6652 - val_accuracy: 0.8034\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.2339 - accuracy: 0.9155 - val_loss: 0.6647 - val_accuracy: 0.8057\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.2211 - accuracy: 0.9213 - val_loss: 0.6998 - val_accuracy: 0.8003\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.2137 - accuracy: 0.9232 - val_loss: 0.6900 - val_accuracy: 0.8035\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch12Norm() Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Wapo_o5E2nIT","executionInfo":{"status":"ok","timestamp":1617051543269,"user_tz":-60,"elapsed":262999,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gitw9wgt1tkpkaA0M2DceBy82OW_PzJmQl0xko6PMI=s64","userId":"09880777762577870649"}},"outputId":"df018c33-8b14-4ab3-914f-cba85161badb"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.6))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.6))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Batch23Norm=pd.DataFrame.from_dict(history.history)\n","Batch23Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/d0.6_2_3.csv')\n","\n","# model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Batch23Norm() Model\")"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 23s - loss: 1.6861 - accuracy: 0.3755 - val_loss: 1.4563 - val_accuracy: 0.4914\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.3780 - accuracy: 0.4992 - val_loss: 1.2448 - val_accuracy: 0.5738\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.2476 - accuracy: 0.5513 - val_loss: 1.1746 - val_accuracy: 0.6002\n","Epoch 4/40\n","1563/1563 - 6s - loss: 1.1636 - accuracy: 0.5830 - val_loss: 1.0448 - val_accuracy: 0.6334\n","Epoch 5/40\n","1563/1563 - 6s - loss: 1.0998 - accuracy: 0.6101 - val_loss: 1.0119 - val_accuracy: 0.6543\n","Epoch 6/40\n","1563/1563 - 6s - loss: 1.0523 - accuracy: 0.6255 - val_loss: 0.9592 - val_accuracy: 0.6698\n","Epoch 7/40\n","1563/1563 - 6s - loss: 1.0162 - accuracy: 0.6399 - val_loss: 0.9343 - val_accuracy: 0.6774\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.9813 - accuracy: 0.6502 - val_loss: 0.8954 - val_accuracy: 0.6966\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.9547 - accuracy: 0.6600 - val_loss: 0.8751 - val_accuracy: 0.7057\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.9200 - accuracy: 0.6753 - val_loss: 0.8430 - val_accuracy: 0.7140\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.9021 - accuracy: 0.6807 - val_loss: 0.8092 - val_accuracy: 0.7244\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.8808 - accuracy: 0.6899 - val_loss: 0.7936 - val_accuracy: 0.7367\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.8670 - accuracy: 0.6961 - val_loss: 0.7768 - val_accuracy: 0.7436\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.8446 - accuracy: 0.7013 - val_loss: 0.7445 - val_accuracy: 0.7473\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.8287 - accuracy: 0.7082 - val_loss: 0.7576 - val_accuracy: 0.7448\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.8170 - accuracy: 0.7107 - val_loss: 0.7368 - val_accuracy: 0.7512\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.8000 - accuracy: 0.7173 - val_loss: 0.7281 - val_accuracy: 0.7559\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.7890 - accuracy: 0.7224 - val_loss: 0.7137 - val_accuracy: 0.7605\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.7792 - accuracy: 0.7249 - val_loss: 0.7027 - val_accuracy: 0.7675\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.7630 - accuracy: 0.7328 - val_loss: 0.6831 - val_accuracy: 0.7668\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.7521 - accuracy: 0.7366 - val_loss: 0.6692 - val_accuracy: 0.7755\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.7464 - accuracy: 0.7368 - val_loss: 0.6871 - val_accuracy: 0.7737\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.7373 - accuracy: 0.7405 - val_loss: 0.6569 - val_accuracy: 0.7794\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.7286 - accuracy: 0.7425 - val_loss: 0.6566 - val_accuracy: 0.7822\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.7207 - accuracy: 0.7451 - val_loss: 0.6504 - val_accuracy: 0.7777\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.7184 - accuracy: 0.7474 - val_loss: 0.6385 - val_accuracy: 0.7921\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.7055 - accuracy: 0.7515 - val_loss: 0.6382 - val_accuracy: 0.7885\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.6981 - accuracy: 0.7517 - val_loss: 0.6277 - val_accuracy: 0.7889\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.6941 - accuracy: 0.7569 - val_loss: 0.6228 - val_accuracy: 0.7916\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.6850 - accuracy: 0.7591 - val_loss: 0.6186 - val_accuracy: 0.7915\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.6787 - accuracy: 0.7592 - val_loss: 0.6074 - val_accuracy: 0.8001\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.6713 - accuracy: 0.7645 - val_loss: 0.6246 - val_accuracy: 0.7929\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.6648 - accuracy: 0.7669 - val_loss: 0.6001 - val_accuracy: 0.8053\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.6625 - accuracy: 0.7662 - val_loss: 0.5919 - val_accuracy: 0.8006\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.6586 - accuracy: 0.7668 - val_loss: 0.5981 - val_accuracy: 0.8030\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.6493 - accuracy: 0.7727 - val_loss: 0.5982 - val_accuracy: 0.8025\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.6481 - accuracy: 0.7733 - val_loss: 0.5909 - val_accuracy: 0.8020\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.6402 - accuracy: 0.7749 - val_loss: 0.5984 - val_accuracy: 0.7965\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.6375 - accuracy: 0.7742 - val_loss: 0.5858 - val_accuracy: 0.8028\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.6338 - accuracy: 0.7764 - val_loss: 0.6020 - val_accuracy: 0.7943\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"WMBYr0HxxNX5","executionInfo":{"status":"ok","timestamp":1617051790014,"user_tz":-60,"elapsed":245101,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gitw9wgt1tkpkaA0M2DceBy82OW_PzJmQl0xko6PMI=s64","userId":"09880777762577870649"}},"outputId":"6b6f70cd-ac8d-47a7-a958-1b8eb1e3129e"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.1))\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","model.add(Dropout(0.1))\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","Batch23Norm=pd.DataFrame.from_dict(history.history)\n","Batch23Norm.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/d0.1_2_3.csv')\n"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.5805 - accuracy: 0.4210 - val_loss: 1.3070 - val_accuracy: 0.5354\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.2191 - accuracy: 0.5620 - val_loss: 1.1025 - val_accuracy: 0.6095\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.0525 - accuracy: 0.6253 - val_loss: 1.0585 - val_accuracy: 0.6247\n","Epoch 4/40\n","1563/1563 - 6s - loss: 0.9465 - accuracy: 0.6674 - val_loss: 0.9531 - val_accuracy: 0.6653\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.8683 - accuracy: 0.6949 - val_loss: 0.8746 - val_accuracy: 0.6940\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.7982 - accuracy: 0.7203 - val_loss: 0.7885 - val_accuracy: 0.7227\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.7435 - accuracy: 0.7410 - val_loss: 0.7759 - val_accuracy: 0.7241\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.6911 - accuracy: 0.7601 - val_loss: 0.7323 - val_accuracy: 0.7457\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.6433 - accuracy: 0.7746 - val_loss: 0.7164 - val_accuracy: 0.7525\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.6053 - accuracy: 0.7883 - val_loss: 0.6837 - val_accuracy: 0.7624\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.5681 - accuracy: 0.8017 - val_loss: 0.6692 - val_accuracy: 0.7706\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.5360 - accuracy: 0.8121 - val_loss: 0.6332 - val_accuracy: 0.7835\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.5024 - accuracy: 0.8244 - val_loss: 0.6161 - val_accuracy: 0.7880\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.4762 - accuracy: 0.8337 - val_loss: 0.6502 - val_accuracy: 0.7759\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.4522 - accuracy: 0.8406 - val_loss: 0.6432 - val_accuracy: 0.7903\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.4212 - accuracy: 0.8523 - val_loss: 0.6035 - val_accuracy: 0.7949\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.4004 - accuracy: 0.8586 - val_loss: 0.6576 - val_accuracy: 0.7851\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.3768 - accuracy: 0.8684 - val_loss: 0.6041 - val_accuracy: 0.8001\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.3562 - accuracy: 0.8747 - val_loss: 0.5958 - val_accuracy: 0.8047\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.3328 - accuracy: 0.8833 - val_loss: 0.6193 - val_accuracy: 0.7996\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.3134 - accuracy: 0.8921 - val_loss: 0.6224 - val_accuracy: 0.8046\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.2938 - accuracy: 0.8970 - val_loss: 0.6294 - val_accuracy: 0.7992\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.2718 - accuracy: 0.9034 - val_loss: 0.6365 - val_accuracy: 0.8006\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.2584 - accuracy: 0.9093 - val_loss: 0.6093 - val_accuracy: 0.8095\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.2452 - accuracy: 0.9127 - val_loss: 0.6006 - val_accuracy: 0.8143\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.2254 - accuracy: 0.9205 - val_loss: 0.6652 - val_accuracy: 0.8085\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.2110 - accuracy: 0.9265 - val_loss: 0.6359 - val_accuracy: 0.8132\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.2009 - accuracy: 0.9284 - val_loss: 0.6543 - val_accuracy: 0.8033\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.1878 - accuracy: 0.9347 - val_loss: 0.6471 - val_accuracy: 0.8094\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.1778 - accuracy: 0.9377 - val_loss: 0.6406 - val_accuracy: 0.8157\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.1636 - accuracy: 0.9432 - val_loss: 0.6753 - val_accuracy: 0.8131\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.1570 - accuracy: 0.9456 - val_loss: 0.6737 - val_accuracy: 0.8076\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.1451 - accuracy: 0.9494 - val_loss: 0.7142 - val_accuracy: 0.8102\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.1337 - accuracy: 0.9529 - val_loss: 0.6987 - val_accuracy: 0.8140\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.1363 - accuracy: 0.9514 - val_loss: 0.7038 - val_accuracy: 0.8099\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.1201 - accuracy: 0.9578 - val_loss: 0.7153 - val_accuracy: 0.8163\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.1180 - accuracy: 0.9579 - val_loss: 0.7562 - val_accuracy: 0.8065\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.1123 - accuracy: 0.9608 - val_loss: 0.7616 - val_accuracy: 0.8114\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.1019 - accuracy: 0.9652 - val_loss: 0.7936 - val_accuracy: 0.8110\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.1009 - accuracy: 0.9649 - val_loss: 0.7927 - val_accuracy: 0.8111\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}