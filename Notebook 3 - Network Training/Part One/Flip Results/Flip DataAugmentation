{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Flip DataAugmentation","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1616497383722,"user_tz":0,"elapsed":491,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1616497450035,"user_tz":0,"elapsed":13471,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"cf6ae740-fd08-4a81-d1ea-5f609017d83c"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," Content.ipynb\n","'Copy of Copy of Copy of Content.ipynb'\n"," dataNoAug.csv\n","'No Augmentation.ipynb'\n"," NoAugModel\n","'Normalisation DataAugmentation'\n","'Rotation Augmentation - 0.6,0.3,0.1.ipynb'\n","'Rotation Results'\n","'Shift DataAugmentation.ipynb'\n","'Shift Results'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","*  First, train the given default model without any data augmentation. Then define two data augmentation strategies (one more aggressive than the other) and train the model with data augmentation. Clearly state the two augmentation strategies you apply (i.e., the specific transformations). Discuss the training and validation loss curves for the two data augmentation strategies along with the original run without data augmentation. Attach in the appendix those training and validation curves. Report in a table the best validation accuracy obtained for the three runs (no data augmentation, data augmentation 1, data augmentation 2).\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616497802138,"user_tz":0,"elapsed":266268,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"270626e1-17e5-4a62-d5b5-398a2d8c55f3"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomFlip(\"vertical\")\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 3s 0us/step\n","Image shape: (32, 32, 3)\n","Total number of training samples: 50000\n","Total number of validation samples: 10000\n","Epoch 1/40\n","1563/1563 - 39s - loss: 1.6656 - accuracy: 0.3809 - val_loss: 1.4363 - val_accuracy: 0.4736\n","Epoch 2/40\n","1563/1563 - 5s - loss: 1.3475 - accuracy: 0.5154 - val_loss: 1.2765 - val_accuracy: 0.5439\n","Epoch 3/40\n","1563/1563 - 5s - loss: 1.1964 - accuracy: 0.5761 - val_loss: 1.1563 - val_accuracy: 0.5918\n","Epoch 4/40\n","1563/1563 - 5s - loss: 1.0907 - accuracy: 0.6136 - val_loss: 1.0926 - val_accuracy: 0.6141\n","Epoch 5/40\n","1563/1563 - 5s - loss: 1.0138 - accuracy: 0.6420 - val_loss: 0.9890 - val_accuracy: 0.6519\n","Epoch 6/40\n","1563/1563 - 5s - loss: 0.9480 - accuracy: 0.6634 - val_loss: 0.9584 - val_accuracy: 0.6627\n","Epoch 7/40\n","1563/1563 - 5s - loss: 0.9006 - accuracy: 0.6815 - val_loss: 0.9150 - val_accuracy: 0.6749\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.8496 - accuracy: 0.6999 - val_loss: 0.8691 - val_accuracy: 0.6961\n","Epoch 9/40\n","1563/1563 - 5s - loss: 0.8047 - accuracy: 0.7171 - val_loss: 0.8614 - val_accuracy: 0.6960\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.7734 - accuracy: 0.7245 - val_loss: 0.8528 - val_accuracy: 0.7050\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.7364 - accuracy: 0.7395 - val_loss: 0.8231 - val_accuracy: 0.7114\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.7035 - accuracy: 0.7519 - val_loss: 0.8068 - val_accuracy: 0.7179\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.6730 - accuracy: 0.7632 - val_loss: 0.7856 - val_accuracy: 0.7275\n","Epoch 14/40\n","1563/1563 - 5s - loss: 0.6451 - accuracy: 0.7724 - val_loss: 0.8259 - val_accuracy: 0.7150\n","Epoch 15/40\n","1563/1563 - 5s - loss: 0.6179 - accuracy: 0.7822 - val_loss: 0.7641 - val_accuracy: 0.7296\n","Epoch 16/40\n","1563/1563 - 5s - loss: 0.5937 - accuracy: 0.7902 - val_loss: 0.7640 - val_accuracy: 0.7364\n","Epoch 17/40\n","1563/1563 - 5s - loss: 0.5678 - accuracy: 0.8003 - val_loss: 0.7323 - val_accuracy: 0.7453\n","Epoch 18/40\n","1563/1563 - 5s - loss: 0.5436 - accuracy: 0.8086 - val_loss: 0.7679 - val_accuracy: 0.7363\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.5240 - accuracy: 0.8166 - val_loss: 0.7255 - val_accuracy: 0.7517\n","Epoch 20/40\n","1563/1563 - 5s - loss: 0.4996 - accuracy: 0.8257 - val_loss: 0.7383 - val_accuracy: 0.7464\n","Epoch 21/40\n","1563/1563 - 5s - loss: 0.4806 - accuracy: 0.8319 - val_loss: 0.7599 - val_accuracy: 0.7521\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.4554 - accuracy: 0.8392 - val_loss: 0.7344 - val_accuracy: 0.7540\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.4408 - accuracy: 0.8466 - val_loss: 0.7434 - val_accuracy: 0.7511\n","Epoch 24/40\n","1563/1563 - 5s - loss: 0.4211 - accuracy: 0.8544 - val_loss: 0.7193 - val_accuracy: 0.7626\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.3969 - accuracy: 0.8617 - val_loss: 0.7188 - val_accuracy: 0.7629\n","Epoch 26/40\n","1563/1563 - 5s - loss: 0.3797 - accuracy: 0.8670 - val_loss: 0.7486 - val_accuracy: 0.7631\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.3633 - accuracy: 0.8726 - val_loss: 0.8134 - val_accuracy: 0.7498\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.3421 - accuracy: 0.8791 - val_loss: 0.7582 - val_accuracy: 0.7632\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.3281 - accuracy: 0.8859 - val_loss: 0.7664 - val_accuracy: 0.7625\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.3113 - accuracy: 0.8913 - val_loss: 0.7905 - val_accuracy: 0.7523\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.2936 - accuracy: 0.8981 - val_loss: 0.7743 - val_accuracy: 0.7691\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.2768 - accuracy: 0.9036 - val_loss: 0.8056 - val_accuracy: 0.7672\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.2606 - accuracy: 0.9090 - val_loss: 0.8289 - val_accuracy: 0.7585\n","Epoch 34/40\n","1563/1563 - 5s - loss: 0.2500 - accuracy: 0.9128 - val_loss: 0.8844 - val_accuracy: 0.7526\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.2341 - accuracy: 0.9189 - val_loss: 0.8451 - val_accuracy: 0.7617\n","Epoch 36/40\n","1563/1563 - 5s - loss: 0.2228 - accuracy: 0.9232 - val_loss: 0.8323 - val_accuracy: 0.7700\n","Epoch 37/40\n","1563/1563 - 5s - loss: 0.2062 - accuracy: 0.9294 - val_loss: 0.8668 - val_accuracy: 0.7670\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.1915 - accuracy: 0.9354 - val_loss: 0.8899 - val_accuracy: 0.7589\n","Epoch 39/40\n","1563/1563 - 5s - loss: 0.1823 - accuracy: 0.9384 - val_loss: 0.9312 - val_accuracy: 0.7618\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.1715 - accuracy: 0.9417 - val_loss: 0.9362 - val_accuracy: 0.7605\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"twYbkC8fsKgx","executionInfo":{"status":"ok","timestamp":1616497802371,"user_tz":0,"elapsed":15,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"fd63ebdf-8cd7-4144-b3a6-328a7f743131"},"source":["plot_history(history)"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"8JSN_jIHsNGp","executionInfo":{"status":"ok","timestamp":1616497803813,"user_tz":0,"elapsed":460,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["flipverti=pd.DataFrame.from_dict(history.history)\n","flipverti.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/FlipVertical.csv')"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wzBsCz0Lsfac","executionInfo":{"status":"ok","timestamp":1616497805254,"user_tz":0,"elapsed":1896,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"f06bb734-9d79-47a0-a473-adad1fe88f3a"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/FlipVertical Model\")"],"execution_count":9,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/FlipVertical Model/assets\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8w0kMlkZsrOT","executionInfo":{"status":"ok","timestamp":1616498027399,"user_tz":0,"elapsed":221406,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"7c5d5204-6322-4b14-a6f0-b45bea6e212f"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomFlip(\"horizontal\")\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 6s - loss: 1.5643 - accuracy: 0.4288 - val_loss: 1.3245 - val_accuracy: 0.5118\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.2132 - accuracy: 0.5660 - val_loss: 1.1501 - val_accuracy: 0.5970\n","Epoch 3/40\n","1563/1563 - 5s - loss: 1.0494 - accuracy: 0.6316 - val_loss: 0.9931 - val_accuracy: 0.6448\n","Epoch 4/40\n","1563/1563 - 5s - loss: 0.9339 - accuracy: 0.6704 - val_loss: 0.9228 - val_accuracy: 0.6728\n","Epoch 5/40\n","1563/1563 - 5s - loss: 0.8565 - accuracy: 0.7018 - val_loss: 0.8626 - val_accuracy: 0.6946\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.7894 - accuracy: 0.7233 - val_loss: 0.7909 - val_accuracy: 0.7221\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.7296 - accuracy: 0.7450 - val_loss: 0.7536 - val_accuracy: 0.7382\n","Epoch 8/40\n","1563/1563 - 5s - loss: 0.6790 - accuracy: 0.7636 - val_loss: 0.7476 - val_accuracy: 0.7405\n","Epoch 9/40\n","1563/1563 - 5s - loss: 0.6393 - accuracy: 0.7777 - val_loss: 0.7431 - val_accuracy: 0.7455\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.6037 - accuracy: 0.7900 - val_loss: 0.6967 - val_accuracy: 0.7617\n","Epoch 11/40\n","1563/1563 - 5s - loss: 0.5715 - accuracy: 0.8010 - val_loss: 0.7025 - val_accuracy: 0.7561\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.5384 - accuracy: 0.8120 - val_loss: 0.6551 - val_accuracy: 0.7738\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.5134 - accuracy: 0.8225 - val_loss: 0.6650 - val_accuracy: 0.7743\n","Epoch 14/40\n","1563/1563 - 5s - loss: 0.4834 - accuracy: 0.8319 - val_loss: 0.6119 - val_accuracy: 0.7922\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.4544 - accuracy: 0.8416 - val_loss: 0.6310 - val_accuracy: 0.7896\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.4334 - accuracy: 0.8493 - val_loss: 0.5933 - val_accuracy: 0.8007\n","Epoch 17/40\n","1563/1563 - 5s - loss: 0.4129 - accuracy: 0.8564 - val_loss: 0.6800 - val_accuracy: 0.7791\n","Epoch 18/40\n","1563/1563 - 5s - loss: 0.3897 - accuracy: 0.8643 - val_loss: 0.5962 - val_accuracy: 0.8002\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.3689 - accuracy: 0.8713 - val_loss: 0.6211 - val_accuracy: 0.7962\n","Epoch 20/40\n","1563/1563 - 5s - loss: 0.3511 - accuracy: 0.8781 - val_loss: 0.5922 - val_accuracy: 0.8087\n","Epoch 21/40\n","1563/1563 - 5s - loss: 0.3272 - accuracy: 0.8868 - val_loss: 0.5847 - val_accuracy: 0.8106\n","Epoch 22/40\n","1563/1563 - 5s - loss: 0.3108 - accuracy: 0.8920 - val_loss: 0.6194 - val_accuracy: 0.8073\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.2950 - accuracy: 0.8977 - val_loss: 0.6279 - val_accuracy: 0.8048\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.2757 - accuracy: 0.9033 - val_loss: 0.6350 - val_accuracy: 0.8042\n","Epoch 25/40\n","1563/1563 - 5s - loss: 0.2570 - accuracy: 0.9116 - val_loss: 0.6364 - val_accuracy: 0.8092\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.2459 - accuracy: 0.9134 - val_loss: 0.6628 - val_accuracy: 0.8013\n","Epoch 27/40\n","1563/1563 - 5s - loss: 0.2275 - accuracy: 0.9219 - val_loss: 0.6686 - val_accuracy: 0.8026\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.2096 - accuracy: 0.9278 - val_loss: 0.7037 - val_accuracy: 0.7993\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.1949 - accuracy: 0.9339 - val_loss: 0.6597 - val_accuracy: 0.8145\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.1830 - accuracy: 0.9373 - val_loss: 0.6802 - val_accuracy: 0.8137\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.1698 - accuracy: 0.9414 - val_loss: 0.7437 - val_accuracy: 0.8019\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.1600 - accuracy: 0.9447 - val_loss: 0.7286 - val_accuracy: 0.8097\n","Epoch 33/40\n","1563/1563 - 5s - loss: 0.1478 - accuracy: 0.9490 - val_loss: 0.7333 - val_accuracy: 0.8143\n","Epoch 34/40\n","1563/1563 - 5s - loss: 0.1400 - accuracy: 0.9525 - val_loss: 0.7377 - val_accuracy: 0.8122\n","Epoch 35/40\n","1563/1563 - 5s - loss: 0.1292 - accuracy: 0.9547 - val_loss: 0.7383 - val_accuracy: 0.8103\n","Epoch 36/40\n","1563/1563 - 5s - loss: 0.1142 - accuracy: 0.9615 - val_loss: 0.8056 - val_accuracy: 0.7957\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.1116 - accuracy: 0.9617 - val_loss: 0.8039 - val_accuracy: 0.8081\n","Epoch 38/40\n","1563/1563 - 5s - loss: 0.1028 - accuracy: 0.9646 - val_loss: 0.8233 - val_accuracy: 0.8068\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.0962 - accuracy: 0.9674 - val_loss: 0.8767 - val_accuracy: 0.8022\n","Epoch 40/40\n","1563/1563 - 5s - loss: 0.0861 - accuracy: 0.9702 - val_loss: 0.8737 - val_accuracy: 0.8087\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"qYsNazfvsvBk","executionInfo":{"status":"ok","timestamp":1616498028378,"user_tz":0,"elapsed":918,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"deabb5f5-50d4-489f-961f-864e75b9c622"},"source":["plot_history(history)"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"p9Z1GJrWs3ep","executionInfo":{"status":"ok","timestamp":1616498029479,"user_tz":0,"elapsed":281,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["flipHorizontal=pd.DataFrame.from_dict(history.history)\n","flipHorizontal.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Flip Horizontal.csv')"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v00_-CA9s9wU","executionInfo":{"status":"ok","timestamp":1616498031106,"user_tz":0,"elapsed":1900,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"03d6e177-4bfc-4243-a131-c330f1b45e56"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Flip Horizontal Model\")"],"execution_count":13,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Flip Horizontal Model/assets\n"],"name":"stdout"}]}]}