{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Shift DataAugmentation","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1616496263340,"user_tz":0,"elapsed":487,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1616496292672,"user_tz":0,"elapsed":16536,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"37bb3f8d-d3db-4482-aa82-45c379ae3c7f"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," Content.ipynb\n","'Copy of Copy of Copy of Content.ipynb'\n"," dataNoAug.csv\n","'No Augmentation.ipynb'\n"," NoAugModel\n","'Rotation Augmentation - 0.6,0.3,0.1.ipynb'\n","'Rotation Results'\n","'Shift DataAugmentation.ipynb'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","*  First, train the given default model without any data augmentation. Then define two data augmentation strategies (one more aggressive than the other) and train the model with data augmentation. Clearly state the two augmentation strategies you apply (i.e., the specific transformations). Discuss the training and validation loss curves for the two data augmentation strategies along with the original run without data augmentation. Attach in the appendix those training and validation curves. Report in a table the best validation accuracy obtained for the three runs (no data augmentation, data augmentation 1, data augmentation 2).\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616496611319,"user_tz":0,"elapsed":286401,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"1b431145-5326-4a16-a13b-7b359414cdb0"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomTranslation(height_factor=0.3, width_factor=0.3, fill_mode='reflect',interpolation='bilinear')\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 4s 0us/step\n","Image shape: (32, 32, 3)\n","Total number of training samples: 50000\n","Total number of validation samples: 10000\n","Epoch 1/40\n","1563/1563 - 39s - loss: 1.7566 - accuracy: 0.3461 - val_loss: 1.4632 - val_accuracy: 0.4757\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.4585 - accuracy: 0.4730 - val_loss: 1.2963 - val_accuracy: 0.5418\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.3140 - accuracy: 0.5342 - val_loss: 1.2035 - val_accuracy: 0.5782\n","Epoch 4/40\n","1563/1563 - 6s - loss: 1.2257 - accuracy: 0.5658 - val_loss: 1.0607 - val_accuracy: 0.6215\n","Epoch 5/40\n","1563/1563 - 6s - loss: 1.1582 - accuracy: 0.5884 - val_loss: 1.0547 - val_accuracy: 0.6303\n","Epoch 6/40\n","1563/1563 - 6s - loss: 1.0969 - accuracy: 0.6158 - val_loss: 0.9360 - val_accuracy: 0.6776\n","Epoch 7/40\n","1563/1563 - 6s - loss: 1.0388 - accuracy: 0.6350 - val_loss: 0.9263 - val_accuracy: 0.6739\n","Epoch 8/40\n","1563/1563 - 6s - loss: 1.0055 - accuracy: 0.6486 - val_loss: 0.8771 - val_accuracy: 0.6946\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.9622 - accuracy: 0.6623 - val_loss: 0.8079 - val_accuracy: 0.7151\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.9215 - accuracy: 0.6770 - val_loss: 0.8144 - val_accuracy: 0.7139\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.8986 - accuracy: 0.6841 - val_loss: 0.8738 - val_accuracy: 0.6997\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.8689 - accuracy: 0.6968 - val_loss: 0.7536 - val_accuracy: 0.7401\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.8416 - accuracy: 0.7028 - val_loss: 0.7916 - val_accuracy: 0.7296\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.8124 - accuracy: 0.7179 - val_loss: 0.7850 - val_accuracy: 0.7390\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.7901 - accuracy: 0.7235 - val_loss: 0.8234 - val_accuracy: 0.7278\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.7679 - accuracy: 0.7326 - val_loss: 0.6899 - val_accuracy: 0.7678\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.7471 - accuracy: 0.7398 - val_loss: 0.7275 - val_accuracy: 0.7548\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.7353 - accuracy: 0.7439 - val_loss: 0.7235 - val_accuracy: 0.7556\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.7117 - accuracy: 0.7509 - val_loss: 0.6886 - val_accuracy: 0.7724\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.7041 - accuracy: 0.7535 - val_loss: 0.6797 - val_accuracy: 0.7721\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.6811 - accuracy: 0.7653 - val_loss: 0.6370 - val_accuracy: 0.7828\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.6716 - accuracy: 0.7663 - val_loss: 0.6430 - val_accuracy: 0.7817\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.6489 - accuracy: 0.7744 - val_loss: 0.6656 - val_accuracy: 0.7741\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.6326 - accuracy: 0.7802 - val_loss: 0.6696 - val_accuracy: 0.7743\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.6288 - accuracy: 0.7822 - val_loss: 0.6493 - val_accuracy: 0.7917\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.6104 - accuracy: 0.7879 - val_loss: 0.6228 - val_accuracy: 0.7967\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.5994 - accuracy: 0.7914 - val_loss: 0.6563 - val_accuracy: 0.7883\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.5908 - accuracy: 0.7954 - val_loss: 0.6289 - val_accuracy: 0.7938\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.5780 - accuracy: 0.8011 - val_loss: 0.6349 - val_accuracy: 0.7931\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.5679 - accuracy: 0.8025 - val_loss: 0.5970 - val_accuracy: 0.8054\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.5585 - accuracy: 0.8065 - val_loss: 0.6483 - val_accuracy: 0.7923\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.5444 - accuracy: 0.8110 - val_loss: 0.6417 - val_accuracy: 0.7973\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.5378 - accuracy: 0.8128 - val_loss: 0.6013 - val_accuracy: 0.8063\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.5292 - accuracy: 0.8171 - val_loss: 0.6075 - val_accuracy: 0.8055\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.5203 - accuracy: 0.8193 - val_loss: 0.5916 - val_accuracy: 0.8060\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.5124 - accuracy: 0.8225 - val_loss: 0.6214 - val_accuracy: 0.8031\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.5040 - accuracy: 0.8246 - val_loss: 0.6088 - val_accuracy: 0.8139\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.4939 - accuracy: 0.8280 - val_loss: 0.6082 - val_accuracy: 0.8091\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.4868 - accuracy: 0.8305 - val_loss: 0.5891 - val_accuracy: 0.8166\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.4780 - accuracy: 0.8330 - val_loss: 0.6327 - val_accuracy: 0.8029\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"twYbkC8fsKgx","executionInfo":{"status":"ok","timestamp":1616496612375,"user_tz":0,"elapsed":1053,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"5401259a-6935-46e7-c25f-456d8f12f7f5"},"source":["plot_history(history)"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"8JSN_jIHsNGp","executionInfo":{"status":"ok","timestamp":1616496613050,"user_tz":0,"elapsed":669,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["shift0303=pd.DataFrame.from_dict(history.history)\n","shift0303.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Shift_0.3_0.3_reflect_bilinear.csv')"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wzBsCz0Lsfac","executionInfo":{"status":"ok","timestamp":1616496614571,"user_tz":0,"elapsed":2184,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"e2092b4a-3041-4785-c2b0-a2321636f7f9"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Shift(0.3 0.3 reflect bilinear) Model\")"],"execution_count":8,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Shift(0.3 0.3 reflect bilinear) Model/assets\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8w0kMlkZsrOT","executionInfo":{"status":"ok","timestamp":1616496858323,"user_tz":0,"elapsed":245932,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"39f28708-577e-4db3-ecdc-c8ee827bbb58"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomTranslation(height_factor=0.1, width_factor=0.1, fill_mode='reflect',interpolation='bilinear')\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.6140 - accuracy: 0.4058 - val_loss: 1.3751 - val_accuracy: 0.5093\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.2875 - accuracy: 0.5367 - val_loss: 1.1578 - val_accuracy: 0.5909\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.1355 - accuracy: 0.5968 - val_loss: 1.1174 - val_accuracy: 0.6108\n","Epoch 4/40\n","1563/1563 - 6s - loss: 1.0337 - accuracy: 0.6351 - val_loss: 0.9305 - val_accuracy: 0.6735\n","Epoch 5/40\n","1563/1563 - 6s - loss: 0.9562 - accuracy: 0.6611 - val_loss: 0.8835 - val_accuracy: 0.6939\n","Epoch 6/40\n","1563/1563 - 6s - loss: 0.8941 - accuracy: 0.6860 - val_loss: 0.8972 - val_accuracy: 0.6922\n","Epoch 7/40\n","1563/1563 - 6s - loss: 0.8380 - accuracy: 0.7072 - val_loss: 0.8693 - val_accuracy: 0.6967\n","Epoch 8/40\n","1563/1563 - 6s - loss: 0.7891 - accuracy: 0.7236 - val_loss: 0.8694 - val_accuracy: 0.7029\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.7414 - accuracy: 0.7393 - val_loss: 0.7938 - val_accuracy: 0.7291\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.7077 - accuracy: 0.7515 - val_loss: 0.7485 - val_accuracy: 0.7454\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.6688 - accuracy: 0.7658 - val_loss: 0.7413 - val_accuracy: 0.7528\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.6385 - accuracy: 0.7768 - val_loss: 0.7110 - val_accuracy: 0.7613\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.6129 - accuracy: 0.7858 - val_loss: 0.7090 - val_accuracy: 0.7650\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.5857 - accuracy: 0.7967 - val_loss: 0.6956 - val_accuracy: 0.7662\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.5656 - accuracy: 0.8033 - val_loss: 0.7041 - val_accuracy: 0.7671\n","Epoch 16/40\n","1563/1563 - 6s - loss: 0.5440 - accuracy: 0.8092 - val_loss: 0.6479 - val_accuracy: 0.7807\n","Epoch 17/40\n","1563/1563 - 6s - loss: 0.5179 - accuracy: 0.8188 - val_loss: 0.6420 - val_accuracy: 0.7856\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.5018 - accuracy: 0.8245 - val_loss: 0.6358 - val_accuracy: 0.7895\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.4848 - accuracy: 0.8297 - val_loss: 0.6458 - val_accuracy: 0.7815\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.4631 - accuracy: 0.8382 - val_loss: 0.6236 - val_accuracy: 0.7925\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.4456 - accuracy: 0.8449 - val_loss: 0.5963 - val_accuracy: 0.8039\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.4294 - accuracy: 0.8498 - val_loss: 0.5921 - val_accuracy: 0.8052\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.4161 - accuracy: 0.8548 - val_loss: 0.6101 - val_accuracy: 0.8066\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.4015 - accuracy: 0.8576 - val_loss: 0.6267 - val_accuracy: 0.8048\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.3862 - accuracy: 0.8648 - val_loss: 0.6098 - val_accuracy: 0.8085\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.3681 - accuracy: 0.8705 - val_loss: 0.6184 - val_accuracy: 0.8071\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.3593 - accuracy: 0.8738 - val_loss: 0.6291 - val_accuracy: 0.8033\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.3431 - accuracy: 0.8787 - val_loss: 0.5963 - val_accuracy: 0.8124\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.3305 - accuracy: 0.8839 - val_loss: 0.6362 - val_accuracy: 0.8034\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.3161 - accuracy: 0.8900 - val_loss: 0.6072 - val_accuracy: 0.8092\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.3090 - accuracy: 0.8921 - val_loss: 0.5973 - val_accuracy: 0.8127\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.2968 - accuracy: 0.8938 - val_loss: 0.6279 - val_accuracy: 0.8134\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.2831 - accuracy: 0.8997 - val_loss: 0.6103 - val_accuracy: 0.8181\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.2745 - accuracy: 0.9032 - val_loss: 0.6276 - val_accuracy: 0.8154\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.2654 - accuracy: 0.9052 - val_loss: 0.6068 - val_accuracy: 0.8201\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.2580 - accuracy: 0.9085 - val_loss: 0.6606 - val_accuracy: 0.8152\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.2464 - accuracy: 0.9122 - val_loss: 0.7082 - val_accuracy: 0.8065\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.2366 - accuracy: 0.9150 - val_loss: 0.6643 - val_accuracy: 0.8141\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.2284 - accuracy: 0.9189 - val_loss: 0.7710 - val_accuracy: 0.8004\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.2231 - accuracy: 0.9222 - val_loss: 0.6781 - val_accuracy: 0.8151\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"qYsNazfvsvBk","executionInfo":{"status":"ok","timestamp":1616496858629,"user_tz":0,"elapsed":246234,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"37983cf6-23bf-4aef-b553-3ee939895858"},"source":["plot_history(history)"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"p9Z1GJrWs3ep","executionInfo":{"status":"ok","timestamp":1616496859419,"user_tz":0,"elapsed":786,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["shift0101=pd.DataFrame.from_dict(history.history)\n","shift0101.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Shift_0.1_0.1_reflect_bilinear.csv')"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v00_-CA9s9wU","executionInfo":{"status":"ok","timestamp":1616496861524,"user_tz":0,"elapsed":2102,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"ff77e8c1-0746-4a89-8a5a-109240c71d9a"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Shift(0.1 0.1 reflect bilinear) Model\")"],"execution_count":12,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Shift(0.1 0.1 reflect bilinear) Model/assets\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RQlCX478tCIT","executionInfo":{"status":"ok","timestamp":1616497102892,"user_tz":0,"elapsed":240600,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"f53976b1-40a6-47ca-a7aa-99807245df63"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomTranslation(height_factor=0.6, width_factor=0.6, fill_mode='reflect',interpolation='bilinear')\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 7s - loss: 1.8795 - accuracy: 0.3004 - val_loss: 1.5502 - val_accuracy: 0.4244\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.6505 - accuracy: 0.3981 - val_loss: 1.4837 - val_accuracy: 0.4669\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.5479 - accuracy: 0.4401 - val_loss: 1.3549 - val_accuracy: 0.5073\n","Epoch 4/40\n","1563/1563 - 6s - loss: 1.4765 - accuracy: 0.4679 - val_loss: 1.2620 - val_accuracy: 0.5534\n","Epoch 5/40\n","1563/1563 - 6s - loss: 1.4089 - accuracy: 0.4940 - val_loss: 1.1584 - val_accuracy: 0.5879\n","Epoch 6/40\n","1563/1563 - 6s - loss: 1.3584 - accuracy: 0.5143 - val_loss: 1.1087 - val_accuracy: 0.6056\n","Epoch 7/40\n","1563/1563 - 6s - loss: 1.3250 - accuracy: 0.5275 - val_loss: 1.0803 - val_accuracy: 0.6181\n","Epoch 8/40\n","1563/1563 - 6s - loss: 1.2893 - accuracy: 0.5395 - val_loss: 1.1148 - val_accuracy: 0.5952\n","Epoch 9/40\n","1563/1563 - 6s - loss: 1.2554 - accuracy: 0.5530 - val_loss: 0.9802 - val_accuracy: 0.6604\n","Epoch 10/40\n","1563/1563 - 6s - loss: 1.2260 - accuracy: 0.5630 - val_loss: 0.9781 - val_accuracy: 0.6540\n","Epoch 11/40\n","1563/1563 - 6s - loss: 1.2035 - accuracy: 0.5736 - val_loss: 0.9801 - val_accuracy: 0.6496\n","Epoch 12/40\n","1563/1563 - 6s - loss: 1.1811 - accuracy: 0.5805 - val_loss: 0.9391 - val_accuracy: 0.6663\n","Epoch 13/40\n","1563/1563 - 6s - loss: 1.1580 - accuracy: 0.5910 - val_loss: 0.9632 - val_accuracy: 0.6673\n","Epoch 14/40\n","1563/1563 - 6s - loss: 1.1367 - accuracy: 0.5988 - val_loss: 0.9009 - val_accuracy: 0.6820\n","Epoch 15/40\n","1563/1563 - 6s - loss: 1.1233 - accuracy: 0.6042 - val_loss: 0.9195 - val_accuracy: 0.6724\n","Epoch 16/40\n","1563/1563 - 6s - loss: 1.1020 - accuracy: 0.6104 - val_loss: 0.8475 - val_accuracy: 0.7050\n","Epoch 17/40\n","1563/1563 - 6s - loss: 1.0900 - accuracy: 0.6164 - val_loss: 0.9038 - val_accuracy: 0.6825\n","Epoch 18/40\n","1563/1563 - 6s - loss: 1.0665 - accuracy: 0.6244 - val_loss: 0.8075 - val_accuracy: 0.7186\n","Epoch 19/40\n","1563/1563 - 6s - loss: 1.0622 - accuracy: 0.6273 - val_loss: 0.8544 - val_accuracy: 0.7090\n","Epoch 20/40\n","1563/1563 - 6s - loss: 1.0401 - accuracy: 0.6367 - val_loss: 0.8138 - val_accuracy: 0.7149\n","Epoch 21/40\n","1563/1563 - 6s - loss: 1.0395 - accuracy: 0.6337 - val_loss: 0.7798 - val_accuracy: 0.7297\n","Epoch 22/40\n","1563/1563 - 6s - loss: 1.0226 - accuracy: 0.6413 - val_loss: 0.8134 - val_accuracy: 0.7154\n","Epoch 23/40\n","1563/1563 - 6s - loss: 1.0208 - accuracy: 0.6429 - val_loss: 0.7524 - val_accuracy: 0.7388\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.9995 - accuracy: 0.6488 - val_loss: 0.8139 - val_accuracy: 0.7217\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.9867 - accuracy: 0.6552 - val_loss: 0.7844 - val_accuracy: 0.7301\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.9787 - accuracy: 0.6576 - val_loss: 0.7352 - val_accuracy: 0.7424\n","Epoch 27/40\n","1563/1563 - 6s - loss: 0.9745 - accuracy: 0.6577 - val_loss: 0.7605 - val_accuracy: 0.7452\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.9573 - accuracy: 0.6636 - val_loss: 0.7363 - val_accuracy: 0.7490\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.9465 - accuracy: 0.6691 - val_loss: 0.7439 - val_accuracy: 0.7427\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.9415 - accuracy: 0.6700 - val_loss: 0.7206 - val_accuracy: 0.7574\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.9425 - accuracy: 0.6709 - val_loss: 0.7373 - val_accuracy: 0.7529\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.9259 - accuracy: 0.6755 - val_loss: 0.6814 - val_accuracy: 0.7657\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.9178 - accuracy: 0.6790 - val_loss: 0.6923 - val_accuracy: 0.7620\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.9152 - accuracy: 0.6809 - val_loss: 0.6891 - val_accuracy: 0.7593\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.9080 - accuracy: 0.6848 - val_loss: 0.6894 - val_accuracy: 0.7637\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.9065 - accuracy: 0.6836 - val_loss: 0.6985 - val_accuracy: 0.7615\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.8957 - accuracy: 0.6880 - val_loss: 0.7684 - val_accuracy: 0.7419\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.8961 - accuracy: 0.6883 - val_loss: 0.6849 - val_accuracy: 0.7646\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.8832 - accuracy: 0.6929 - val_loss: 0.6944 - val_accuracy: 0.7650\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.8770 - accuracy: 0.6952 - val_loss: 0.6927 - val_accuracy: 0.7657\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"ddiBvDKDtGbO","executionInfo":{"status":"ok","timestamp":1616497103105,"user_tz":0,"elapsed":240809,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"d61e8eb6-a186-4c04-9ff4-5eae194f98e0"},"source":["plot_history(history)"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"cXjzB3fgtIbs","executionInfo":{"status":"ok","timestamp":1616497103106,"user_tz":0,"elapsed":240807,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["shift0606=pd.DataFrame.from_dict(history.history)\n","shift0606.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Shift_0.6_0.6_reflect_bilinear.csv')"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O7jw5wmCtSB5","executionInfo":{"status":"ok","timestamp":1616497105464,"user_tz":0,"elapsed":1996,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"4a17fe0b-a10e-47b3-bc4d-7091aa1da76b"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Shift(0.6 0.6 reflect bilinear) Model\")"],"execution_count":16,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Shift(0.6 0.6 reflect bilinear) Model/assets\n"],"name":"stdout"}]}]}