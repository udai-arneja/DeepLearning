{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Aggresive DataAugmentation","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1616497711394,"user_tz":0,"elapsed":1908,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1616497727699,"user_tz":0,"elapsed":16290,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"94bbdb7e-18b7-4f63-837f-05db1e7a9b98"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," Content.ipynb\n","'Copy of Copy of Copy of Content.ipynb'\n","'Copy of Shift DataAugmentation'\n"," dataNoAug.csv\n","'No Augmentation.ipynb'\n"," NoAugModel\n","'Normalisation DataAugmentation'\n","'Rotation Augmentation - 0.6,0.3,0.1.ipynb'\n","'Rotation Results'\n","'Shift DataAugmentation.ipynb'\n","'Shift Results'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","*  First, train the given default model without any data augmentation. Then define two data augmentation strategies (one more aggressive than the other) and train the model with data augmentation. Clearly state the two augmentation strategies you apply (i.e., the specific transformations). Discuss the training and validation loss curves for the two data augmentation strategies along with the original run without data augmentation. Attach in the appendix those training and validation curves. Report in a table the best validation accuracy obtained for the three runs (no data augmentation, data augmentation 1, data augmentation 2).\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616498218049,"user_tz":0,"elapsed":300390,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"acf5bcaa-7ad6-47d8-ccf6-02ef29f6525d"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomRotation(0.1),\n","        preprocessing.RandomTranslation(height_factor=0.1, width_factor=0.1, fill_mode='reflect',interpolation='bilinear'),\n","        preprocessing.RandomFlip(\"horizontal\")\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170500096/170498071 [==============================] - 4s 0us/step\n","Image shape: (32, 32, 3)\n","Total number of training samples: 50000\n","Total number of validation samples: 10000\n","Epoch 1/40\n","1563/1563 - 38s - loss: 1.6974 - accuracy: 0.3800 - val_loss: 1.4736 - val_accuracy: 0.4600\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.4274 - accuracy: 0.4857 - val_loss: 1.3390 - val_accuracy: 0.5253\n","Epoch 3/40\n","1563/1563 - 6s - loss: 1.2977 - accuracy: 0.5345 - val_loss: 1.3704 - val_accuracy: 0.5312\n","Epoch 4/40\n","1563/1563 - 6s - loss: 1.2087 - accuracy: 0.5680 - val_loss: 1.1662 - val_accuracy: 0.6021\n","Epoch 5/40\n","1563/1563 - 6s - loss: 1.1386 - accuracy: 0.5970 - val_loss: 1.1462 - val_accuracy: 0.6058\n","Epoch 6/40\n","1563/1563 - 6s - loss: 1.0846 - accuracy: 0.6139 - val_loss: 1.0693 - val_accuracy: 0.6312\n","Epoch 7/40\n","1563/1563 - 6s - loss: 1.0411 - accuracy: 0.6326 - val_loss: 1.0261 - val_accuracy: 0.6506\n","Epoch 8/40\n","1563/1563 - 6s - loss: 1.0044 - accuracy: 0.6450 - val_loss: 1.0473 - val_accuracy: 0.6453\n","Epoch 9/40\n","1563/1563 - 6s - loss: 0.9706 - accuracy: 0.6572 - val_loss: 1.0621 - val_accuracy: 0.6495\n","Epoch 10/40\n","1563/1563 - 6s - loss: 0.9371 - accuracy: 0.6704 - val_loss: 0.9857 - val_accuracy: 0.6711\n","Epoch 11/40\n","1563/1563 - 6s - loss: 0.9050 - accuracy: 0.6817 - val_loss: 0.9474 - val_accuracy: 0.6848\n","Epoch 12/40\n","1563/1563 - 6s - loss: 0.8810 - accuracy: 0.6911 - val_loss: 0.8709 - val_accuracy: 0.7030\n","Epoch 13/40\n","1563/1563 - 6s - loss: 0.8572 - accuracy: 0.6967 - val_loss: 0.8696 - val_accuracy: 0.7052\n","Epoch 14/40\n","1563/1563 - 6s - loss: 0.8302 - accuracy: 0.7095 - val_loss: 0.9392 - val_accuracy: 0.6846\n","Epoch 15/40\n","1563/1563 - 6s - loss: 0.8182 - accuracy: 0.7140 - val_loss: 0.8033 - val_accuracy: 0.7235\n","Epoch 16/40\n","1563/1563 - 7s - loss: 0.7976 - accuracy: 0.7192 - val_loss: 0.8650 - val_accuracy: 0.7078\n","Epoch 17/40\n","1563/1563 - 7s - loss: 0.7827 - accuracy: 0.7248 - val_loss: 0.9381 - val_accuracy: 0.7002\n","Epoch 18/40\n","1563/1563 - 6s - loss: 0.7595 - accuracy: 0.7334 - val_loss: 0.8324 - val_accuracy: 0.7240\n","Epoch 19/40\n","1563/1563 - 6s - loss: 0.7468 - accuracy: 0.7402 - val_loss: 0.7580 - val_accuracy: 0.7422\n","Epoch 20/40\n","1563/1563 - 6s - loss: 0.7302 - accuracy: 0.7439 - val_loss: 0.7500 - val_accuracy: 0.7489\n","Epoch 21/40\n","1563/1563 - 6s - loss: 0.7141 - accuracy: 0.7505 - val_loss: 0.8028 - val_accuracy: 0.7353\n","Epoch 22/40\n","1563/1563 - 6s - loss: 0.7046 - accuracy: 0.7529 - val_loss: 0.7676 - val_accuracy: 0.7492\n","Epoch 23/40\n","1563/1563 - 6s - loss: 0.6926 - accuracy: 0.7566 - val_loss: 0.7500 - val_accuracy: 0.7498\n","Epoch 24/40\n","1563/1563 - 6s - loss: 0.6802 - accuracy: 0.7628 - val_loss: 0.7049 - val_accuracy: 0.7689\n","Epoch 25/40\n","1563/1563 - 6s - loss: 0.6670 - accuracy: 0.7673 - val_loss: 0.7003 - val_accuracy: 0.7661\n","Epoch 26/40\n","1563/1563 - 6s - loss: 0.6603 - accuracy: 0.7691 - val_loss: 0.8374 - val_accuracy: 0.7388\n","Epoch 27/40\n","1563/1563 - 7s - loss: 0.6500 - accuracy: 0.7732 - val_loss: 0.6877 - val_accuracy: 0.7722\n","Epoch 28/40\n","1563/1563 - 6s - loss: 0.6412 - accuracy: 0.7768 - val_loss: 0.7498 - val_accuracy: 0.7586\n","Epoch 29/40\n","1563/1563 - 6s - loss: 0.6308 - accuracy: 0.7800 - val_loss: 0.6875 - val_accuracy: 0.7715\n","Epoch 30/40\n","1563/1563 - 6s - loss: 0.6230 - accuracy: 0.7821 - val_loss: 0.7233 - val_accuracy: 0.7667\n","Epoch 31/40\n","1563/1563 - 6s - loss: 0.6148 - accuracy: 0.7837 - val_loss: 0.7201 - val_accuracy: 0.7649\n","Epoch 32/40\n","1563/1563 - 6s - loss: 0.5991 - accuracy: 0.7919 - val_loss: 0.7883 - val_accuracy: 0.7482\n","Epoch 33/40\n","1563/1563 - 6s - loss: 0.5984 - accuracy: 0.7891 - val_loss: 0.7202 - val_accuracy: 0.7737\n","Epoch 34/40\n","1563/1563 - 6s - loss: 0.5865 - accuracy: 0.7940 - val_loss: 0.6511 - val_accuracy: 0.7855\n","Epoch 35/40\n","1563/1563 - 6s - loss: 0.5807 - accuracy: 0.7963 - val_loss: 0.6968 - val_accuracy: 0.7789\n","Epoch 36/40\n","1563/1563 - 6s - loss: 0.5711 - accuracy: 0.8006 - val_loss: 0.6891 - val_accuracy: 0.7742\n","Epoch 37/40\n","1563/1563 - 6s - loss: 0.5633 - accuracy: 0.8030 - val_loss: 0.6655 - val_accuracy: 0.7847\n","Epoch 38/40\n","1563/1563 - 6s - loss: 0.5558 - accuracy: 0.8048 - val_loss: 0.7069 - val_accuracy: 0.7749\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.5453 - accuracy: 0.8097 - val_loss: 0.7072 - val_accuracy: 0.7803\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.5434 - accuracy: 0.8113 - val_loss: 0.6439 - val_accuracy: 0.7929\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"twYbkC8fsKgx","executionInfo":{"status":"ok","timestamp":1616498219021,"user_tz":0,"elapsed":946,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"7bbfa4fe-c47b-46c0-ca81-36b8c90e2be1"},"source":["plot_history(history)"],"execution_count":6,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"8JSN_jIHsNGp","executionInfo":{"status":"ok","timestamp":1616498219023,"user_tz":0,"elapsed":939,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["Aggresive1=pd.DataFrame.from_dict(history.history)\n","Aggresive1.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.1,Shift(0.1),FlipHor.csv')"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wzBsCz0Lsfac","executionInfo":{"status":"ok","timestamp":1616498221603,"user_tz":0,"elapsed":2561,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"46e2bfc3-e655-41ad-e9f1-7b85a6db1017"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.1,Shift(0.1),FlipHor Model\")"],"execution_count":8,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation,Shift(0.1),FlipHor Model/assets\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8w0kMlkZsrOT","executionInfo":{"status":"ok","timestamp":1616498480649,"user_tz":0,"elapsed":261602,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"f8a65791-dd33-4483-ea6c-19ecfcb622f5"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomRotation(0.3),\n","        preprocessing.RandomTranslation(height_factor=0.3, width_factor=0.3, fill_mode='reflect',interpolation='bilinear'),\n","        preprocessing.RandomFlip(\"horizontal\")\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 8s - loss: 1.9138 - accuracy: 0.2945 - val_loss: 2.0569 - val_accuracy: 0.3202\n","Epoch 2/40\n","1563/1563 - 6s - loss: 1.7231 - accuracy: 0.3765 - val_loss: 1.6422 - val_accuracy: 0.4195\n","Epoch 3/40\n","1563/1563 - 7s - loss: 1.6330 - accuracy: 0.4108 - val_loss: 1.5563 - val_accuracy: 0.4423\n","Epoch 4/40\n","1563/1563 - 6s - loss: 1.5656 - accuracy: 0.4393 - val_loss: 1.6202 - val_accuracy: 0.4465\n","Epoch 5/40\n","1563/1563 - 6s - loss: 1.5113 - accuracy: 0.4570 - val_loss: 1.5006 - val_accuracy: 0.4727\n","Epoch 6/40\n","1563/1563 - 7s - loss: 1.4598 - accuracy: 0.4742 - val_loss: 1.6296 - val_accuracy: 0.4491\n","Epoch 7/40\n","1563/1563 - 6s - loss: 1.4153 - accuracy: 0.4920 - val_loss: 1.4620 - val_accuracy: 0.4937\n","Epoch 8/40\n","1563/1563 - 6s - loss: 1.3859 - accuracy: 0.5039 - val_loss: 1.3329 - val_accuracy: 0.5235\n","Epoch 9/40\n","1563/1563 - 6s - loss: 1.3483 - accuracy: 0.5184 - val_loss: 1.3578 - val_accuracy: 0.5262\n","Epoch 10/40\n","1563/1563 - 6s - loss: 1.3265 - accuracy: 0.5263 - val_loss: 1.3952 - val_accuracy: 0.5219\n","Epoch 11/40\n","1563/1563 - 6s - loss: 1.2988 - accuracy: 0.5370 - val_loss: 1.2803 - val_accuracy: 0.5524\n","Epoch 12/40\n","1563/1563 - 6s - loss: 1.2837 - accuracy: 0.5405 - val_loss: 1.2649 - val_accuracy: 0.5481\n","Epoch 13/40\n","1563/1563 - 6s - loss: 1.2630 - accuracy: 0.5499 - val_loss: 1.3132 - val_accuracy: 0.5318\n","Epoch 14/40\n","1563/1563 - 6s - loss: 1.2510 - accuracy: 0.5557 - val_loss: 1.1945 - val_accuracy: 0.5742\n","Epoch 15/40\n","1563/1563 - 7s - loss: 1.2276 - accuracy: 0.5645 - val_loss: 1.2081 - val_accuracy: 0.5754\n","Epoch 16/40\n","1563/1563 - 6s - loss: 1.2139 - accuracy: 0.5712 - val_loss: 1.2046 - val_accuracy: 0.5870\n","Epoch 17/40\n","1563/1563 - 7s - loss: 1.1957 - accuracy: 0.5762 - val_loss: 1.2751 - val_accuracy: 0.5637\n","Epoch 18/40\n","1563/1563 - 6s - loss: 1.1773 - accuracy: 0.5834 - val_loss: 1.2295 - val_accuracy: 0.5744\n","Epoch 19/40\n","1563/1563 - 6s - loss: 1.1692 - accuracy: 0.5854 - val_loss: 1.2485 - val_accuracy: 0.5663\n","Epoch 20/40\n","1563/1563 - 6s - loss: 1.1567 - accuracy: 0.5908 - val_loss: 1.1519 - val_accuracy: 0.6005\n","Epoch 21/40\n","1563/1563 - 6s - loss: 1.1422 - accuracy: 0.5970 - val_loss: 1.1948 - val_accuracy: 0.5850\n","Epoch 22/40\n","1563/1563 - 6s - loss: 1.1347 - accuracy: 0.5987 - val_loss: 1.2653 - val_accuracy: 0.5750\n","Epoch 23/40\n","1563/1563 - 7s - loss: 1.1247 - accuracy: 0.6056 - val_loss: 1.2002 - val_accuracy: 0.5879\n","Epoch 24/40\n","1563/1563 - 7s - loss: 1.1104 - accuracy: 0.6096 - val_loss: 1.1098 - val_accuracy: 0.6121\n","Epoch 25/40\n","1563/1563 - 6s - loss: 1.1026 - accuracy: 0.6123 - val_loss: 1.0656 - val_accuracy: 0.6282\n","Epoch 26/40\n","1563/1563 - 6s - loss: 1.0920 - accuracy: 0.6146 - val_loss: 1.0661 - val_accuracy: 0.6258\n","Epoch 27/40\n","1563/1563 - 6s - loss: 1.0847 - accuracy: 0.6142 - val_loss: 1.2200 - val_accuracy: 0.5955\n","Epoch 28/40\n","1563/1563 - 6s - loss: 1.0748 - accuracy: 0.6214 - val_loss: 1.2337 - val_accuracy: 0.5867\n","Epoch 29/40\n","1563/1563 - 6s - loss: 1.0658 - accuracy: 0.6230 - val_loss: 1.1182 - val_accuracy: 0.6150\n","Epoch 30/40\n","1563/1563 - 6s - loss: 1.0556 - accuracy: 0.6280 - val_loss: 1.1035 - val_accuracy: 0.6297\n","Epoch 31/40\n","1563/1563 - 6s - loss: 1.0482 - accuracy: 0.6318 - val_loss: 1.0457 - val_accuracy: 0.6390\n","Epoch 32/40\n","1563/1563 - 6s - loss: 1.0428 - accuracy: 0.6324 - val_loss: 1.0446 - val_accuracy: 0.6424\n","Epoch 33/40\n","1563/1563 - 7s - loss: 1.0316 - accuracy: 0.6373 - val_loss: 1.0410 - val_accuracy: 0.6466\n","Epoch 34/40\n","1563/1563 - 6s - loss: 1.0284 - accuracy: 0.6393 - val_loss: 1.1199 - val_accuracy: 0.6281\n","Epoch 35/40\n","1563/1563 - 6s - loss: 1.0184 - accuracy: 0.6414 - val_loss: 1.0225 - val_accuracy: 0.6574\n","Epoch 36/40\n","1563/1563 - 6s - loss: 1.0161 - accuracy: 0.6431 - val_loss: 1.0054 - val_accuracy: 0.6520\n","Epoch 37/40\n","1563/1563 - 6s - loss: 1.0042 - accuracy: 0.6478 - val_loss: 1.1784 - val_accuracy: 0.6140\n","Epoch 38/40\n","1563/1563 - 6s - loss: 1.0008 - accuracy: 0.6496 - val_loss: 1.0231 - val_accuracy: 0.6541\n","Epoch 39/40\n","1563/1563 - 6s - loss: 0.9927 - accuracy: 0.6524 - val_loss: 0.9924 - val_accuracy: 0.6635\n","Epoch 40/40\n","1563/1563 - 6s - loss: 0.9828 - accuracy: 0.6556 - val_loss: 1.0017 - val_accuracy: 0.6660\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"qYsNazfvsvBk","executionInfo":{"status":"ok","timestamp":1616498480651,"user_tz":0,"elapsed":261589,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"2acd3dc2-a0be-4cb6-c76b-40e3ec5a44ac"},"source":["plot_history(history)"],"execution_count":10,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"p9Z1GJrWs3ep","executionInfo":{"status":"ok","timestamp":1616498482126,"user_tz":0,"elapsed":488,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["Aggresive2=pd.DataFrame.from_dict(history.history)\n","Aggresive2.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.3,Shift(0.3),FlipHor.csv')"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v00_-CA9s9wU","executionInfo":{"status":"ok","timestamp":1616498484105,"user_tz":0,"elapsed":2454,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"786acb34-8e67-4f4d-dd08-edc95674624d"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.3,Shift(0.3),FlipHor Model\")"],"execution_count":12,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.3,Shift(0.3),FlipHor Model/assets\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L8t13GGn0gQo","executionInfo":{"status":"ok","timestamp":1616499002234,"user_tz":0,"elapsed":452565,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"5021efe4-8b8e-4d42-ea37-cf504c79969c"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomRotation(0.3),\n","        preprocessing.RandomTranslation(height_factor=0.3, width_factor=0.3, fill_mode='reflect',interpolation='bilinear'),\n","        preprocessing.RandomFlip(\"horizontal\")\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=70, validation_data=(X_test_n,Y_test_class), verbose=2)"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Epoch 1/70\n","1563/1563 - 8s - loss: 1.9336 - accuracy: 0.2852 - val_loss: 2.0386 - val_accuracy: 0.2958\n","Epoch 2/70\n","1563/1563 - 6s - loss: 1.7460 - accuracy: 0.3655 - val_loss: 1.7194 - val_accuracy: 0.3952\n","Epoch 3/70\n","1563/1563 - 7s - loss: 1.6413 - accuracy: 0.4066 - val_loss: 1.6301 - val_accuracy: 0.4265\n","Epoch 4/70\n","1563/1563 - 6s - loss: 1.5735 - accuracy: 0.4344 - val_loss: 1.6791 - val_accuracy: 0.4212\n","Epoch 5/70\n","1563/1563 - 6s - loss: 1.5169 - accuracy: 0.4566 - val_loss: 1.5045 - val_accuracy: 0.4716\n","Epoch 6/70\n","1563/1563 - 6s - loss: 1.4662 - accuracy: 0.4744 - val_loss: 1.3927 - val_accuracy: 0.4981\n","Epoch 7/70\n","1563/1563 - 6s - loss: 1.4225 - accuracy: 0.4868 - val_loss: 1.3591 - val_accuracy: 0.5199\n","Epoch 8/70\n","1563/1563 - 6s - loss: 1.3849 - accuracy: 0.5025 - val_loss: 1.3644 - val_accuracy: 0.5231\n","Epoch 9/70\n","1563/1563 - 6s - loss: 1.3509 - accuracy: 0.5178 - val_loss: 1.3828 - val_accuracy: 0.5116\n","Epoch 10/70\n","1563/1563 - 6s - loss: 1.3257 - accuracy: 0.5269 - val_loss: 1.2928 - val_accuracy: 0.5370\n","Epoch 11/70\n","1563/1563 - 6s - loss: 1.3072 - accuracy: 0.5353 - val_loss: 1.2210 - val_accuracy: 0.5693\n","Epoch 12/70\n","1563/1563 - 6s - loss: 1.2772 - accuracy: 0.5464 - val_loss: 1.2736 - val_accuracy: 0.5618\n","Epoch 13/70\n","1563/1563 - 6s - loss: 1.2604 - accuracy: 0.5501 - val_loss: 1.1912 - val_accuracy: 0.5789\n","Epoch 14/70\n","1563/1563 - 6s - loss: 1.2453 - accuracy: 0.5601 - val_loss: 1.2931 - val_accuracy: 0.5504\n","Epoch 15/70\n","1563/1563 - 6s - loss: 1.2217 - accuracy: 0.5660 - val_loss: 1.1597 - val_accuracy: 0.5931\n","Epoch 16/70\n","1563/1563 - 6s - loss: 1.2123 - accuracy: 0.5716 - val_loss: 1.3015 - val_accuracy: 0.5650\n","Epoch 17/70\n","1563/1563 - 6s - loss: 1.1922 - accuracy: 0.5752 - val_loss: 1.1870 - val_accuracy: 0.5881\n","Epoch 18/70\n","1563/1563 - 7s - loss: 1.1811 - accuracy: 0.5815 - val_loss: 1.2754 - val_accuracy: 0.5608\n","Epoch 19/70\n","1563/1563 - 6s - loss: 1.1656 - accuracy: 0.5869 - val_loss: 1.0877 - val_accuracy: 0.6207\n","Epoch 20/70\n","1563/1563 - 7s - loss: 1.1477 - accuracy: 0.5952 - val_loss: 1.1372 - val_accuracy: 0.6094\n","Epoch 21/70\n","1563/1563 - 7s - loss: 1.1403 - accuracy: 0.5988 - val_loss: 1.1574 - val_accuracy: 0.6025\n","Epoch 22/70\n","1563/1563 - 7s - loss: 1.1272 - accuracy: 0.6046 - val_loss: 1.1151 - val_accuracy: 0.6128\n","Epoch 23/70\n","1563/1563 - 6s - loss: 1.1160 - accuracy: 0.6065 - val_loss: 1.1607 - val_accuracy: 0.6057\n","Epoch 24/70\n","1563/1563 - 6s - loss: 1.1064 - accuracy: 0.6104 - val_loss: 1.1652 - val_accuracy: 0.6019\n","Epoch 25/70\n","1563/1563 - 6s - loss: 1.0992 - accuracy: 0.6129 - val_loss: 1.0223 - val_accuracy: 0.6502\n","Epoch 26/70\n","1563/1563 - 6s - loss: 1.0868 - accuracy: 0.6157 - val_loss: 1.1144 - val_accuracy: 0.6281\n","Epoch 27/70\n","1563/1563 - 6s - loss: 1.0722 - accuracy: 0.6234 - val_loss: 1.1387 - val_accuracy: 0.6136\n","Epoch 28/70\n","1563/1563 - 6s - loss: 1.0687 - accuracy: 0.6228 - val_loss: 1.0978 - val_accuracy: 0.6300\n","Epoch 29/70\n","1563/1563 - 7s - loss: 1.0548 - accuracy: 0.6293 - val_loss: 1.0922 - val_accuracy: 0.6311\n","Epoch 30/70\n","1563/1563 - 6s - loss: 1.0514 - accuracy: 0.6304 - val_loss: 1.0527 - val_accuracy: 0.6433\n","Epoch 31/70\n","1563/1563 - 6s - loss: 1.0385 - accuracy: 0.6341 - val_loss: 1.0617 - val_accuracy: 0.6402\n","Epoch 32/70\n","1563/1563 - 6s - loss: 1.0294 - accuracy: 0.6384 - val_loss: 0.9748 - val_accuracy: 0.6621\n","Epoch 33/70\n","1563/1563 - 6s - loss: 1.0266 - accuracy: 0.6411 - val_loss: 1.0668 - val_accuracy: 0.6460\n","Epoch 34/70\n","1563/1563 - 6s - loss: 1.0205 - accuracy: 0.6418 - val_loss: 0.9945 - val_accuracy: 0.6593\n","Epoch 35/70\n","1563/1563 - 6s - loss: 1.0121 - accuracy: 0.6454 - val_loss: 1.0936 - val_accuracy: 0.6379\n","Epoch 36/70\n","1563/1563 - 6s - loss: 1.0053 - accuracy: 0.6461 - val_loss: 1.0926 - val_accuracy: 0.6331\n","Epoch 37/70\n","1563/1563 - 6s - loss: 0.9942 - accuracy: 0.6508 - val_loss: 1.0185 - val_accuracy: 0.6599\n","Epoch 38/70\n","1563/1563 - 6s - loss: 0.9886 - accuracy: 0.6522 - val_loss: 1.0219 - val_accuracy: 0.6611\n","Epoch 39/70\n","1563/1563 - 7s - loss: 0.9814 - accuracy: 0.6565 - val_loss: 1.0485 - val_accuracy: 0.6520\n","Epoch 40/70\n","1563/1563 - 6s - loss: 0.9785 - accuracy: 0.6578 - val_loss: 1.0345 - val_accuracy: 0.6518\n","Epoch 41/70\n","1563/1563 - 6s - loss: 0.9736 - accuracy: 0.6591 - val_loss: 1.0278 - val_accuracy: 0.6541\n","Epoch 42/70\n","1563/1563 - 6s - loss: 0.9707 - accuracy: 0.6575 - val_loss: 0.9546 - val_accuracy: 0.6723\n","Epoch 43/70\n","1563/1563 - 6s - loss: 0.9651 - accuracy: 0.6613 - val_loss: 1.0309 - val_accuracy: 0.6607\n","Epoch 44/70\n","1563/1563 - 7s - loss: 0.9563 - accuracy: 0.6637 - val_loss: 0.9632 - val_accuracy: 0.6789\n","Epoch 45/70\n","1563/1563 - 6s - loss: 0.9490 - accuracy: 0.6670 - val_loss: 1.1060 - val_accuracy: 0.6436\n","Epoch 46/70\n","1563/1563 - 6s - loss: 0.9474 - accuracy: 0.6680 - val_loss: 0.9714 - val_accuracy: 0.6801\n","Epoch 47/70\n","1563/1563 - 6s - loss: 0.9405 - accuracy: 0.6719 - val_loss: 0.9960 - val_accuracy: 0.6687\n","Epoch 48/70\n","1563/1563 - 6s - loss: 0.9389 - accuracy: 0.6718 - val_loss: 0.9968 - val_accuracy: 0.6680\n","Epoch 49/70\n","1563/1563 - 6s - loss: 0.9345 - accuracy: 0.6739 - val_loss: 0.9823 - val_accuracy: 0.6687\n","Epoch 50/70\n","1563/1563 - 6s - loss: 0.9336 - accuracy: 0.6750 - val_loss: 1.0535 - val_accuracy: 0.6528\n","Epoch 51/70\n","1563/1563 - 6s - loss: 0.9199 - accuracy: 0.6788 - val_loss: 0.9834 - val_accuracy: 0.6741\n","Epoch 52/70\n","1563/1563 - 6s - loss: 0.9168 - accuracy: 0.6753 - val_loss: 0.9573 - val_accuracy: 0.6819\n","Epoch 53/70\n","1563/1563 - 6s - loss: 0.9151 - accuracy: 0.6805 - val_loss: 0.9557 - val_accuracy: 0.6853\n","Epoch 54/70\n","1563/1563 - 6s - loss: 0.9112 - accuracy: 0.6810 - val_loss: 0.9746 - val_accuracy: 0.6765\n","Epoch 55/70\n","1563/1563 - 6s - loss: 0.9076 - accuracy: 0.6821 - val_loss: 0.9525 - val_accuracy: 0.6850\n","Epoch 56/70\n","1563/1563 - 6s - loss: 0.9029 - accuracy: 0.6839 - val_loss: 0.9410 - val_accuracy: 0.6853\n","Epoch 57/70\n","1563/1563 - 6s - loss: 0.8985 - accuracy: 0.6852 - val_loss: 0.9425 - val_accuracy: 0.6850\n","Epoch 58/70\n","1563/1563 - 6s - loss: 0.8959 - accuracy: 0.6870 - val_loss: 0.9920 - val_accuracy: 0.6726\n","Epoch 59/70\n","1563/1563 - 6s - loss: 0.8896 - accuracy: 0.6906 - val_loss: 0.9740 - val_accuracy: 0.6747\n","Epoch 60/70\n","1563/1563 - 7s - loss: 0.8856 - accuracy: 0.6890 - val_loss: 0.9094 - val_accuracy: 0.6899\n","Epoch 61/70\n","1563/1563 - 6s - loss: 0.8795 - accuracy: 0.6919 - val_loss: 0.9503 - val_accuracy: 0.6859\n","Epoch 62/70\n","1563/1563 - 6s - loss: 0.8809 - accuracy: 0.6918 - val_loss: 0.9616 - val_accuracy: 0.6859\n","Epoch 63/70\n","1563/1563 - 6s - loss: 0.8758 - accuracy: 0.6941 - val_loss: 1.0541 - val_accuracy: 0.6616\n","Epoch 64/70\n","1563/1563 - 7s - loss: 0.8762 - accuracy: 0.6942 - val_loss: 0.9492 - val_accuracy: 0.6873\n","Epoch 65/70\n","1563/1563 - 6s - loss: 0.8737 - accuracy: 0.6912 - val_loss: 0.9572 - val_accuracy: 0.6784\n","Epoch 66/70\n","1563/1563 - 6s - loss: 0.8683 - accuracy: 0.6965 - val_loss: 0.9763 - val_accuracy: 0.6790\n","Epoch 67/70\n","1563/1563 - 7s - loss: 0.8658 - accuracy: 0.6954 - val_loss: 0.9584 - val_accuracy: 0.6815\n","Epoch 68/70\n","1563/1563 - 6s - loss: 0.8597 - accuracy: 0.6997 - val_loss: 0.9258 - val_accuracy: 0.7000\n","Epoch 69/70\n","1563/1563 - 7s - loss: 0.8554 - accuracy: 0.7021 - val_loss: 0.9183 - val_accuracy: 0.6932\n","Epoch 70/70\n","1563/1563 - 7s - loss: 0.8558 - accuracy: 0.6999 - val_loss: 0.9228 - val_accuracy: 0.6991\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"ki3UksNx0hWm","executionInfo":{"status":"ok","timestamp":1616499003406,"user_tz":0,"elapsed":518,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"862d4ac1-9587-4fb3-e36d-788bffb86b31"},"source":["plot_history(history)"],"execution_count":14,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"DhMoGneu0le4","executionInfo":{"status":"ok","timestamp":1616499003583,"user_tz":0,"elapsed":683,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["Aggresive3=pd.DataFrame.from_dict(history.history)\n","Aggresive3.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.3,Shift(0.3),FlipHor - 70 epochs.csv')"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MwoTdU4T0nVH","executionInfo":{"status":"ok","timestamp":1616499006509,"user_tz":0,"elapsed":2350,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"2a98f532-bd98-47e2-b45b-26974b6ce7b6"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.3,Shift(0.3),FlipHor - 70 epochs Model\")"],"execution_count":16,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.3,Shift(0.3),FlipHor - 70 epochs Model/assets\n"],"name":"stdout"}]}]}