{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Rotation Augmentation - 0.6,0.3,0.1","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","*  First, train the given default model without any data augmentation. Then define two data augmentation strategies (one more aggressive than the other) and train the model with data augmentation. Clearly state the two augmentation strategies you apply (i.e., the specific transformations). Discuss the training and validation loss curves for the two data augmentation strategies along with the original run without data augmentation. Attach in the appendix those training and validation curves. Report in a table the best validation accuracy obtained for the three runs (no data augmentation, data augmentation 1, data augmentation 2).\n","\n","*  Without using any data augmentation, analyze the effect of using Dropout in the model. Carry out the same analysis for Batch Normalization. Finally, combine both. Report in the same table as in the data augmentation task the best validation accuracy for each of the three settings (baseline + Dropout, baseline + Batch Normalization, baseline + Batch Normalization + Dropout). The performance will vary depending on where the Dropout layers and Batch Normalization layers, so state clearly where you added the layers, and what rate you used for the Dropout layers. Discuss the results.\n","\n","* Using the default model/hyperparameters and no data augmentation, report the best validation accuracy when using `zeros` for the kernel initialization. Report the performance in the same table as in the dropout/batch normalization/data augmentation tasks. Discuss the results that you obtained.\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"id":"2XmUhkWPhgMQ"},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AlUxMjUahjDA","executionInfo":{"status":"ok","timestamp":1616493575643,"user_tz":0,"elapsed":18518,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"6a52a2d5-3798-49f8-c99f-60ffffbc2adf"},"source":["\n","drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," Content.ipynb\t\t\t      dataNoAug.csv\t       NoAugModel\n","'Copy of 03_Network_Training.ipynb'  'No Augmentation.ipynb'\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616494264802,"user_tz":0,"elapsed":469767,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"3b87751b-3013-44d9-d5b1-dc24d75327ee"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        # preprocessing.RandomFlip(\"vertical\"),\n","        preprocessing.RandomRotation(0.6)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class),verbose=2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Image shape: (32, 32, 3)\n","Total number of training samples: 50000\n","Total number of validation samples: 10000\n","Epoch 1/40\n","1563/1563 - 13s - loss: 1.8654 - accuracy: 0.3184 - val_loss: 1.7011 - val_accuracy: 0.3831\n","Epoch 2/40\n","1563/1563 - 12s - loss: 1.6185 - accuracy: 0.4194 - val_loss: 1.6501 - val_accuracy: 0.4154\n","Epoch 3/40\n","1563/1563 - 12s - loss: 1.4999 - accuracy: 0.4648 - val_loss: 1.5312 - val_accuracy: 0.4527\n","Epoch 4/40\n","1563/1563 - 12s - loss: 1.4120 - accuracy: 0.4955 - val_loss: 1.4896 - val_accuracy: 0.4728\n","Epoch 5/40\n","1563/1563 - 12s - loss: 1.3449 - accuracy: 0.5203 - val_loss: 1.5596 - val_accuracy: 0.4632\n","Epoch 6/40\n","1563/1563 - 12s - loss: 1.2884 - accuracy: 0.5399 - val_loss: 1.4766 - val_accuracy: 0.4915\n","Epoch 7/40\n","1563/1563 - 12s - loss: 1.2402 - accuracy: 0.5559 - val_loss: 1.3619 - val_accuracy: 0.5230\n","Epoch 8/40\n","1563/1563 - 12s - loss: 1.2022 - accuracy: 0.5717 - val_loss: 1.3296 - val_accuracy: 0.5320\n","Epoch 9/40\n","1563/1563 - 12s - loss: 1.1683 - accuracy: 0.5843 - val_loss: 1.2346 - val_accuracy: 0.5602\n","Epoch 10/40\n","1563/1563 - 12s - loss: 1.1359 - accuracy: 0.5930 - val_loss: 1.2491 - val_accuracy: 0.5535\n","Epoch 11/40\n","1563/1563 - 12s - loss: 1.1120 - accuracy: 0.6057 - val_loss: 1.2160 - val_accuracy: 0.5734\n","Epoch 12/40\n","1563/1563 - 12s - loss: 1.0882 - accuracy: 0.6121 - val_loss: 1.1718 - val_accuracy: 0.5861\n","Epoch 13/40\n","1563/1563 - 12s - loss: 1.0642 - accuracy: 0.6225 - val_loss: 1.1968 - val_accuracy: 0.5763\n","Epoch 14/40\n","1563/1563 - 12s - loss: 1.0494 - accuracy: 0.6264 - val_loss: 1.1296 - val_accuracy: 0.5938\n","Epoch 15/40\n","1563/1563 - 12s - loss: 1.0248 - accuracy: 0.6370 - val_loss: 1.1718 - val_accuracy: 0.5969\n","Epoch 16/40\n","1563/1563 - 12s - loss: 1.0100 - accuracy: 0.6445 - val_loss: 1.1277 - val_accuracy: 0.6031\n","Epoch 17/40\n","1563/1563 - 12s - loss: 0.9923 - accuracy: 0.6492 - val_loss: 1.1613 - val_accuracy: 0.6006\n","Epoch 18/40\n","1563/1563 - 12s - loss: 0.9741 - accuracy: 0.6544 - val_loss: 1.1200 - val_accuracy: 0.6128\n","Epoch 19/40\n","1563/1563 - 12s - loss: 0.9615 - accuracy: 0.6603 - val_loss: 1.0983 - val_accuracy: 0.6191\n","Epoch 20/40\n","1563/1563 - 12s - loss: 0.9480 - accuracy: 0.6661 - val_loss: 1.1066 - val_accuracy: 0.6151\n","Epoch 21/40\n","1563/1563 - 12s - loss: 0.9364 - accuracy: 0.6693 - val_loss: 1.1947 - val_accuracy: 0.5862\n","Epoch 22/40\n","1563/1563 - 12s - loss: 0.9196 - accuracy: 0.6777 - val_loss: 1.0923 - val_accuracy: 0.6222\n","Epoch 23/40\n","1563/1563 - 12s - loss: 0.9065 - accuracy: 0.6814 - val_loss: 1.0710 - val_accuracy: 0.6355\n","Epoch 24/40\n","1563/1563 - 12s - loss: 0.8987 - accuracy: 0.6829 - val_loss: 1.0953 - val_accuracy: 0.6265\n","Epoch 25/40\n","1563/1563 - 12s - loss: 0.8836 - accuracy: 0.6874 - val_loss: 1.0239 - val_accuracy: 0.6537\n","Epoch 26/40\n","1563/1563 - 12s - loss: 0.8785 - accuracy: 0.6903 - val_loss: 1.0326 - val_accuracy: 0.6456\n","Epoch 27/40\n","1563/1563 - 12s - loss: 0.8619 - accuracy: 0.6951 - val_loss: 1.0202 - val_accuracy: 0.6387\n","Epoch 28/40\n","1563/1563 - 12s - loss: 0.8532 - accuracy: 0.6990 - val_loss: 1.0794 - val_accuracy: 0.6348\n","Epoch 29/40\n","1563/1563 - 12s - loss: 0.8434 - accuracy: 0.7011 - val_loss: 1.1006 - val_accuracy: 0.6310\n","Epoch 30/40\n","1563/1563 - 12s - loss: 0.8361 - accuracy: 0.7071 - val_loss: 1.0299 - val_accuracy: 0.6480\n","Epoch 31/40\n","1563/1563 - 12s - loss: 0.8273 - accuracy: 0.7092 - val_loss: 0.9750 - val_accuracy: 0.6645\n","Epoch 32/40\n","1563/1563 - 12s - loss: 0.8195 - accuracy: 0.7135 - val_loss: 0.9856 - val_accuracy: 0.6620\n","Epoch 33/40\n","1563/1563 - 12s - loss: 0.8081 - accuracy: 0.7147 - val_loss: 1.0520 - val_accuracy: 0.6464\n","Epoch 34/40\n","1563/1563 - 12s - loss: 0.8054 - accuracy: 0.7174 - val_loss: 1.0185 - val_accuracy: 0.6503\n","Epoch 35/40\n","1563/1563 - 12s - loss: 0.7971 - accuracy: 0.7216 - val_loss: 1.0104 - val_accuracy: 0.6600\n","Epoch 36/40\n","1563/1563 - 12s - loss: 0.7883 - accuracy: 0.7236 - val_loss: 1.0543 - val_accuracy: 0.6440\n","Epoch 37/40\n","1563/1563 - 12s - loss: 0.7768 - accuracy: 0.7283 - val_loss: 0.9961 - val_accuracy: 0.6642\n","Epoch 38/40\n","1563/1563 - 12s - loss: 0.7722 - accuracy: 0.7285 - val_loss: 1.0192 - val_accuracy: 0.6551\n","Epoch 39/40\n","1563/1563 - 12s - loss: 0.7639 - accuracy: 0.7327 - val_loss: 0.9854 - val_accuracy: 0.6711\n","Epoch 40/40\n","1563/1563 - 12s - loss: 0.7600 - accuracy: 0.7354 - val_loss: 0.9939 - val_accuracy: 0.6675\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"z69lVZOTioqN","executionInfo":{"status":"ok","timestamp":1616494385538,"user_tz":0,"elapsed":941,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"ad7bc33b-cb85-4ca5-93ac-3984f3dd7ffb"},"source":["plot_history(history)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Doq4tr97isal"},"source":["rot06=pd.DataFrame.from_dict(history.history)\n","rot06.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.6Model.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_YkajyqOikNM","executionInfo":{"status":"ok","timestamp":1616494527398,"user_tz":0,"elapsed":2308,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"bb2644ee-7566-47df-d5ec-c1b07f6c51a8"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation 0.6 Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation 0.6 Model/assets\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9OpNSXEdi-Pm","executionInfo":{"status":"ok","timestamp":1616495293123,"user_tz":0,"elapsed":468113,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"49b5615c-bba0-4173-8ad9-31f5136f1733"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        # preprocessing.RandomFlip(\"vertical\"),\n","        preprocessing.RandomRotation(0.1)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history2 = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class),verbose=2)\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 13s - loss: 1.6503 - accuracy: 0.3989 - val_loss: 1.3838 - val_accuracy: 0.5083\n","Epoch 2/40\n","1563/1563 - 12s - loss: 1.3408 - accuracy: 0.5210 - val_loss: 1.2259 - val_accuracy: 0.5611\n","Epoch 3/40\n","1563/1563 - 12s - loss: 1.2103 - accuracy: 0.5714 - val_loss: 1.1360 - val_accuracy: 0.6080\n","Epoch 4/40\n","1563/1563 - 12s - loss: 1.1207 - accuracy: 0.6021 - val_loss: 1.0422 - val_accuracy: 0.6327\n","Epoch 5/40\n","1563/1563 - 12s - loss: 1.0516 - accuracy: 0.6301 - val_loss: 1.0176 - val_accuracy: 0.6491\n","Epoch 6/40\n","1563/1563 - 12s - loss: 0.9974 - accuracy: 0.6495 - val_loss: 0.9836 - val_accuracy: 0.6604\n","Epoch 7/40\n","1563/1563 - 12s - loss: 0.9476 - accuracy: 0.6650 - val_loss: 0.9553 - val_accuracy: 0.6642\n","Epoch 8/40\n","1563/1563 - 12s - loss: 0.8976 - accuracy: 0.6830 - val_loss: 0.8780 - val_accuracy: 0.6946\n","Epoch 9/40\n","1563/1563 - 12s - loss: 0.8597 - accuracy: 0.6988 - val_loss: 0.8219 - val_accuracy: 0.7186\n","Epoch 10/40\n","1563/1563 - 12s - loss: 0.8263 - accuracy: 0.7099 - val_loss: 0.8714 - val_accuracy: 0.7021\n","Epoch 11/40\n","1563/1563 - 12s - loss: 0.7895 - accuracy: 0.7234 - val_loss: 0.8144 - val_accuracy: 0.7219\n","Epoch 12/40\n","1563/1563 - 12s - loss: 0.7631 - accuracy: 0.7343 - val_loss: 0.8421 - val_accuracy: 0.7147\n","Epoch 13/40\n","1563/1563 - 12s - loss: 0.7346 - accuracy: 0.7440 - val_loss: 0.7556 - val_accuracy: 0.7416\n","Epoch 14/40\n","1563/1563 - 12s - loss: 0.7096 - accuracy: 0.7529 - val_loss: 0.7161 - val_accuracy: 0.7565\n","Epoch 15/40\n","1563/1563 - 12s - loss: 0.6884 - accuracy: 0.7591 - val_loss: 0.7321 - val_accuracy: 0.7493\n","Epoch 16/40\n","1563/1563 - 12s - loss: 0.6621 - accuracy: 0.7702 - val_loss: 0.7786 - val_accuracy: 0.7359\n","Epoch 17/40\n","1563/1563 - 12s - loss: 0.6428 - accuracy: 0.7743 - val_loss: 0.7070 - val_accuracy: 0.7579\n","Epoch 18/40\n","1563/1563 - 12s - loss: 0.6196 - accuracy: 0.7845 - val_loss: 0.7174 - val_accuracy: 0.7607\n","Epoch 19/40\n","1563/1563 - 12s - loss: 0.6018 - accuracy: 0.7891 - val_loss: 0.6827 - val_accuracy: 0.7666\n","Epoch 20/40\n","1563/1563 - 12s - loss: 0.5841 - accuracy: 0.7948 - val_loss: 0.7634 - val_accuracy: 0.7501\n","Epoch 21/40\n","1563/1563 - 12s - loss: 0.5636 - accuracy: 0.8033 - val_loss: 0.6772 - val_accuracy: 0.7774\n","Epoch 22/40\n","1563/1563 - 12s - loss: 0.5517 - accuracy: 0.8091 - val_loss: 0.6770 - val_accuracy: 0.7759\n","Epoch 23/40\n","1563/1563 - 12s - loss: 0.5331 - accuracy: 0.8143 - val_loss: 0.6700 - val_accuracy: 0.7758\n","Epoch 24/40\n","1563/1563 - 12s - loss: 0.5167 - accuracy: 0.8186 - val_loss: 0.7036 - val_accuracy: 0.7726\n","Epoch 25/40\n","1563/1563 - 12s - loss: 0.5031 - accuracy: 0.8242 - val_loss: 0.6660 - val_accuracy: 0.7811\n","Epoch 26/40\n","1563/1563 - 12s - loss: 0.4906 - accuracy: 0.8280 - val_loss: 0.7174 - val_accuracy: 0.7727\n","Epoch 27/40\n","1563/1563 - 12s - loss: 0.4761 - accuracy: 0.8325 - val_loss: 0.6644 - val_accuracy: 0.7867\n","Epoch 28/40\n","1563/1563 - 12s - loss: 0.4630 - accuracy: 0.8380 - val_loss: 0.6619 - val_accuracy: 0.7874\n","Epoch 29/40\n","1563/1563 - 12s - loss: 0.4452 - accuracy: 0.8437 - val_loss: 0.7396 - val_accuracy: 0.7734\n","Epoch 30/40\n","1563/1563 - 12s - loss: 0.4357 - accuracy: 0.8476 - val_loss: 0.7045 - val_accuracy: 0.7788\n","Epoch 31/40\n","1563/1563 - 12s - loss: 0.4288 - accuracy: 0.8497 - val_loss: 0.6680 - val_accuracy: 0.7922\n","Epoch 32/40\n","1563/1563 - 12s - loss: 0.4092 - accuracy: 0.8571 - val_loss: 0.6564 - val_accuracy: 0.7906\n","Epoch 33/40\n","1563/1563 - 12s - loss: 0.4029 - accuracy: 0.8568 - val_loss: 0.6910 - val_accuracy: 0.7897\n","Epoch 34/40\n","1563/1563 - 12s - loss: 0.3914 - accuracy: 0.8628 - val_loss: 0.6795 - val_accuracy: 0.7939\n","Epoch 35/40\n","1563/1563 - 12s - loss: 0.3785 - accuracy: 0.8673 - val_loss: 0.6849 - val_accuracy: 0.7908\n","Epoch 36/40\n","1563/1563 - 12s - loss: 0.3712 - accuracy: 0.8693 - val_loss: 0.7224 - val_accuracy: 0.7807\n","Epoch 37/40\n","1563/1563 - 12s - loss: 0.3611 - accuracy: 0.8718 - val_loss: 0.7029 - val_accuracy: 0.7889\n","Epoch 38/40\n","1563/1563 - 12s - loss: 0.3512 - accuracy: 0.8759 - val_loss: 0.6907 - val_accuracy: 0.7911\n","Epoch 39/40\n","1563/1563 - 12s - loss: 0.3389 - accuracy: 0.8810 - val_loss: 0.7401 - val_accuracy: 0.7900\n","Epoch 40/40\n","1563/1563 - 12s - loss: 0.3344 - accuracy: 0.8837 - val_loss: 0.7098 - val_accuracy: 0.7904\n","Model: \"sequential_27\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","sequential_26 (Sequential)   (None, 32, 32, 3)         0         \n","_________________________________________________________________\n","conv2d_48 (Conv2D)           (None, 32, 32, 32)        896       \n","_________________________________________________________________\n","activation_60 (Activation)   (None, 32, 32, 32)        0         \n","_________________________________________________________________\n","max_pooling2d_36 (MaxPooling (None, 16, 16, 32)        0         \n","_________________________________________________________________\n","conv2d_49 (Conv2D)           (None, 16, 16, 64)        18496     \n","_________________________________________________________________\n","activation_61 (Activation)   (None, 16, 16, 64)        0         \n","_________________________________________________________________\n","max_pooling2d_37 (MaxPooling (None, 8, 8, 64)          0         \n","_________________________________________________________________\n","conv2d_50 (Conv2D)           (None, 8, 8, 128)         73856     \n","_________________________________________________________________\n","activation_62 (Activation)   (None, 8, 8, 128)         0         \n","_________________________________________________________________\n","max_pooling2d_38 (MaxPooling (None, 4, 4, 128)         0         \n","_________________________________________________________________\n","conv2d_51 (Conv2D)           (None, 4, 4, 256)         295168    \n","_________________________________________________________________\n","activation_63 (Activation)   (None, 4, 4, 256)         0         \n","_________________________________________________________________\n","global_average_pooling2d_12  (None, 256)               0         \n","_________________________________________________________________\n","dense_12 (Dense)             (None, 10)                2570      \n","_________________________________________________________________\n","activation_64 (Activation)   (None, 10)                0         \n","=================================================================\n","Total params: 390,986\n","Trainable params: 390,986\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"wnuies45jHR-","executionInfo":{"status":"ok","timestamp":1616495626066,"user_tz":0,"elapsed":1271,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"d0b28612-591a-4e7d-d752-188a4dfbb70a"},"source":["plot_history(history2)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"QPXvt9JSjJLm"},"source":["Rotation01=pd.DataFrame.from_dict(history2.history)\n","Rotation01.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.1Model.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L8fzW2yzjSSH","executionInfo":{"status":"ok","timestamp":1616495673939,"user_tz":0,"elapsed":2326,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"4e081199-eaa8-4be7-a110-af0560397c05"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation 0.1 Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation 0.1 Model/assets\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q3nt9y-1pwJ5","executionInfo":{"status":"ok","timestamp":1616496180296,"user_tz":0,"elapsed":464391,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"4cc8140c-c7d7-4543-edc9-085e54ba426c"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        # preprocessing.RandomFlip(\"vertical\"),\n","        preprocessing.RandomRotation(0.3)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = Adam(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history2 = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class),verbose=2)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 13s - loss: 1.8206 - accuracy: 0.3374 - val_loss: 1.6275 - val_accuracy: 0.4236\n","Epoch 2/40\n","1563/1563 - 12s - loss: 1.5645 - accuracy: 0.4382 - val_loss: 1.5392 - val_accuracy: 0.4547\n","Epoch 3/40\n","1563/1563 - 12s - loss: 1.4402 - accuracy: 0.4823 - val_loss: 1.4678 - val_accuracy: 0.4913\n","Epoch 4/40\n","1563/1563 - 12s - loss: 1.3583 - accuracy: 0.5156 - val_loss: 1.4116 - val_accuracy: 0.5068\n","Epoch 5/40\n","1563/1563 - 12s - loss: 1.2923 - accuracy: 0.5353 - val_loss: 1.3750 - val_accuracy: 0.5168\n","Epoch 6/40\n","1563/1563 - 12s - loss: 1.2287 - accuracy: 0.5622 - val_loss: 1.2812 - val_accuracy: 0.5668\n","Epoch 7/40\n","1563/1563 - 12s - loss: 1.1712 - accuracy: 0.5830 - val_loss: 1.2004 - val_accuracy: 0.5753\n","Epoch 8/40\n","1563/1563 - 11s - loss: 1.1321 - accuracy: 0.5958 - val_loss: 1.1375 - val_accuracy: 0.5994\n","Epoch 9/40\n","1563/1563 - 11s - loss: 1.0957 - accuracy: 0.6120 - val_loss: 1.2695 - val_accuracy: 0.5715\n","Epoch 10/40\n","1563/1563 - 12s - loss: 1.0629 - accuracy: 0.6227 - val_loss: 1.1995 - val_accuracy: 0.5948\n","Epoch 11/40\n","1563/1563 - 11s - loss: 1.0382 - accuracy: 0.6323 - val_loss: 1.0738 - val_accuracy: 0.6156\n","Epoch 12/40\n","1563/1563 - 12s - loss: 1.0123 - accuracy: 0.6404 - val_loss: 1.0849 - val_accuracy: 0.6284\n","Epoch 13/40\n","1563/1563 - 11s - loss: 0.9876 - accuracy: 0.6507 - val_loss: 1.1032 - val_accuracy: 0.6193\n","Epoch 14/40\n","1563/1563 - 12s - loss: 0.9679 - accuracy: 0.6583 - val_loss: 1.0476 - val_accuracy: 0.6391\n","Epoch 15/40\n","1563/1563 - 12s - loss: 0.9519 - accuracy: 0.6631 - val_loss: 1.0697 - val_accuracy: 0.6358\n","Epoch 16/40\n","1563/1563 - 12s - loss: 0.9279 - accuracy: 0.6720 - val_loss: 1.0437 - val_accuracy: 0.6460\n","Epoch 17/40\n","1563/1563 - 12s - loss: 0.9081 - accuracy: 0.6788 - val_loss: 0.9781 - val_accuracy: 0.6629\n","Epoch 18/40\n","1563/1563 - 12s - loss: 0.8961 - accuracy: 0.6840 - val_loss: 0.9967 - val_accuracy: 0.6594\n","Epoch 19/40\n","1563/1563 - 12s - loss: 0.8794 - accuracy: 0.6908 - val_loss: 0.9309 - val_accuracy: 0.6758\n","Epoch 20/40\n","1563/1563 - 12s - loss: 0.8681 - accuracy: 0.6956 - val_loss: 0.9927 - val_accuracy: 0.6618\n","Epoch 21/40\n","1563/1563 - 12s - loss: 0.8548 - accuracy: 0.6993 - val_loss: 0.9687 - val_accuracy: 0.6670\n","Epoch 22/40\n","1563/1563 - 12s - loss: 0.8365 - accuracy: 0.7052 - val_loss: 0.9877 - val_accuracy: 0.6696\n","Epoch 23/40\n","1563/1563 - 12s - loss: 0.8301 - accuracy: 0.7076 - val_loss: 0.9652 - val_accuracy: 0.6770\n","Epoch 24/40\n","1563/1563 - 12s - loss: 0.8112 - accuracy: 0.7122 - val_loss: 0.9075 - val_accuracy: 0.6887\n","Epoch 25/40\n","1563/1563 - 12s - loss: 0.7994 - accuracy: 0.7191 - val_loss: 0.9255 - val_accuracy: 0.6875\n","Epoch 26/40\n","1563/1563 - 12s - loss: 0.7904 - accuracy: 0.7239 - val_loss: 0.8901 - val_accuracy: 0.7000\n","Epoch 27/40\n","1563/1563 - 11s - loss: 0.7772 - accuracy: 0.7266 - val_loss: 0.8540 - val_accuracy: 0.7112\n","Epoch 28/40\n","1563/1563 - 12s - loss: 0.7705 - accuracy: 0.7288 - val_loss: 0.9058 - val_accuracy: 0.6999\n","Epoch 29/40\n","1563/1563 - 11s - loss: 0.7584 - accuracy: 0.7333 - val_loss: 0.8331 - val_accuracy: 0.7169\n","Epoch 30/40\n","1563/1563 - 12s - loss: 0.7507 - accuracy: 0.7377 - val_loss: 0.9161 - val_accuracy: 0.7020\n","Epoch 31/40\n","1563/1563 - 12s - loss: 0.7404 - accuracy: 0.7406 - val_loss: 0.9014 - val_accuracy: 0.7009\n","Epoch 32/40\n","1563/1563 - 12s - loss: 0.7289 - accuracy: 0.7450 - val_loss: 0.8868 - val_accuracy: 0.7065\n","Epoch 33/40\n","1563/1563 - 12s - loss: 0.7197 - accuracy: 0.7485 - val_loss: 0.8508 - val_accuracy: 0.7087\n","Epoch 34/40\n","1563/1563 - 12s - loss: 0.7111 - accuracy: 0.7516 - val_loss: 0.8756 - val_accuracy: 0.7051\n","Epoch 35/40\n","1563/1563 - 12s - loss: 0.7040 - accuracy: 0.7542 - val_loss: 0.8062 - val_accuracy: 0.7273\n","Epoch 36/40\n","1563/1563 - 12s - loss: 0.6947 - accuracy: 0.7564 - val_loss: 0.9294 - val_accuracy: 0.6947\n","Epoch 37/40\n","1563/1563 - 12s - loss: 0.6840 - accuracy: 0.7609 - val_loss: 0.8286 - val_accuracy: 0.7250\n","Epoch 38/40\n","1563/1563 - 12s - loss: 0.6792 - accuracy: 0.7616 - val_loss: 0.8342 - val_accuracy: 0.7150\n","Epoch 39/40\n","1563/1563 - 12s - loss: 0.6683 - accuracy: 0.7629 - val_loss: 0.8639 - val_accuracy: 0.7199\n","Epoch 40/40\n","1563/1563 - 12s - loss: 0.6643 - accuracy: 0.7698 - val_loss: 0.8805 - val_accuracy: 0.7137\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"C4n5v43Gp0XA","executionInfo":{"status":"ok","timestamp":1616496181418,"user_tz":0,"elapsed":1105,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"332bdd68-2697-4da8-97de-3f9b6a12acfb"},"source":["plot_history(history2)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"sqJWFrHGp2Dr"},"source":["Rotation03=pd.DataFrame.from_dict(history2.history)\n","Rotation03.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation0.3Model.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"S-p7YRc4p5oF","executionInfo":{"status":"ok","timestamp":1616496185087,"user_tz":0,"elapsed":2441,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"6c17b18f-07cb-43e7-b286-5c39e763b3ad"},"source":["model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation 0.3 Model\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/Rotation 0.3 Model/assets\n"],"name":"stdout"}]}]}