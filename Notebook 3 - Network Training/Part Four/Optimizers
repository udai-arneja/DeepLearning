{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Optimizers","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/03_Network_Training.ipynb","timestamp":1615241289804}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"id":"awkdj4xOqsZL","executionInfo":{"status":"ok","timestamp":1616507623444,"user_tz":0,"elapsed":769,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"boROCEDxr6P4","executionInfo":{"status":"ok","timestamp":1616507626896,"user_tz":0,"elapsed":1329,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"34ab8160-06db-4bb8-ff2f-ad6ddb3404ee"},"source":["drive.mount('/content/drive')\n","os.chdir(\"drive/My Drive/Deep Learning 2021/Notebook Three - Network Training\")\n","!ls"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"," Content.ipynb\t   Optimizers  'Part One'    'Part Two'\n"," Initialisations  'Part Four'  'Part Three'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"nUpwc1fHxF4N"},"source":["# Coursework\n","\n","### Task 1: Tuning a Classification Model\n","In a machine learning problem, and especially when using a deep learning approach, finding the right set of hyperparameters, the right data augmentation strategy, or a good regularization method can make the difference between a model that performs poorly and a model with great accuracy. \n","\n","For this exercise, you will be training a CNN to perform classification in CIFAR-10 (we use the official test set, which is why the variables are called `x_test` and `y_test`, as our validation set) and will analyze the impact of some of the most important elements presented in this tutorial. \n","\n","Use the CNN we give in the code below, along with the given optimizer and number of training epochs as the default setting. Only modify the given CNN architecture to add Dropout or Batch Normalization layers when explicitly stated. Use 40 epochs to plot all of your curves. However, you can train for more epochs to find your best validation performance if your network has not finished training in those 40 epochs.\n","\n","**Report:**\n","\n","* Without using any data augmentation, analyze the effect of using Dropout in the model. Carry out the same analysis for Batch Normalization. Finally, combine both. Report in the same table as in the data augmentation task the best validation accuracy for each of the three settings (baseline + Dropout, baseline + Batch Normalization, baseline + Batch Normalization + Dropout). The performance will vary depending on where the Dropout layers and Batch Normalization layers, so state clearly where you added the layers, and what rate you used for the Dropout layers. Discuss the results.\n","\n","\n","*  Using the default model and no data augmentation, change the optimizer to SGD and train it with learning rates of `3e-3`, `1e-3` and `3e-4`. Report in a figure the training and validation loss for the three learning rate values and discuss the figure."]},{"cell_type":"code","metadata":{"id":"g3kbDP402H_u","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1616507364842,"user_tz":0,"elapsed":485602,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"d95a9984-2837-48d7-851a-7be416157552"},"source":["import numpy as np\n","import keras\n","from keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, BatchNormalization\n","from keras.utils import np_utils\n","from keras.datasets import cifar10\n","from keras.optimizers import Adam, SGD\n","from keras import regularizers\n","from tensorflow.keras.layers.experimental import preprocessing\n","\n","# load the data\n","(X_train, y_train), (X_test, y_test) = cifar10.load_data()\n","\n","print('Image shape: {0}'.format(X_train.shape[1:]))\n","print('Total number of training samples: {0}'.format(X_train.shape[0]))\n","print('Total number of validation samples: {0}'.format(X_test.shape[0]))\n","\n","X_train = X_train.reshape(-1,32,32,3)\n","\n","## Normalization block\n","norm_layer = preprocessing.Normalization()\n","norm_layer.adapt(X_train)\n","X_train_n = norm_layer(X_train)\n","X_test_n = norm_layer(X_test)\n","\n","# You can modify the data_augmentation variable below to add your\n","# data augmentation pipeline.\n","# By default we do not apply any augmentation (RandomZoom(0) is equivalent\n","# to not performing any augmentation)\n","data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = SGD(lr=3e-4)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","SGD34=pd.DataFrame.from_dict(history.history)\n","SGD34.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(3e-4).csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(3e-4) Model\")"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Image shape: (32, 32, 3)\n","Total number of training samples: 50000\n","Total number of validation samples: 10000\n","Epoch 1/40\n","1563/1563 - 26s - loss: 2.2973 - accuracy: 0.1211 - val_loss: 2.2903 - val_accuracy: 0.1344\n","Epoch 2/40\n","1563/1563 - 12s - loss: 2.2848 - accuracy: 0.1466 - val_loss: 2.2774 - val_accuracy: 0.1636\n","Epoch 3/40\n","1563/1563 - 12s - loss: 2.2707 - accuracy: 0.1773 - val_loss: 2.2604 - val_accuracy: 0.1913\n","Epoch 4/40\n","1563/1563 - 12s - loss: 2.2513 - accuracy: 0.2030 - val_loss: 2.2368 - val_accuracy: 0.2176\n","Epoch 5/40\n","1563/1563 - 12s - loss: 2.2252 - accuracy: 0.2262 - val_loss: 2.2057 - val_accuracy: 0.2324\n","Epoch 6/40\n","1563/1563 - 12s - loss: 2.1925 - accuracy: 0.2385 - val_loss: 2.1687 - val_accuracy: 0.2514\n","Epoch 7/40\n","1563/1563 - 12s - loss: 2.1550 - accuracy: 0.2537 - val_loss: 2.1276 - val_accuracy: 0.2627\n","Epoch 8/40\n","1563/1563 - 12s - loss: 2.1131 - accuracy: 0.2618 - val_loss: 2.0825 - val_accuracy: 0.2759\n","Epoch 9/40\n","1563/1563 - 12s - loss: 2.0681 - accuracy: 0.2715 - val_loss: 2.0379 - val_accuracy: 0.2820\n","Epoch 10/40\n","1563/1563 - 12s - loss: 2.0273 - accuracy: 0.2799 - val_loss: 2.0014 - val_accuracy: 0.2863\n","Epoch 11/40\n","1563/1563 - 12s - loss: 1.9956 - accuracy: 0.2840 - val_loss: 1.9738 - val_accuracy: 0.2909\n","Epoch 12/40\n","1563/1563 - 12s - loss: 1.9711 - accuracy: 0.2883 - val_loss: 1.9504 - val_accuracy: 0.3005\n","Epoch 13/40\n","1563/1563 - 12s - loss: 1.9499 - accuracy: 0.2948 - val_loss: 1.9293 - val_accuracy: 0.3016\n","Epoch 14/40\n","1563/1563 - 12s - loss: 1.9294 - accuracy: 0.2999 - val_loss: 1.9092 - val_accuracy: 0.3084\n","Epoch 15/40\n","1563/1563 - 12s - loss: 1.9088 - accuracy: 0.3068 - val_loss: 1.8888 - val_accuracy: 0.3104\n","Epoch 16/40\n","1563/1563 - 12s - loss: 1.8881 - accuracy: 0.3111 - val_loss: 1.8672 - val_accuracy: 0.3221\n","Epoch 17/40\n","1563/1563 - 12s - loss: 1.8662 - accuracy: 0.3183 - val_loss: 1.8438 - val_accuracy: 0.3266\n","Epoch 18/40\n","1563/1563 - 12s - loss: 1.8438 - accuracy: 0.3257 - val_loss: 1.8215 - val_accuracy: 0.3299\n","Epoch 19/40\n","1563/1563 - 12s - loss: 1.8212 - accuracy: 0.3316 - val_loss: 1.8013 - val_accuracy: 0.3426\n","Epoch 20/40\n","1563/1563 - 12s - loss: 1.7988 - accuracy: 0.3390 - val_loss: 1.7769 - val_accuracy: 0.3466\n","Epoch 21/40\n","1563/1563 - 12s - loss: 1.7766 - accuracy: 0.3495 - val_loss: 1.7595 - val_accuracy: 0.3560\n","Epoch 22/40\n","1563/1563 - 12s - loss: 1.7549 - accuracy: 0.3581 - val_loss: 1.7345 - val_accuracy: 0.3595\n","Epoch 23/40\n","1563/1563 - 12s - loss: 1.7344 - accuracy: 0.3671 - val_loss: 1.7150 - val_accuracy: 0.3739\n","Epoch 24/40\n","1563/1563 - 12s - loss: 1.7151 - accuracy: 0.3733 - val_loss: 1.6948 - val_accuracy: 0.3835\n","Epoch 25/40\n","1563/1563 - 12s - loss: 1.6968 - accuracy: 0.3786 - val_loss: 1.6791 - val_accuracy: 0.3848\n","Epoch 26/40\n","1563/1563 - 12s - loss: 1.6802 - accuracy: 0.3861 - val_loss: 1.6631 - val_accuracy: 0.3927\n","Epoch 27/40\n","1563/1563 - 12s - loss: 1.6636 - accuracy: 0.3923 - val_loss: 1.6474 - val_accuracy: 0.4037\n","Epoch 28/40\n","1563/1563 - 12s - loss: 1.6499 - accuracy: 0.3958 - val_loss: 1.6334 - val_accuracy: 0.4040\n","Epoch 29/40\n","1563/1563 - 12s - loss: 1.6367 - accuracy: 0.4009 - val_loss: 1.6222 - val_accuracy: 0.4142\n","Epoch 30/40\n","1563/1563 - 12s - loss: 1.6242 - accuracy: 0.4053 - val_loss: 1.6132 - val_accuracy: 0.4146\n","Epoch 31/40\n","1563/1563 - 12s - loss: 1.6125 - accuracy: 0.4114 - val_loss: 1.5985 - val_accuracy: 0.4177\n","Epoch 32/40\n","1563/1563 - 12s - loss: 1.6019 - accuracy: 0.4145 - val_loss: 1.5916 - val_accuracy: 0.4228\n","Epoch 33/40\n","1563/1563 - 12s - loss: 1.5924 - accuracy: 0.4188 - val_loss: 1.5842 - val_accuracy: 0.4249\n","Epoch 34/40\n","1563/1563 - 12s - loss: 1.5822 - accuracy: 0.4233 - val_loss: 1.5680 - val_accuracy: 0.4333\n","Epoch 35/40\n","1563/1563 - 12s - loss: 1.5734 - accuracy: 0.4251 - val_loss: 1.5654 - val_accuracy: 0.4312\n","Epoch 36/40\n","1563/1563 - 12s - loss: 1.5641 - accuracy: 0.4309 - val_loss: 1.5570 - val_accuracy: 0.4341\n","Epoch 37/40\n","1563/1563 - 12s - loss: 1.5558 - accuracy: 0.4345 - val_loss: 1.5469 - val_accuracy: 0.4373\n","Epoch 38/40\n","1563/1563 - 12s - loss: 1.5480 - accuracy: 0.4372 - val_loss: 1.5413 - val_accuracy: 0.4428\n","Epoch 39/40\n","1563/1563 - 12s - loss: 1.5397 - accuracy: 0.4407 - val_loss: 1.5389 - val_accuracy: 0.4449\n","Epoch 40/40\n","1563/1563 - 12s - loss: 1.5314 - accuracy: 0.4467 - val_loss: 1.5331 - val_accuracy: 0.4422\n"],"name":"stdout"},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-72d537ebbd37>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     69\u001b[0m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train_n\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_train_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m40\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_n\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mY_test_class\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     70\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 71\u001b[0;31m \u001b[0mplot_history\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0mSGD34\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'plot_history' is not defined"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":310},"id":"hq3Syk8YXTpr","executionInfo":{"status":"ok","timestamp":1616507653727,"user_tz":0,"elapsed":2943,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"507d8c97-862e-4583-c30d-f3bdd10a5ee6"},"source":["plot_history(history)\n","\n","SGD34=pd.DataFrame.from_dict(history.history)\n","SGD34.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(3e-4).csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(3e-4) Model\")"],"execution_count":4,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(3e-4) Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"0hMz_yIcUcvR","executionInfo":{"status":"ok","timestamp":1616508131469,"user_tz":0,"elapsed":472770,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"f34f5b45-318f-4e68-9aa2-9373989067c8"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = SGD(lr=3e-3)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","SGD33=pd.DataFrame.from_dict(history.history)\n","SGD33.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(3e-3).csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(3e-3) Model\")"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 13s - loss: 2.2115 - accuracy: 0.1865 - val_loss: 2.0408 - val_accuracy: 0.2776\n","Epoch 2/40\n","1563/1563 - 12s - loss: 1.9332 - accuracy: 0.2944 - val_loss: 1.8364 - val_accuracy: 0.3200\n","Epoch 3/40\n","1563/1563 - 12s - loss: 1.7578 - accuracy: 0.3594 - val_loss: 1.6755 - val_accuracy: 0.3898\n","Epoch 4/40\n","1563/1563 - 12s - loss: 1.6450 - accuracy: 0.3975 - val_loss: 1.5887 - val_accuracy: 0.4134\n","Epoch 5/40\n","1563/1563 - 12s - loss: 1.5768 - accuracy: 0.4264 - val_loss: 1.5957 - val_accuracy: 0.4176\n","Epoch 6/40\n","1563/1563 - 12s - loss: 1.5219 - accuracy: 0.4461 - val_loss: 1.5032 - val_accuracy: 0.4530\n","Epoch 7/40\n","1563/1563 - 12s - loss: 1.4759 - accuracy: 0.4652 - val_loss: 1.4404 - val_accuracy: 0.4709\n","Epoch 8/40\n","1563/1563 - 12s - loss: 1.4361 - accuracy: 0.4813 - val_loss: 1.4482 - val_accuracy: 0.4773\n","Epoch 9/40\n","1563/1563 - 12s - loss: 1.3965 - accuracy: 0.4972 - val_loss: 1.4762 - val_accuracy: 0.4631\n","Epoch 10/40\n","1563/1563 - 12s - loss: 1.3602 - accuracy: 0.5114 - val_loss: 1.3280 - val_accuracy: 0.5246\n","Epoch 11/40\n","1563/1563 - 12s - loss: 1.3211 - accuracy: 0.5283 - val_loss: 1.4214 - val_accuracy: 0.4795\n","Epoch 12/40\n","1563/1563 - 12s - loss: 1.2877 - accuracy: 0.5390 - val_loss: 1.3618 - val_accuracy: 0.5023\n","Epoch 13/40\n","1563/1563 - 12s - loss: 1.2533 - accuracy: 0.5547 - val_loss: 1.2760 - val_accuracy: 0.5330\n","Epoch 14/40\n","1563/1563 - 12s - loss: 1.2232 - accuracy: 0.5662 - val_loss: 1.2759 - val_accuracy: 0.5436\n","Epoch 15/40\n","1563/1563 - 12s - loss: 1.1915 - accuracy: 0.5797 - val_loss: 1.1957 - val_accuracy: 0.5690\n","Epoch 16/40\n","1563/1563 - 12s - loss: 1.1630 - accuracy: 0.5910 - val_loss: 1.1851 - val_accuracy: 0.5748\n","Epoch 17/40\n","1563/1563 - 12s - loss: 1.1363 - accuracy: 0.6019 - val_loss: 1.1511 - val_accuracy: 0.5903\n","Epoch 18/40\n","1563/1563 - 12s - loss: 1.1114 - accuracy: 0.6118 - val_loss: 1.2462 - val_accuracy: 0.5474\n","Epoch 19/40\n","1563/1563 - 12s - loss: 1.0840 - accuracy: 0.6210 - val_loss: 1.2531 - val_accuracy: 0.5461\n","Epoch 20/40\n","1563/1563 - 12s - loss: 1.0624 - accuracy: 0.6277 - val_loss: 1.0715 - val_accuracy: 0.6220\n","Epoch 21/40\n","1563/1563 - 12s - loss: 1.0411 - accuracy: 0.6345 - val_loss: 1.0656 - val_accuracy: 0.6262\n","Epoch 22/40\n","1563/1563 - 12s - loss: 1.0192 - accuracy: 0.6441 - val_loss: 1.1404 - val_accuracy: 0.5931\n","Epoch 23/40\n","1563/1563 - 12s - loss: 0.9984 - accuracy: 0.6512 - val_loss: 1.0232 - val_accuracy: 0.6404\n","Epoch 24/40\n","1563/1563 - 12s - loss: 0.9788 - accuracy: 0.6590 - val_loss: 1.0197 - val_accuracy: 0.6432\n","Epoch 25/40\n","1563/1563 - 12s - loss: 0.9604 - accuracy: 0.6645 - val_loss: 0.9746 - val_accuracy: 0.6578\n","Epoch 26/40\n","1563/1563 - 12s - loss: 0.9444 - accuracy: 0.6715 - val_loss: 0.9773 - val_accuracy: 0.6630\n","Epoch 27/40\n","1563/1563 - 12s - loss: 0.9282 - accuracy: 0.6769 - val_loss: 1.0387 - val_accuracy: 0.6293\n","Epoch 28/40\n","1563/1563 - 12s - loss: 0.9097 - accuracy: 0.6836 - val_loss: 0.9779 - val_accuracy: 0.6526\n","Epoch 29/40\n","1563/1563 - 12s - loss: 0.8943 - accuracy: 0.6903 - val_loss: 1.0000 - val_accuracy: 0.6511\n","Epoch 30/40\n","1563/1563 - 12s - loss: 0.8820 - accuracy: 0.6934 - val_loss: 0.9242 - val_accuracy: 0.6768\n","Epoch 31/40\n","1563/1563 - 12s - loss: 0.8651 - accuracy: 0.7002 - val_loss: 0.9416 - val_accuracy: 0.6663\n","Epoch 32/40\n","1563/1563 - 12s - loss: 0.8518 - accuracy: 0.7051 - val_loss: 0.9497 - val_accuracy: 0.6661\n","Epoch 33/40\n","1563/1563 - 12s - loss: 0.8387 - accuracy: 0.7097 - val_loss: 0.9382 - val_accuracy: 0.6703\n","Epoch 34/40\n","1563/1563 - 12s - loss: 0.8250 - accuracy: 0.7139 - val_loss: 0.8887 - val_accuracy: 0.6871\n","Epoch 35/40\n","1563/1563 - 12s - loss: 0.8136 - accuracy: 0.7162 - val_loss: 0.9023 - val_accuracy: 0.6824\n","Epoch 36/40\n","1563/1563 - 12s - loss: 0.7996 - accuracy: 0.7229 - val_loss: 0.8665 - val_accuracy: 0.7001\n","Epoch 37/40\n","1563/1563 - 12s - loss: 0.7862 - accuracy: 0.7284 - val_loss: 0.8648 - val_accuracy: 0.7011\n","Epoch 38/40\n","1563/1563 - 12s - loss: 0.7760 - accuracy: 0.7312 - val_loss: 0.8677 - val_accuracy: 0.6979\n","Epoch 39/40\n","1563/1563 - 12s - loss: 0.7635 - accuracy: 0.7357 - val_loss: 0.8892 - val_accuracy: 0.6861\n","Epoch 40/40\n","1563/1563 - 12s - loss: 0.7516 - accuracy: 0.7413 - val_loss: 0.8498 - val_accuracy: 0.7025\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(3e-3) Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"uaPnZ7CGUkkN","executionInfo":{"status":"ok","timestamp":1616508601433,"user_tz":0,"elapsed":936791,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"1ff83071-510e-4b8b-8cf9-946851aa3b97"},"source":["data_augmentation = keras.Sequential(\n","    [\n","        preprocessing.RandomZoom(0)\n","    ]\n",")\n","# We will use glorot_uniform as a initialization by default\n","initialization = 'glorot_uniform'\n","# Use the architecture given below, only modify it to add Dropout/BatchNorm\n","model = Sequential()\n","model.add(data_augmentation)\n","model.add(Conv2D(32, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(64, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(128, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding='same'))\n","\n","model.add(Conv2D(256, (3, 3), padding='same', kernel_initializer=initialization))\n","model.add(Activation('relu'))\n","# As we use global average pooling, we don't need to use Flatten\n","model.add(GlobalAveragePooling2D())\n","model.add(Dense(10, kernel_initializer=initialization))\n","model.add(Activation('softmax'))\n","\n","\n","Y_train_class = np_utils.to_categorical(y_train, 10)\n","Y_test_class = np_utils.to_categorical(y_test, 10)\n","# By default use Adam with lr=3e-4. Change it to SGD when asked to\n","opt = SGD(lr=1e-3)\n","model.compile(loss='categorical_crossentropy',\n","              optimizer=opt,\n","              metrics=['accuracy'])\n","# Use 40 epochs as default value to plot your curves\n","history = model.fit(X_train_n, Y_train_class, epochs=40, validation_data=(X_test_n,Y_test_class), verbose=2)\n","\n","plot_history(history)\n","\n","SGD13=pd.DataFrame.from_dict(history.history)\n","SGD13.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(1e-3).csv')\n","\n","model.save(\"/content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(1e-3) Model\")"],"execution_count":6,"outputs":[{"output_type":"stream","text":["Epoch 1/40\n","1563/1563 - 13s - loss: 2.2785 - accuracy: 0.1426 - val_loss: 2.2425 - val_accuracy: 0.1882\n","Epoch 2/40\n","1563/1563 - 12s - loss: 2.1867 - accuracy: 0.2246 - val_loss: 2.1179 - val_accuracy: 0.2422\n","Epoch 3/40\n","1563/1563 - 12s - loss: 2.0579 - accuracy: 0.2638 - val_loss: 1.9926 - val_accuracy: 0.2846\n","Epoch 4/40\n","1563/1563 - 12s - loss: 1.9615 - accuracy: 0.2916 - val_loss: 1.9196 - val_accuracy: 0.2961\n","Epoch 5/40\n","1563/1563 - 12s - loss: 1.8929 - accuracy: 0.3150 - val_loss: 1.8514 - val_accuracy: 0.3383\n","Epoch 6/40\n","1563/1563 - 12s - loss: 1.8271 - accuracy: 0.3414 - val_loss: 1.7855 - val_accuracy: 0.3516\n","Epoch 7/40\n","1563/1563 - 12s - loss: 1.7652 - accuracy: 0.3632 - val_loss: 1.7250 - val_accuracy: 0.3749\n","Epoch 8/40\n","1563/1563 - 12s - loss: 1.7084 - accuracy: 0.3797 - val_loss: 1.6801 - val_accuracy: 0.3844\n","Epoch 9/40\n","1563/1563 - 12s - loss: 1.6581 - accuracy: 0.3923 - val_loss: 1.6413 - val_accuracy: 0.4010\n","Epoch 10/40\n","1563/1563 - 12s - loss: 1.6189 - accuracy: 0.4090 - val_loss: 1.6013 - val_accuracy: 0.4169\n","Epoch 11/40\n","1563/1563 - 12s - loss: 1.5875 - accuracy: 0.4203 - val_loss: 1.5604 - val_accuracy: 0.4335\n","Epoch 12/40\n","1563/1563 - 12s - loss: 1.5608 - accuracy: 0.4304 - val_loss: 1.5357 - val_accuracy: 0.4351\n","Epoch 13/40\n","1563/1563 - 12s - loss: 1.5364 - accuracy: 0.4414 - val_loss: 1.5509 - val_accuracy: 0.4412\n","Epoch 14/40\n","1563/1563 - 12s - loss: 1.5149 - accuracy: 0.4487 - val_loss: 1.4885 - val_accuracy: 0.4620\n","Epoch 15/40\n","1563/1563 - 12s - loss: 1.4943 - accuracy: 0.4584 - val_loss: 1.4880 - val_accuracy: 0.4603\n","Epoch 16/40\n","1563/1563 - 12s - loss: 1.4755 - accuracy: 0.4640 - val_loss: 1.4857 - val_accuracy: 0.4562\n","Epoch 17/40\n","1563/1563 - 12s - loss: 1.4577 - accuracy: 0.4737 - val_loss: 1.4491 - val_accuracy: 0.4763\n","Epoch 18/40\n","1563/1563 - 12s - loss: 1.4388 - accuracy: 0.4799 - val_loss: 1.4364 - val_accuracy: 0.4793\n","Epoch 19/40\n","1563/1563 - 12s - loss: 1.4239 - accuracy: 0.4852 - val_loss: 1.4124 - val_accuracy: 0.4902\n","Epoch 20/40\n","1563/1563 - 12s - loss: 1.4043 - accuracy: 0.4942 - val_loss: 1.4030 - val_accuracy: 0.4977\n","Epoch 21/40\n","1563/1563 - 12s - loss: 1.3871 - accuracy: 0.5009 - val_loss: 1.3759 - val_accuracy: 0.5036\n","Epoch 22/40\n","1563/1563 - 12s - loss: 1.3715 - accuracy: 0.5090 - val_loss: 1.4287 - val_accuracy: 0.4803\n","Epoch 23/40\n","1563/1563 - 12s - loss: 1.3555 - accuracy: 0.5141 - val_loss: 1.3678 - val_accuracy: 0.5069\n","Epoch 24/40\n","1563/1563 - 12s - loss: 1.3370 - accuracy: 0.5226 - val_loss: 1.3187 - val_accuracy: 0.5314\n","Epoch 25/40\n","1563/1563 - 12s - loss: 1.3228 - accuracy: 0.5290 - val_loss: 1.3430 - val_accuracy: 0.5114\n","Epoch 26/40\n","1563/1563 - 12s - loss: 1.3097 - accuracy: 0.5340 - val_loss: 1.3330 - val_accuracy: 0.5153\n","Epoch 27/40\n","1563/1563 - 12s - loss: 1.2946 - accuracy: 0.5367 - val_loss: 1.3766 - val_accuracy: 0.5025\n","Epoch 28/40\n","1563/1563 - 12s - loss: 1.2813 - accuracy: 0.5455 - val_loss: 1.3027 - val_accuracy: 0.5319\n","Epoch 29/40\n","1563/1563 - 12s - loss: 1.2676 - accuracy: 0.5472 - val_loss: 1.2770 - val_accuracy: 0.5373\n","Epoch 30/40\n","1563/1563 - 12s - loss: 1.2547 - accuracy: 0.5520 - val_loss: 1.2814 - val_accuracy: 0.5432\n","Epoch 31/40\n","1563/1563 - 12s - loss: 1.2417 - accuracy: 0.5578 - val_loss: 1.3133 - val_accuracy: 0.5183\n","Epoch 32/40\n","1563/1563 - 12s - loss: 1.2301 - accuracy: 0.5628 - val_loss: 1.2746 - val_accuracy: 0.5382\n","Epoch 33/40\n","1563/1563 - 12s - loss: 1.2201 - accuracy: 0.5672 - val_loss: 1.2801 - val_accuracy: 0.5366\n","Epoch 34/40\n","1563/1563 - 12s - loss: 1.2056 - accuracy: 0.5738 - val_loss: 1.2172 - val_accuracy: 0.5693\n","Epoch 35/40\n","1563/1563 - 12s - loss: 1.1977 - accuracy: 0.5772 - val_loss: 1.2083 - val_accuracy: 0.5675\n","Epoch 36/40\n","1563/1563 - 12s - loss: 1.1868 - accuracy: 0.5811 - val_loss: 1.2152 - val_accuracy: 0.5670\n","Epoch 37/40\n","1563/1563 - 12s - loss: 1.1754 - accuracy: 0.5856 - val_loss: 1.2032 - val_accuracy: 0.5722\n","Epoch 38/40\n","1563/1563 - 12s - loss: 1.1648 - accuracy: 0.5911 - val_loss: 1.1890 - val_accuracy: 0.5774\n","Epoch 39/40\n","1563/1563 - 12s - loss: 1.1565 - accuracy: 0.5927 - val_loss: 1.2357 - val_accuracy: 0.5486\n","Epoch 40/40\n","1563/1563 - 12s - loss: 1.1445 - accuracy: 0.5977 - val_loss: 1.1567 - val_accuracy: 0.5912\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Three - Network Training/SGD(1e-3) Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}