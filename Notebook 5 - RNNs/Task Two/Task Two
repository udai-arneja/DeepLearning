{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Task Two","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/05_RNN.ipynb","timestamp":1615241284103}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"OwawQJMZ3aQM"},"source":["# Coursework\n","\n"]},{"cell_type":"code","metadata":{"id":"TXMPVlbJ_TmU","executionInfo":{"status":"ok","timestamp":1616685926929,"user_tz":0,"elapsed":2488,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","from keras.preprocessing import sequence\n","from keras.layers import Dense, Embedding, Dropout, Flatten, Add, Lambda\n","from keras.layers import LSTM\n","from keras.datasets import imdb\n","import math\n","from itertools import chain\n","\n","from keras import __version__\n","from keras import backend as K\n","import matplotlib.pyplot as plt\n","from keras.layers.core import Dense, Activation, Dropout\n","from keras.layers.recurrent import LSTM\n","from keras.models import Sequential\n","from sklearn.metrics import mean_squared_error\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.utils import shuffle\n","import numpy as np\n","\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ms9z9b99_mhn","executionInfo":{"status":"ok","timestamp":1616686004851,"user_tz":0,"elapsed":19314,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"6bb3fea4-0705-49a6-cc28-e25661854811"},"source":["drive.mount('/content/drive')\n","os.chdir(\"/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN\")\n","!ls"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"," 05_RNN.ipynb\t\t\t'Task 2.ipynb'\t'Task One.ipynb'\n","'Copy of Copy of 05_RNN.ipynb'\t'Task One'\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WIB08JxD3ezu"},"source":["def create_dataset(dataset, window_size = 1):\n","    data_x, data_y = [], []\n","    for i in range(len(dataset) - window_size - 1):\n","        sample = dataset[i:(i + window_size), 0]\n","        data_x.append(sample)\n","        data_y.append(dataset[i + window_size, 0])\n","    return(np.array(data_x), np.array(data_y))\n","\n","window_size = 1 #Use this variable to build the dataset with different number of inputs\n","\n","# Create test and training sets for regression with different window sizes.\n","train_X, train_Y = create_dataset(train, window_size)\n","test_X, test_Y = create_dataset(test, window_size)\n","train_X = np.reshape(train_X, (train_X.shape[0], train_X.shape[1], 1))\n","test_X = np.reshape(test_X, (test_X.shape[0], test_X.shape[1], 1))\n","\n","print(\"Shape of training inputs: \" + str((train_X.shape)))\n","print(\"Shape of training labels: \" + str((train_Y.shape)))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Mwb9IfiCLKuT"},"source":["### **Task 2: Text Embeddings**\n","For this task, we tackle a classification problem using the IMDB sentiment dataset as done in the example in the notebook. Labels in IMDB are 0 for negative reviews and 1 for positive reviews. The definitions of the models you will use for this task are given the code below. This task is similar to the transfer learning/finetuning task in the CNN Architectures notebook, however we now test the effect of transfer learning in the embeddings. In this task we use train, validation and test splits with Early Stopping. That means that we will take the best performing model in the validation set and use it in the test set to get a final performance.\n","\n","**Report**\n","* Using embeddings of dimensionality 1, train a model without using any LSTM, only using an average pooling of the input embeddings (called `embeddings_model` in the code given below). Then train another model with an LSTM and trainable embeddings initialized at random (called `lstm_model`). Finally train a model with an LSTM with non-trainable embeddings initialized with GloVe embeddings (called `lstm_glove_model`). The code to train the three models is given below. Report in a table the test accuracy obtained after training with the given code for the three models. Also attach in the Appendix the training and validation accuracy curves for the different models trained. You can report the curves after using EarlyStopping with patience 10 (already given in the code), so you don't have to train for the full 50 epochs the three models. Discuss the results.\n","\n","* Predict the sentiment of the two given example reviews in the code below for the model trained without a LSTM (`embeddings_model`) and for the model trained with a LSTM and GloVe embeddings (`lstm_glove_model`). Report the predictions (you can use the same table as when reporting test accuracies). Discuss the results. Also discuss the differences you can observe between the GloVe embeddings and the embeddings learnt in `embeddings_model` (e.g. what kind of properties the embeddings encode, or differences in the closest words).\n"]},{"cell_type":"markdown","metadata":{"id":"4Gq0lcyLnaSN"},"source":["We provide the training code you need to use for this exercise below. First we load the dataset as we did in the tutorial. In this exercise, we will use of train, validation and test splits, which are defined in the next cell.\n"]},{"cell_type":"code","metadata":{"id":"E0ibhzVdnZ0X","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616686031199,"user_tz":0,"elapsed":6626,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"aff8b918-7c4d-47c2-e95b-2734d3a1c6cb"},"source":["import tensorflow as tf\n","from keras.preprocessing import sequence\n","from keras.models import Sequential\n","from keras.layers import Dense, Embedding, Dropout, Flatten\n","from keras.layers import LSTM, GlobalAvgPool1D\n","from keras.datasets import imdb\n","from keras.utils import np_utils\n","\n","# number of most-frequent words to use\n","nb_words = 5000\n","n_classes = 1\n","print('Loading data...')\n","(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=nb_words)\n","print('x_train:', x_train.shape)\n","print('x_test:', x_test.shape)\n","# get_word_index retrieves a mapping word -> index\n","word_index = imdb.get_word_index()\n","# We make space for the three special tokens\n","word_index_c = dict((w, i+3) for (w, i) in word_index.items())\n","word_index_c['<PAD>'] = 0\n","word_index_c['<START>'] = 1\n","word_index_c['<UNK>'] = 2\n","# Instead of having dictionary word -> index we form\n","# the dictionary index -> word\n","index_word = dict((i, w) for (w, i) in word_index_c.items())\n","# Truncate sentences after this number of words\n","maxlen = 100\n","print('Pad sequences (samples x time)')\n","x_train = sequence.pad_sequences(x_train, maxlen=maxlen)\n","x_test = sequence.pad_sequences(x_test, maxlen=maxlen)\n","print('x_train shape:', x_train.shape)\n","print('x_test shape:', x_test.shape)\n","\n","x_val = x_train[23000:]\n","y_val = y_train[23000:]\n","x_train = x_train[:23000]\n","y_train = y_train[:23000]\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Loading data...\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n"],"name":"stdout"},{"output_type":"stream","text":["<string>:6: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:159: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])\n"],"name":"stderr"},{"output_type":"stream","text":["x_train: (25000,)\n","x_test: (25000,)\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb_word_index.json\n","1646592/1641221 [==============================] - 0s 0us/step\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/datasets/imdb.py:160: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])\n"],"name":"stderr"},{"output_type":"stream","text":["Pad sequences (samples x time)\n","x_train shape: (25000, 100)\n","x_test shape: (25000, 100)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4EDi21HPGU3h"},"source":["The following code includes the model that uses embeddings of size 1 (so each word is only represented by a single digit) and averages them."]},{"cell_type":"code","metadata":{"id":"7421cnIYoPQ-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616687901449,"user_tz":0,"elapsed":471,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"91188b6f-df99-40ba-d649-a6738fef8fa9"},"source":["# Dimensions of the embeddings\n","embedding_dim = 1\n","\n","print('Build model...')\n","embeddings_model = Sequential()\n","\n","embeddings_model.add(Embedding(nb_words,embedding_dim,input_length=maxlen,trainable=True))\n","embeddings_model.add(GlobalAvgPool1D())\n","embeddings_model.add(Dense(1, activation='sigmoid'))\n","embeddings_model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","print(embeddings_model.summary())"],"execution_count":30,"outputs":[{"output_type":"stream","text":["Build model...\n","Model: \"sequential_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_3 (Embedding)      (None, 100, 1)            5000      \n","_________________________________________________________________\n","global_average_pooling1d_3 ( (None, 1)                 0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 2         \n","=================================================================\n","Total params: 5,002\n","Trainable params: 5,002\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pRm3ql3UE9w7"},"source":["We use Early Stopping, so the best validation model is then used to compute the result in the test set. "]},{"cell_type":"code","metadata":{"id":"Gom37wigpZAn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616687992061,"user_tz":0,"elapsed":83083,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"ad7b94c5-8fac-4dcd-fa50-6971432dbc7e"},"source":["from keras.callbacks import EarlyStopping\n","\n","## We train the model for at most 50 epochs\n","epochs = 50\n","early_stop = EarlyStopping(\n","    monitor='val_accuracy',\n","    min_delta=0,\n","    patience=10,\n","    verbose=0,\n","    mode='auto',\n","    baseline=None,\n","    restore_best_weights=True\n",")\n","history = embeddings_model.fit(x_train, y_train, batch_size=32, epochs=epochs, callbacks=[early_stop], validation_data=(x_val,y_val),verbose=2)\n","print('Final test accuracy is:')\n","test_accuracy = embeddings_model.evaluate(x_test, y_test)\n","\n","weights = embeddings_model.layers[0].get_weights()[0]\n","query_word = '8'\n","dist = ((weights - weights[word_index_c[query_word]])**2).sum(1).argsort()\n","top_k = 10\n","print(\"Embedding value of {:s} is {:f}\", query_word, weights[word_index_c[query_word]][0])\n","print('Most {:d} similar words to {:s}'.format(top_k, query_word))\n","for k in range(1, top_k+1):\n","  print(\"{:d}: {:s}\".format(k, index_word[dist[k]]))\n","  \n","negative_review = \"the movie is boring and not good\"\n","words = negative_review.split()\n","seq_input = [word_index_c[w] for w in words]\n","seq_input = np.array([seq_input])\n","negative_review_score = embeddings_model.predict(seq_input)\n","\n","positive_review = \"the movie is good and not boring\"\n","words = positive_review.split()\n","seq_input = [word_index_c[w] for w in words]\n","seq_input = np.array([seq_input])\n","positive_review_score = embeddings_model.predict(seq_input)\n","\n","print(\"The score for the negative review is:\", negative_review_score)\n","print(\"The score for the positive review is:\", positive_review_score)\n","\n"],"execution_count":31,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","719/719 - 2s - loss: 0.6823 - accuracy: 0.6927 - val_loss: 0.6675 - val_accuracy: 0.7340\n","Epoch 2/50\n","719/719 - 2s - loss: 0.6479 - accuracy: 0.7492 - val_loss: 0.6272 - val_accuracy: 0.7555\n","Epoch 3/50\n","719/719 - 2s - loss: 0.6042 - accuracy: 0.7716 - val_loss: 0.5852 - val_accuracy: 0.7655\n","Epoch 4/50\n","719/719 - 2s - loss: 0.5603 - accuracy: 0.7924 - val_loss: 0.5453 - val_accuracy: 0.7850\n","Epoch 5/50\n","719/719 - 2s - loss: 0.5201 - accuracy: 0.8097 - val_loss: 0.5104 - val_accuracy: 0.7965\n","Epoch 6/50\n","719/719 - 2s - loss: 0.4850 - accuracy: 0.8220 - val_loss: 0.4814 - val_accuracy: 0.8050\n","Epoch 7/50\n","719/719 - 2s - loss: 0.4548 - accuracy: 0.8330 - val_loss: 0.4570 - val_accuracy: 0.8140\n","Epoch 8/50\n","719/719 - 2s - loss: 0.4294 - accuracy: 0.8391 - val_loss: 0.4377 - val_accuracy: 0.8180\n","Epoch 9/50\n","719/719 - 2s - loss: 0.4080 - accuracy: 0.8452 - val_loss: 0.4209 - val_accuracy: 0.8195\n","Epoch 10/50\n","719/719 - 2s - loss: 0.3897 - accuracy: 0.8496 - val_loss: 0.4073 - val_accuracy: 0.8225\n","Epoch 11/50\n","719/719 - 2s - loss: 0.3741 - accuracy: 0.8538 - val_loss: 0.3961 - val_accuracy: 0.8280\n","Epoch 12/50\n","719/719 - 2s - loss: 0.3607 - accuracy: 0.8579 - val_loss: 0.3871 - val_accuracy: 0.8275\n","Epoch 13/50\n","719/719 - 2s - loss: 0.3489 - accuracy: 0.8619 - val_loss: 0.3796 - val_accuracy: 0.8305\n","Epoch 14/50\n","719/719 - 2s - loss: 0.3386 - accuracy: 0.8648 - val_loss: 0.3730 - val_accuracy: 0.8315\n","Epoch 15/50\n","719/719 - 2s - loss: 0.3295 - accuracy: 0.8680 - val_loss: 0.3678 - val_accuracy: 0.8345\n","Epoch 16/50\n","719/719 - 2s - loss: 0.3213 - accuracy: 0.8708 - val_loss: 0.3630 - val_accuracy: 0.8360\n","Epoch 17/50\n","719/719 - 2s - loss: 0.3139 - accuracy: 0.8725 - val_loss: 0.3596 - val_accuracy: 0.8385\n","Epoch 18/50\n","719/719 - 2s - loss: 0.3073 - accuracy: 0.8759 - val_loss: 0.3562 - val_accuracy: 0.8385\n","Epoch 19/50\n","719/719 - 2s - loss: 0.3012 - accuracy: 0.8781 - val_loss: 0.3536 - val_accuracy: 0.8405\n","Epoch 20/50\n","719/719 - 2s - loss: 0.2957 - accuracy: 0.8804 - val_loss: 0.3515 - val_accuracy: 0.8440\n","Epoch 21/50\n","719/719 - 2s - loss: 0.2905 - accuracy: 0.8817 - val_loss: 0.3497 - val_accuracy: 0.8455\n","Epoch 22/50\n","719/719 - 2s - loss: 0.2858 - accuracy: 0.8843 - val_loss: 0.3482 - val_accuracy: 0.8475\n","Epoch 23/50\n","719/719 - 2s - loss: 0.2814 - accuracy: 0.8863 - val_loss: 0.3473 - val_accuracy: 0.8495\n","Epoch 24/50\n","719/719 - 2s - loss: 0.2773 - accuracy: 0.8870 - val_loss: 0.3462 - val_accuracy: 0.8475\n","Epoch 25/50\n","719/719 - 2s - loss: 0.2734 - accuracy: 0.8897 - val_loss: 0.3459 - val_accuracy: 0.8495\n","Epoch 26/50\n","719/719 - 2s - loss: 0.2698 - accuracy: 0.8914 - val_loss: 0.3451 - val_accuracy: 0.8475\n","Epoch 27/50\n","719/719 - 2s - loss: 0.2665 - accuracy: 0.8917 - val_loss: 0.3447 - val_accuracy: 0.8480\n","Epoch 28/50\n","719/719 - 2s - loss: 0.2633 - accuracy: 0.8938 - val_loss: 0.3447 - val_accuracy: 0.8500\n","Epoch 29/50\n","719/719 - 2s - loss: 0.2603 - accuracy: 0.8944 - val_loss: 0.3447 - val_accuracy: 0.8505\n","Epoch 30/50\n","719/719 - 2s - loss: 0.2573 - accuracy: 0.8964 - val_loss: 0.3453 - val_accuracy: 0.8510\n","Epoch 31/50\n","719/719 - 2s - loss: 0.2547 - accuracy: 0.8979 - val_loss: 0.3457 - val_accuracy: 0.8510\n","Epoch 32/50\n","719/719 - 2s - loss: 0.2521 - accuracy: 0.8989 - val_loss: 0.3461 - val_accuracy: 0.8510\n","Epoch 33/50\n","719/719 - 2s - loss: 0.2497 - accuracy: 0.8995 - val_loss: 0.3461 - val_accuracy: 0.8535\n","Epoch 34/50\n","719/719 - 2s - loss: 0.2474 - accuracy: 0.9010 - val_loss: 0.3468 - val_accuracy: 0.8530\n","Epoch 35/50\n","719/719 - 2s - loss: 0.2451 - accuracy: 0.9017 - val_loss: 0.3474 - val_accuracy: 0.8545\n","Epoch 36/50\n","719/719 - 2s - loss: 0.2429 - accuracy: 0.9022 - val_loss: 0.3482 - val_accuracy: 0.8525\n","Epoch 37/50\n","719/719 - 2s - loss: 0.2409 - accuracy: 0.9037 - val_loss: 0.3491 - val_accuracy: 0.8525\n","Epoch 38/50\n","719/719 - 2s - loss: 0.2389 - accuracy: 0.9049 - val_loss: 0.3501 - val_accuracy: 0.8530\n","Epoch 39/50\n","719/719 - 2s - loss: 0.2370 - accuracy: 0.9060 - val_loss: 0.3510 - val_accuracy: 0.8530\n","Epoch 40/50\n","719/719 - 2s - loss: 0.2351 - accuracy: 0.9063 - val_loss: 0.3525 - val_accuracy: 0.8515\n","Epoch 41/50\n","719/719 - 2s - loss: 0.2335 - accuracy: 0.9069 - val_loss: 0.3534 - val_accuracy: 0.8515\n","Epoch 42/50\n","719/719 - 2s - loss: 0.2317 - accuracy: 0.9084 - val_loss: 0.3546 - val_accuracy: 0.8520\n","Epoch 43/50\n","719/719 - 2s - loss: 0.2301 - accuracy: 0.9085 - val_loss: 0.3557 - val_accuracy: 0.8510\n","Epoch 44/50\n","719/719 - 2s - loss: 0.2284 - accuracy: 0.9097 - val_loss: 0.3569 - val_accuracy: 0.8510\n","Epoch 45/50\n","719/719 - 2s - loss: 0.2269 - accuracy: 0.9099 - val_loss: 0.3583 - val_accuracy: 0.8510\n","Final test accuracy is:\n","782/782 [==============================] - 1s 2ms/step - loss: 0.3385 - accuracy: 0.8517\n","Embedding value of {:s} is {:f} 8 -5.5994663\n","Most 10 similar words to 8\n","1: excellent\n","2: highly\n","3: wonderful\n","4: perfect\n","5: recommended\n","6: superb\n","7: 9\n","8: 7\n","9: unexpected\n","10: today\n","WARNING:tensorflow:Model was constructed with shape (None, 100) for input KerasTensor(type_spec=TensorSpec(shape=(None, 100), dtype=tf.float32, name='embedding_3_input'), name='embedding_3_input', description=\"created by layer 'embedding_3_input'\"), but it was called on an input with incompatible shape (None, 7).\n","The score for the negative review is: [[4.6420105e-06]]\n","The score for the positive review is: [[4.6420064e-06]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"LRukT7tRDphU","executionInfo":{"status":"ok","timestamp":1616687992908,"user_tz":0,"elapsed":81338,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"a21f7068-1d59-4d13-b559-eb383e11e68b"},"source":["plot_history(history)\n","\n","NoLSTMAndAveragePooling=pd.DataFrame.from_dict(history.history)\n","NoLSTMAndAveragePooling.loc[len(NoLSTMAndAveragePooling)]=[\"test_accuracy\",0,0,test_accuracy[1]]\n","NoLSTMAndAveragePooling.loc[len(NoLSTMAndAveragePooling)]=[\"negative_review_score\",0,0,negative_review_score]\n","NoLSTMAndAveragePooling.loc[len(NoLSTMAndAveragePooling)]=[\"positive_review_score\",0,0,positive_review_score]\n","\n","\n","NoLSTMAndAveragePooling.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/NoLSTMAndAveragePooling.csv')\n","\n","embeddings_model.save('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/NoLSTMAndAveragePooling Model')"],"execution_count":32,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/NoLSTMAndAveragePooling Model/assets\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Z_DTYhcl68GF"},"source":["Now we have `embedding_model` trained. The code below will print the embedding of any `query_word`, which in this case is a single number. We also give you the code to compute the `top_k` closest embeddings to `query_word`. The metric used is the L2 distance."]},{"cell_type":"markdown","metadata":{"id":"EhD9hosS7cKQ"},"source":["The code below gives the prediction for two example reviews we input. Remember that predictions close to 0 refer to a negative review, and predictions close to 1 refer to a positive review."]},{"cell_type":"markdown","metadata":{"id":"6FzItW89aLVj"},"source":["With the above code, we trained a model that classifies the sentiment of the sentence using the average of all the embeddings, which were only of size 1. Now we will increase the capacity of the embeddings to 300 and will also add a LSTM to process the embeddings. Hence, the model has a much higher capacity."]},{"cell_type":"code","metadata":{"id":"R-z4K9iAaKR1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616688208045,"user_tz":0,"elapsed":1302,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"aa2ff378-6727-4e67-b414-ef541909b6db"},"source":["## Model parameters:\n","# Dimensions of the embeddings\n","embedding_dim = 300\n","\n","## LSTM dimensionality\n","lstm_units = 50\n","\n","print('Build model...')\n","lstm_model = Sequential()\n","\n","lstm_model.add(Embedding(nb_words,\n","                    embedding_dim,\n","                    input_length=maxlen,\n","                            trainable=True))\n","### Do not modify the layers below\n","lstm_model.add(Dropout(0.2))\n","lstm_model.add(LSTM(lstm_units, dropout=0.2))\n","lstm_model.add(Dropout(0.2))\n","lstm_model.add(Dense(1, activation='sigmoid'))\n","lstm_model.compile(loss='binary_crossentropy',\n","              optimizer='adam',\n","              metrics=['accuracy'])\n","print(lstm_model.summary())"],"execution_count":34,"outputs":[{"output_type":"stream","text":["Build model...\n","Model: \"sequential_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_4 (Embedding)      (None, 100, 300)          1500000   \n","_________________________________________________________________\n","dropout (Dropout)            (None, 100, 300)          0         \n","_________________________________________________________________\n","lstm (LSTM)                  (None, 50)                70200     \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 1)                 51        \n","=================================================================\n","Total params: 1,570,251\n","Trainable params: 1,570,251\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"msBDHkgfFhtq"},"source":["Similarly, we use EarlyStopping for this model."]},{"cell_type":"code","metadata":{"id":"cXpHfGa-aoWW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616688902068,"user_tz":0,"elapsed":179779,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"2df560f3-0ea7-4077-fb30-c78b618f96e8"},"source":["from keras.callbacks import EarlyStopping\n","\n","## We train the model for 50 epochs\n","epochs = 50\n","early_stop = EarlyStopping(\n","    monitor='val_accuracy',\n","    min_delta=0,\n","    patience=10,\n","    verbose=0,\n","    mode='auto',\n","    baseline=None,\n","    restore_best_weights=True\n",")\n","history = lstm_model.fit(x_train, y_train, batch_size=32, epochs=epochs, callbacks=[early_stop], validation_data=(x_val,y_val),verbose=2)\n","print('Final test accuracy is:')\n","test_accuracy=lstm_model.evaluate(x_test, y_test)\n","\n","weights = lstm_model.layers[0].get_weights()[0]\n","query_word = '8'\n","dist = ((weights - weights[word_index_c[query_word]])**2).sum(1).argsort()\n","top_k = 10\n","print(\"Embedding value of {:s} is {:f}\", query_word, weights[word_index_c[query_word]][0])\n","print('Most {:d} similar words to {:s}'.format(top_k, query_word))\n","for k in range(1, top_k+1):\n","  print(\"{:d}: {:s}\".format(k, index_word[dist[k]]))\n","  \n","negative_review = \"the movie is boring and not good\"\n","words = negative_review.split()\n","seq_input = [word_index_c[w] for w in words]\n","seq_input = np.array([seq_input])\n","negative_review_score = lstm_model.predict(seq_input)\n","\n","positive_review = \"the movie is good and not boring\"\n","words = positive_review.split()\n","seq_input = [word_index_c[w] for w in words]\n","seq_input = np.array([seq_input])\n","positive_review_score = lstm_model.predict(seq_input)\n","\n","print(\"The score for the negative review is:\", negative_review_score)\n","print(\"The score for the positive review is:\", positive_review_score)"],"execution_count":40,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","719/719 - 15s - loss: 0.0293 - accuracy: 0.9912 - val_loss: 0.7703 - val_accuracy: 0.8390\n","Epoch 2/50\n","719/719 - 15s - loss: 0.0212 - accuracy: 0.9942 - val_loss: 0.8738 - val_accuracy: 0.8435\n","Epoch 3/50\n","719/719 - 15s - loss: 0.0165 - accuracy: 0.9953 - val_loss: 0.8755 - val_accuracy: 0.8355\n","Epoch 4/50\n","719/719 - 15s - loss: 0.0151 - accuracy: 0.9955 - val_loss: 1.0645 - val_accuracy: 0.8385\n","Epoch 5/50\n","719/719 - 15s - loss: 0.0205 - accuracy: 0.9937 - val_loss: 0.9115 - val_accuracy: 0.8400\n","Epoch 6/50\n","719/719 - 15s - loss: 0.0187 - accuracy: 0.9945 - val_loss: 0.9154 - val_accuracy: 0.8435\n","Epoch 7/50\n","719/719 - 14s - loss: 0.0121 - accuracy: 0.9966 - val_loss: 0.9738 - val_accuracy: 0.8390\n","Epoch 8/50\n","719/719 - 15s - loss: 0.0128 - accuracy: 0.9964 - val_loss: 0.9211 - val_accuracy: 0.8405\n","Epoch 9/50\n","719/719 - 15s - loss: 0.0131 - accuracy: 0.9962 - val_loss: 1.0206 - val_accuracy: 0.8360\n","Epoch 10/50\n","719/719 - 14s - loss: 0.0115 - accuracy: 0.9964 - val_loss: 1.0512 - val_accuracy: 0.8325\n","Epoch 11/50\n","719/719 - 15s - loss: 0.0153 - accuracy: 0.9956 - val_loss: 1.0318 - val_accuracy: 0.8300\n","Epoch 12/50\n","719/719 - 14s - loss: 0.0133 - accuracy: 0.9958 - val_loss: 0.9125 - val_accuracy: 0.8425\n","Final test accuracy is:\n","782/782 [==============================] - 4s 4ms/step - loss: 0.9028 - accuracy: 0.8319\n","Embedding value of {:s} is {:f} 8 -0.25595656\n","Most 10 similar words to 8\n","1: countries\n","2: blake\n","3: command\n","4: timing\n","5: awe\n","6: mistress\n","7: brilliant\n","8: packed\n","9: settle\n","10: happy\n","WARNING:tensorflow:Model was constructed with shape (None, 100) for input KerasTensor(type_spec=TensorSpec(shape=(None, 100), dtype=tf.float32, name='embedding_4_input'), name='embedding_4_input', description=\"created by layer 'embedding_4_input'\"), but it was called on an input with incompatible shape (None, 7).\n","The score for the negative review is: [[0.00473857]]\n","The score for the positive review is: [[0.7869226]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":384},"id":"0s0lYeFJIK6g","executionInfo":{"status":"ok","timestamp":1616688907546,"user_tz":0,"elapsed":5449,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"41b0c4e3-ad6a-4823-ba34-f36743c816e7"},"source":["plot_history(history)\n","\n","LSTMAndTrainableEmbeddings=pd.DataFrame.from_dict(history.history)\n","LSTMAndTrainableEmbeddings.loc[len(LSTMAndTrainableEmbeddings)]=[\"test_accuracy\",0,0,test_accuracy[1]]\n","LSTMAndTrainableEmbeddings.loc[len(LSTMAndTrainableEmbeddings)]=[\"negative_review_score\",0,0,negative_review_score]\n","LSTMAndTrainableEmbeddings.loc[len(LSTMAndTrainableEmbeddings)]=[\"positive_review_score\",0,0,positive_review_score]\n","\n","\n","LSTMAndTrainableEmbeddings.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/LSTMAndTrainableEmbeddings.csv')\n","\n","lstm_model.save('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/LSTMAndTrainableEmbeddings Model')"],"execution_count":41,"outputs":[{"output_type":"stream","text":["WARNING:absl:Found untraced functions such as lstm_cell_layer_call_and_return_conditional_losses, lstm_cell_layer_call_fn, lstm_cell_layer_call_fn, lstm_cell_layer_call_and_return_conditional_losses, lstm_cell_layer_call_and_return_conditional_losses while saving (showing 5 of 5). These functions will not be directly callable after loading.\n","WARNING:absl:Found untraced functions such as lstm_cell_layer_call_and_return_conditional_losses, lstm_cell_layer_call_fn, lstm_cell_layer_call_fn, lstm_cell_layer_call_and_return_conditional_losses, lstm_cell_layer_call_and_return_conditional_losses while saving (showing 5 of 5). These functions will not be directly callable after loading.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/LSTMAndTrainableEmbeddings Model/assets\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/LSTMAndTrainableEmbeddings Model/assets\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"N3F0IRz2FqVX"},"source":["We just trained a model with a large number of parameters in the IMDB, which is a small dataset."]},{"cell_type":"markdown","metadata":{"id":"a7dnHR3za1xB"},"source":["The last model we train is the same model as the `lstm_model` above, but in this case we use the embeddings from the GloVe method (which were introduced in this notebook) without any finetuning. First, we download them."]},{"cell_type":"code","metadata":{"id":"t7ZjGnuWb4H9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616688941544,"user_tz":0,"elapsed":33975,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"2a9a3213-7eec-44b6-f8ec-205235992237"},"source":["!wget https://imperialcollegelondon.box.com/shared/static/c9trfhhwl9ohje5g3sapu3xk2zoywp3c.txt -O gensim_glove_vectors.txt"],"execution_count":42,"outputs":[{"output_type":"stream","text":["--2021-03-25 16:15:08--  https://imperialcollegelondon.box.com/shared/static/c9trfhhwl9ohje5g3sapu3xk2zoywp3c.txt\n","Resolving imperialcollegelondon.box.com (imperialcollegelondon.box.com)... 107.152.24.197\n","Connecting to imperialcollegelondon.box.com (imperialcollegelondon.box.com)|107.152.24.197|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: /public/static/c9trfhhwl9ohje5g3sapu3xk2zoywp3c.txt [following]\n","--2021-03-25 16:15:08--  https://imperialcollegelondon.box.com/public/static/c9trfhhwl9ohje5g3sapu3xk2zoywp3c.txt\n","Reusing existing connection to imperialcollegelondon.box.com:443.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://imperialcollegelondon.app.box.com/public/static/c9trfhhwl9ohje5g3sapu3xk2zoywp3c.txt [following]\n","--2021-03-25 16:15:08--  https://imperialcollegelondon.app.box.com/public/static/c9trfhhwl9ohje5g3sapu3xk2zoywp3c.txt\n","Resolving imperialcollegelondon.app.box.com (imperialcollegelondon.app.box.com)... 107.152.24.201\n","Connecting to imperialcollegelondon.app.box.com (imperialcollegelondon.app.box.com)|107.152.24.201|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://public.boxcloud.com/d/1/b1!zyHn7xzJu6Y2lyRLLNvitieLG2c1GVojFoFsx-hkBrvRqnICfh3DN9rxcm8zO0Vlw4_SHS0D3YNvbD0tD798bpIARZkrCLlnpfFX66zj8VGO1n7IN7F3yTiiOfScAEKuLx0qa2DmXRvJQ9wiXQzbVULHYLSyrcG_JFyyuEnfYXID4FpOHLcuSgx3gQYbr5c0P45iGkp1uWla3LH6IdvFzsP-e2yCH536rjmcXv8v2mvEwA2EqDT9RyxRDjsKbE2JbcypCVQ5qykBnW7TuzgA4nGSyGeOCx3LzPDXyYQoqasJgFwHrvd-gLH0nwghEATpaMzXQk2v6F6whm1A8fLAbBy7TPfS3GmXPA2JlFxkTRQXwTei-iCsV3gJQwkAa70rFoVGxPqQEkmS6L3gAc37YP2A9xF0ZVn1f7aklfluT2BnjT8Yebz6yjdLj0DYGy7dWPvh4v0L2GXim6GX9bT-adkMoORMWL4tOgSl9q1ldS2pj068OIqOigsbb7WCZLStYmU9UycMdQ0bU86PcjcQAwvEYe73krwdJ2-3R6MMAKwhqI1W6tOfyP605eDJgo14NrwuRn4mYcVBY0UJnfGCPft4yVYJl_X5MGkm_q1woqKC7j_cfqgzrjVWS1v1d5SE-4UvZilQ0m6gtffQNP3060JUYfyBdy6sNj1gtk2yv5aGgYKpfS7EA3fJ06DIaYYv6SJAJhM9DriLfQ8lP3Ded59NwpX2m7p8z-4EWXqyfqJlFaiwPtnJ2MliiAwHNfFovcw5eCZ4LOkvOeAPItncUqntT7TajkJPz1cFl0oHCKqzomm0_lgy-24j2dz123zuiAIkw1hr0A4vSUYOc88xOSjyHwHoeTXbGOw5ttzEmBYNj7jxg1KcyJ64IezxzGMH39z6R1XmZlaOGex43mIijkGv-woAxWTwsjPOvWZoqmmKjfOwDKuazIeZ9i2wKZ3zjQvcOVJxTA3U2dKda0OMB4rg7pejBzGeeWEoHR4Hrp5SSsiqC4ypoodhxZrmt6EX9GyrDULvhAd0zpbg07nqmEbQLTsTpYSiG2w3YOrvHGzo9rv3tKgCzMsgtRcvqtSrGbVJ4uR4L3rOJJyruqI13ElsrdHjnTDT7qcixhf4dBZ0SdwcXs4W3Z2E44yL3gc_eX_kbnkRKNGjxTVuZ-Oko74kbcXVvJSOKpUPIk_wd07jbO-7S2cQ_L7Um9aXt0NG7wgyOBmnOr1onxOVaTky9d_ICaItVmRiVzzBGVwu4_IZ9XwbTnB9DX2u8mUvC0c4bMG7DyGQbRkf1BtIKCrlZPXEl6z7U8DfIm5CpvpKCCFLwlFmoVVpbYUsE-0amDJm2T7K-HyQ87DArukTsdKYq1IA4_e3S3JL8j7V1ysTwk1ghNbuQvkQfe9kCYHoxQ0lBdL8i6nudhJhCsLgFw71i2sdwx7VZ_AGpUh1FSydCl4n6yiNJp_GXvNExw-g-akcRyoSxg../download [following]\n","--2021-03-25 16:15:08--  https://public.boxcloud.com/d/1/b1!zyHn7xzJu6Y2lyRLLNvitieLG2c1GVojFoFsx-hkBrvRqnICfh3DN9rxcm8zO0Vlw4_SHS0D3YNvbD0tD798bpIARZkrCLlnpfFX66zj8VGO1n7IN7F3yTiiOfScAEKuLx0qa2DmXRvJQ9wiXQzbVULHYLSyrcG_JFyyuEnfYXID4FpOHLcuSgx3gQYbr5c0P45iGkp1uWla3LH6IdvFzsP-e2yCH536rjmcXv8v2mvEwA2EqDT9RyxRDjsKbE2JbcypCVQ5qykBnW7TuzgA4nGSyGeOCx3LzPDXyYQoqasJgFwHrvd-gLH0nwghEATpaMzXQk2v6F6whm1A8fLAbBy7TPfS3GmXPA2JlFxkTRQXwTei-iCsV3gJQwkAa70rFoVGxPqQEkmS6L3gAc37YP2A9xF0ZVn1f7aklfluT2BnjT8Yebz6yjdLj0DYGy7dWPvh4v0L2GXim6GX9bT-adkMoORMWL4tOgSl9q1ldS2pj068OIqOigsbb7WCZLStYmU9UycMdQ0bU86PcjcQAwvEYe73krwdJ2-3R6MMAKwhqI1W6tOfyP605eDJgo14NrwuRn4mYcVBY0UJnfGCPft4yVYJl_X5MGkm_q1woqKC7j_cfqgzrjVWS1v1d5SE-4UvZilQ0m6gtffQNP3060JUYfyBdy6sNj1gtk2yv5aGgYKpfS7EA3fJ06DIaYYv6SJAJhM9DriLfQ8lP3Ded59NwpX2m7p8z-4EWXqyfqJlFaiwPtnJ2MliiAwHNfFovcw5eCZ4LOkvOeAPItncUqntT7TajkJPz1cFl0oHCKqzomm0_lgy-24j2dz123zuiAIkw1hr0A4vSUYOc88xOSjyHwHoeTXbGOw5ttzEmBYNj7jxg1KcyJ64IezxzGMH39z6R1XmZlaOGex43mIijkGv-woAxWTwsjPOvWZoqmmKjfOwDKuazIeZ9i2wKZ3zjQvcOVJxTA3U2dKda0OMB4rg7pejBzGeeWEoHR4Hrp5SSsiqC4ypoodhxZrmt6EX9GyrDULvhAd0zpbg07nqmEbQLTsTpYSiG2w3YOrvHGzo9rv3tKgCzMsgtRcvqtSrGbVJ4uR4L3rOJJyruqI13ElsrdHjnTDT7qcixhf4dBZ0SdwcXs4W3Z2E44yL3gc_eX_kbnkRKNGjxTVuZ-Oko74kbcXVvJSOKpUPIk_wd07jbO-7S2cQ_L7Um9aXt0NG7wgyOBmnOr1onxOVaTky9d_ICaItVmRiVzzBGVwu4_IZ9XwbTnB9DX2u8mUvC0c4bMG7DyGQbRkf1BtIKCrlZPXEl6z7U8DfIm5CpvpKCCFLwlFmoVVpbYUsE-0amDJm2T7K-HyQ87DArukTsdKYq1IA4_e3S3JL8j7V1ysTwk1ghNbuQvkQfe9kCYHoxQ0lBdL8i6nudhJhCsLgFw71i2sdwx7VZ_AGpUh1FSydCl4n6yiNJp_GXvNExw-g-akcRyoSxg../download\n","Resolving public.boxcloud.com (public.boxcloud.com)... 107.152.24.200\n","Connecting to public.boxcloud.com (public.boxcloud.com)|107.152.24.200|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 1037962830 (990M) [text/plain]\n","Saving to: ‘gensim_glove_vectors.txt’\n","\n","gensim_glove_vector 100%[===================>] 989.88M  34.4MB/s    in 32s     \n","\n","2021-03-25 16:15:41 (31.2 MB/s) - ‘gensim_glove_vectors.txt’ saved [1037962830/1037962830]\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2vhK-7g7GIZX"},"source":["Then we load the GloVe embeddings with dimensionality 300 we just downloaded. This takes some time."]},{"cell_type":"code","metadata":{"id":"5KeP7idDb-Wj","executionInfo":{"status":"ok","timestamp":1616689044329,"user_tz":0,"elapsed":102751,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["from gensim.models.keyedvectors import KeyedVectors\n","glove_model = KeyedVectors.load_word2vec_format(\"gensim_glove_vectors.txt\", binary=False)"],"execution_count":43,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BV_QslV7ctj4"},"source":["We now load the pretrained embeddings in a numpy array to then pass it to the Keras Embedding layer. Change the shape of `embedding_matrix` to the corresponding embedding dimensionality you are using."]},{"cell_type":"code","metadata":{"id":"npBJO9pOcA9D","executionInfo":{"status":"ok","timestamp":1616689045213,"user_tz":0,"elapsed":848,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}}},"source":["import numpy as np\n","embedding_matrix = np.zeros((nb_words, 300))\n","for word, i in word_index_c.items():\n","    if word in glove_model:\n","      embedding_vector = glove_model[word]\n","      if embedding_vector is not None and i < nb_words:\n","          # words not found in embedding index will be all-zeros.\n","          embedding_matrix[i] = embedding_vector"],"execution_count":44,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rXEgmD5CdbEo"},"source":["To initialize the Keras Embedding layer with the embeddings we loaded, we can use the argument `weights=[embedding_matrix]`. Also, to freeze the embeddings during training, we use `trainable=False`. "]},{"cell_type":"code","metadata":{"id":"FTDZJhNqbFiz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616689046428,"user_tz":0,"elapsed":1200,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"8e65cba8-7aad-4b53-fe4f-7bf652e5bedc"},"source":["from keras.layers.wrappers import Bidirectional\n","from keras.layers import GlobalMaxPool1D, Flatten, GlobalAvgPool1D, Dropout\n","\n","## Model parameters:\n","# Dimensions of the embeddings\n","embedding_dim = 300\n","\n","## LSTM dimensionality\n","lstm_units = 50\n","\n","print('Build model...')\n","lstm_glove_model = Sequential()\n","\n","lstm_glove_model.add(Embedding(nb_words,\n","                    embedding_dim,\n","                    input_length=maxlen,\n","                    weights=[embedding_matrix],\n","                            trainable=False))\n","### Do not modify the layers below\n","lstm_glove_model.add(Dropout(0.2))\n","lstm_glove_model.add(LSTM(lstm_units, dropout=0.2))\n","lstm_glove_model.add(Dropout(0.2))\n","lstm_glove_model.add(Dense(1, activation='sigmoid'))\n","lstm_glove_model.compile(loss='binary_crossentropy',\n","              optimizer='adam',\n","              metrics=['accuracy'])\n","print(lstm_glove_model.summary())"],"execution_count":45,"outputs":[{"output_type":"stream","text":["Build model...\n","Model: \"sequential_5\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_5 (Embedding)      (None, 100, 300)          1500000   \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 100, 300)          0         \n","_________________________________________________________________\n","lstm_1 (LSTM)                (None, 50)                70200     \n","_________________________________________________________________\n","dropout_3 (Dropout)          (None, 50)                0         \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 1)                 51        \n","=================================================================\n","Total params: 1,570,251\n","Trainable params: 70,251\n","Non-trainable params: 1,500,000\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N7c-u98zbJaf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616689253558,"user_tz":0,"elapsed":207123,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"1d2f3f06-9ac0-4acf-ac23-668bdfc7df6b"},"source":["from keras.callbacks import EarlyStopping\n","\n","## We train the model for 50 epochs\n","epochs = 50\n","early_stop = EarlyStopping(\n","    monitor='val_accuracy',\n","    min_delta=0,\n","    patience=10,\n","    verbose=0,\n","    mode='auto',\n","    baseline=None,\n","    restore_best_weights=True\n",")\n","history = lstm_glove_model.fit(x_train, y_train, batch_size=32, epochs=epochs, callbacks=[early_stop], validation_data=(x_val,y_val))\n","print('Final test accuracy is:')\n","test_accuracy=lstm_glove_model.evaluate(x_test, y_test)\n","\n","query_word = '8'\n","weights = embedding_matrix\n","\n","dist = ((weights - weights[word_index_c[query_word]])**2).sum(1).argsort()\n","top_k = 10\n","print('Most {:d} similar words to {:s}'.format(top_k, query_word))\n","for k in range(1, top_k+1):\n","  print(\"{:d}: {:s}\".format(k, index_word[dist[k]]))\n","\n","negative_review = \"the movie is boring and not good\"\n","words = negative_review.split()\n","seq_input = [word_index_c[w] for w in words]\n","seq_input = np.array([seq_input])\n","negative_review_score = lstm_glove_model.predict(seq_input)\n","\n","positive_review = \"the movie is good and not boring\"\n","words = positive_review.split()\n","seq_input = [word_index_c[w] for w in words]\n","seq_input = np.array([seq_input])\n","positive_review_score = lstm_glove_model.predict(seq_input)\n","\n","print(negative_review_score, positive_review_score)"],"execution_count":46,"outputs":[{"output_type":"stream","text":["Epoch 1/50\n","719/719 [==============================] - 7s 8ms/step - loss: 0.5778 - accuracy: 0.6798 - val_loss: 0.3982 - val_accuracy: 0.8270\n","Epoch 2/50\n","719/719 [==============================] - 5s 8ms/step - loss: 0.4169 - accuracy: 0.8104 - val_loss: 0.3696 - val_accuracy: 0.8390\n","Epoch 3/50\n","719/719 [==============================] - 5s 8ms/step - loss: 0.3757 - accuracy: 0.8309 - val_loss: 0.3504 - val_accuracy: 0.8455\n","Epoch 4/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.3432 - accuracy: 0.8485 - val_loss: 0.3343 - val_accuracy: 0.8470\n","Epoch 5/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.3339 - accuracy: 0.8523 - val_loss: 0.3657 - val_accuracy: 0.8325\n","Epoch 6/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.3122 - accuracy: 0.8640 - val_loss: 0.3609 - val_accuracy: 0.8475\n","Epoch 7/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.2951 - accuracy: 0.8738 - val_loss: 0.3272 - val_accuracy: 0.8550\n","Epoch 8/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.2880 - accuracy: 0.8780 - val_loss: 0.3215 - val_accuracy: 0.8580\n","Epoch 9/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.2671 - accuracy: 0.8863 - val_loss: 0.3265 - val_accuracy: 0.8475\n","Epoch 10/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.2560 - accuracy: 0.8899 - val_loss: 0.3469 - val_accuracy: 0.8535\n","Epoch 11/50\n","719/719 [==============================] - 5s 7ms/step - loss: 0.2475 - accuracy: 0.8966 - val_loss: 0.3604 - val_accuracy: 0.8585\n","Epoch 12/50\n","719/719 [==============================] - 5s 7ms/step - loss: 0.2410 - accuracy: 0.8999 - val_loss: 0.3319 - val_accuracy: 0.8585\n","Epoch 13/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.2346 - accuracy: 0.9009 - val_loss: 0.3476 - val_accuracy: 0.8600\n","Epoch 14/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.2204 - accuracy: 0.9075 - val_loss: 0.3321 - val_accuracy: 0.8620\n","Epoch 15/50\n","719/719 [==============================] - 5s 7ms/step - loss: 0.2062 - accuracy: 0.9138 - val_loss: 0.4348 - val_accuracy: 0.8480\n","Epoch 16/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.2020 - accuracy: 0.9165 - val_loss: 0.3954 - val_accuracy: 0.8545\n","Epoch 17/50\n","719/719 [==============================] - 5s 8ms/step - loss: 0.1967 - accuracy: 0.9162 - val_loss: 0.3472 - val_accuracy: 0.8635\n","Epoch 18/50\n","719/719 [==============================] - 5s 8ms/step - loss: 0.1901 - accuracy: 0.9235 - val_loss: 0.3949 - val_accuracy: 0.8525\n","Epoch 19/50\n","719/719 [==============================] - 5s 7ms/step - loss: 0.1802 - accuracy: 0.9280 - val_loss: 0.3941 - val_accuracy: 0.8545\n","Epoch 20/50\n","719/719 [==============================] - 5s 8ms/step - loss: 0.1786 - accuracy: 0.9264 - val_loss: 0.3953 - val_accuracy: 0.8605\n","Epoch 21/50\n","719/719 [==============================] - 5s 7ms/step - loss: 0.1762 - accuracy: 0.9278 - val_loss: 0.3863 - val_accuracy: 0.8550\n","Epoch 22/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1679 - accuracy: 0.9310 - val_loss: 0.4240 - val_accuracy: 0.8565\n","Epoch 23/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1665 - accuracy: 0.9319 - val_loss: 0.4162 - val_accuracy: 0.8530\n","Epoch 24/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1618 - accuracy: 0.9349 - val_loss: 0.4356 - val_accuracy: 0.8595\n","Epoch 25/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1601 - accuracy: 0.9351 - val_loss: 0.4068 - val_accuracy: 0.8605\n","Epoch 26/50\n","719/719 [==============================] - 5s 8ms/step - loss: 0.1490 - accuracy: 0.9400 - val_loss: 0.4211 - val_accuracy: 0.8675\n","Epoch 27/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1471 - accuracy: 0.9408 - val_loss: 0.4445 - val_accuracy: 0.8620\n","Epoch 28/50\n","719/719 [==============================] - 5s 8ms/step - loss: 0.1457 - accuracy: 0.9427 - val_loss: 0.4620 - val_accuracy: 0.8575\n","Epoch 29/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1428 - accuracy: 0.9444 - val_loss: 0.4590 - val_accuracy: 0.8535\n","Epoch 30/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1398 - accuracy: 0.9446 - val_loss: 0.4388 - val_accuracy: 0.8550\n","Epoch 31/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1303 - accuracy: 0.9478 - val_loss: 0.4291 - val_accuracy: 0.8530\n","Epoch 32/50\n","719/719 [==============================] - 5s 8ms/step - loss: 0.1408 - accuracy: 0.9414 - val_loss: 0.4555 - val_accuracy: 0.8565\n","Epoch 33/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1314 - accuracy: 0.9487 - val_loss: 0.4896 - val_accuracy: 0.8585\n","Epoch 34/50\n","719/719 [==============================] - 5s 8ms/step - loss: 0.1291 - accuracy: 0.9480 - val_loss: 0.4710 - val_accuracy: 0.8565\n","Epoch 35/50\n","719/719 [==============================] - 6s 8ms/step - loss: 0.1258 - accuracy: 0.9504 - val_loss: 0.4536 - val_accuracy: 0.8535\n","Epoch 36/50\n","719/719 [==============================] - 5s 7ms/step - loss: 0.1223 - accuracy: 0.9507 - val_loss: 0.4594 - val_accuracy: 0.8535\n","Final test accuracy is:\n","782/782 [==============================] - 3s 4ms/step - loss: 0.3844 - accuracy: 0.8670\n","Most 10 similar words to 8\n","1: 9\n","2: 7\n","3: 6\n","4: 5\n","5: 4\n","6: 12\n","7: 3\n","8: 10\n","9: 16\n","10: 13\n","WARNING:tensorflow:Model was constructed with shape (None, 100) for input KerasTensor(type_spec=TensorSpec(shape=(None, 100), dtype=tf.float32, name='embedding_5_input'), name='embedding_5_input', description=\"created by layer 'embedding_5_input'\"), but it was called on an input with incompatible shape (None, 7).\n"],"name":"stdout"},{"output_type":"stream","text":["WARNING:tensorflow:Model was constructed with shape (None, 100) for input KerasTensor(type_spec=TensorSpec(shape=(None, 100), dtype=tf.float32, name='embedding_5_input'), name='embedding_5_input', description=\"created by layer 'embedding_5_input'\"), but it was called on an input with incompatible shape (None, 7).\n"],"name":"stderr"},{"output_type":"stream","text":["[[0.03935487]] [[0.77426744]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"g0v3mUULGkfV"},"source":["We can also compute the closest words in the GloVe embeddings to any `query_word` using the code below."]},{"cell_type":"markdown","metadata":{"id":"IXiBKBgtG2xf"},"source":["We use the same example reviews as for the `embedding_model` case and we compute the predictions using the `lstm_glove_model`. "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":384},"id":"T5AuHq3gJmtC","executionInfo":{"status":"ok","timestamp":1616689258075,"user_tz":0,"elapsed":211636,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"79351f76-87e9-4812-99e8-dcacaf1639d4"},"source":["plot_history(history)\n","\n","LSTMAndNonTrainEmbeddingsGloveInit=pd.DataFrame.from_dict(history.history)\n","LSTMAndNonTrainEmbeddingsGloveInit.loc[len(LSTMAndNonTrainEmbeddingsGloveInit)]=[\"test_accuracy\",0,0,test_accuracy[1]]\n","LSTMAndNonTrainEmbeddingsGloveInit.loc[len(LSTMAndNonTrainEmbeddingsGloveInit)]=[\"negative_review_score\",0,0,negative_review_score]\n","LSTMAndNonTrainEmbeddingsGloveInit.loc[len(LSTMAndNonTrainEmbeddingsGloveInit)]=[\"positive_review_score\",0,0,positive_review_score]\n","\n","\n","LSTMAndNonTrainEmbeddingsGloveInit.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/LSTMAndNonTrainEmbeddingsGloveInit.csv')\n","\n","lstm_glove_model.save('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/LSTMAndNonTrainEmbeddingsGloveInit Model')"],"execution_count":47,"outputs":[{"output_type":"stream","text":["WARNING:absl:Found untraced functions such as lstm_cell_1_layer_call_and_return_conditional_losses, lstm_cell_1_layer_call_fn, lstm_cell_1_layer_call_fn, lstm_cell_1_layer_call_and_return_conditional_losses, lstm_cell_1_layer_call_and_return_conditional_losses while saving (showing 5 of 5). These functions will not be directly callable after loading.\n","WARNING:absl:Found untraced functions such as lstm_cell_1_layer_call_and_return_conditional_losses, lstm_cell_1_layer_call_fn, lstm_cell_1_layer_call_fn, lstm_cell_1_layer_call_and_return_conditional_losses, lstm_cell_1_layer_call_and_return_conditional_losses while saving (showing 5 of 5). These functions will not be directly callable after loading.\n"],"name":"stderr"},{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/LSTMAndNonTrainEmbeddingsGloveInit Model/assets\n"],"name":"stdout"},{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/LSTMAndNonTrainEmbeddingsGloveInit Model/assets\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}