{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Task Three","provenance":[{"file_id":"https://github.com/MatchLab-Imperial/deep-learning-course/blob/master/05_RNN.ipynb","timestamp":1615241284103}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"YuunV0FQYY2H"},"source":["from google.colab import drive\n","import os\n","import json\n","from keras.callbacks import ReduceLROnPlateau\n","import numpy as np\n","import tensorflow as tf\n","from tensorflow import keras\n","import pandas as pd\n","import numpy as np\n","import keras \n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.utils import np_utils, to_categorical\n","import matplotlib.pyplot as plt\n","from keras.datasets import mnist\n","import tensorflow as tf\n","from keras.preprocessing import sequence\n","from keras.layers import Dense, Embedding, Dropout, Flatten, Add, Lambda\n","from keras.layers import LSTM\n","from keras.datasets import imdb\n","import math\n","from itertools import chain\n","\n","from keras import __version__\n","from keras import backend as K\n","\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","def plot_history(history, metric = None):\n","  # Plots the loss history of training and validation (if existing)\n","  # and a given metric\n","  # Be careful because the axis ranges are automatically adapted\n","  # which may not desirable to compare different runs.\n","  # Also, in some cases you may want to combine several curves in one\n","  # figure for easier comparison, which this function does not do.\n","  \n","  if metric != None:\n","    fig, axes = plt.subplots(2,1)\n","    axes[0].plot(history.history[metric])\n","    try:\n","      axes[0].plot(history.history['val_'+metric])\n","      axes[0].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[0].set_title('{:s}'.format(metric))\n","    axes[0].set_ylabel('{:s}'.format(metric))\n","    axes[0].set_xlabel('Epoch')\n","    fig.subplots_adjust(hspace=0.5)\n","    axes[1].plot(history.history['loss'])\n","    try:\n","      axes[1].plot(history.history['val_loss'])\n","      axes[1].legend(['Train', 'Val'])\n","    except:\n","      pass\n","    axes[1].set_title('Model Loss')\n","    axes[1].set_ylabel('Loss')\n","    axes[1].set_xlabel('Epoch')\n","  else:\n","    plt.plot(history.history['loss'])\n","    try:\n","      plt.plot(history.history['val_loss'])\n","      plt.legend(['Train', 'Val'])\n","    except:\n","      pass\n","    plt.title('Model Loss')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","  \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GrC_OWnWYb_Z","executionInfo":{"status":"ok","timestamp":1616693570786,"user_tz":0,"elapsed":692,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"c726f942-78ed-4457-bcb8-ec7f0b3ba1ac"},"source":["drive.mount('/content/drive')\n","os.chdir(\"/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN\")\n","!ls"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"," 05_RNN.ipynb\t\t\t Game_of_Thrones  'Task Two'\n","'Copy of Copy of 05_RNN.ipynb'\t'Task One'\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CywiPmy1eZoF"},"source":["### **Task 3: Text Generation**\n","In this task we focus on the text generation problem. For this purpose, we will download the scripts of the TV show Game of Thrones and try to generate some text resembling the style of the scripts.\n","\n","\n","**Report**\n","* Plot the retrieved BLEU for different temperature values (from 0 to 2 in the x-axis) for both the character-level model and the word-level model. To compute the BLEU score, use a minimum of 20 generated samples per temperature used to reduce variability (you can increase it at the cost of higher computational time for lower variability). Each sample should contain 100 characters for the char-level model or 30 words for the word-level model (the code given uses these parameters by default). Do you see any relationship between the obtained BLEU score and temperature used? If you generate sentences at different temperatures what differences can you observe? Are the generated sentences grammatically correct? Do the generated sentences make sense? \n","\n","We give below the code needed to download the dataset and to compute the results."]},{"cell_type":"markdown","metadata":{"id":"bD9gEFKXqukY"},"source":["We first download and read the dataset."]},{"cell_type":"code","metadata":{"id":"4_I1pRickXKl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616693574649,"user_tz":0,"elapsed":975,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"f06a12d5-2765-4444-c585-fc4c6c2aaca7"},"source":["!git clone https://github.com/shekharkoirala/Game_of_Thrones"],"execution_count":null,"outputs":[{"output_type":"stream","text":["fatal: destination path 'Game_of_Thrones' already exists and is not an empty directory.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"D1i9e9nekb70"},"source":["data = open('./Game_of_Thrones/Data/final_data.txt', 'r').read()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oHqzKZQ8aYkp"},"source":["**Character-level model**\n","\n","We first include the code to build the character-level dataset."]},{"cell_type":"code","metadata":{"id":"cnwDgj_unBhW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616693602250,"user_tz":0,"elapsed":25514,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"e22f838b-4dcb-4109-d28b-3e4739802c5d"},"source":["characters = sorted(list(set(data)))\n","n_to_char = {n:char for n, char in enumerate(characters)}\n","char_to_n = {char:n for n, char in enumerate(characters)}\n","x_char = []\n","y_char = []\n","length = len(data)\n","seq_char_length = 100\n","for i in range(0, length-seq_char_length):\n","  sequence = data[i:i + seq_char_length]\n","  label = data[i + seq_char_length]\n","  x_char.append([char_to_n[char] for char in sequence])\n","  y_char.append(char_to_n[label])\n","n_samples = len(x_char)\n","print ('Total Samples:' , n_samples)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Total Samples: 2474358\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZcmI8iV7afK5"},"source":["The splits used for training are given below, although we already give the model trained."]},{"cell_type":"code","metadata":{"id":"3VkGsFkMnCuB"},"source":["import keras\n","import numpy as np\n","\n","x_train_char = x_char[:int(n_samples*0.8)]\n","x_test_char = x_char[int(n_samples*0.8):]\n","y_train_char = y_char[:int(n_samples*0.8)]\n","y_test_char = y_char[int(n_samples*0.8):]\n","## Transform the list to a numpy array\n","x_train_char = np.reshape(x_train_char, (len(x_train_char), seq_char_length))\n","## Onehot encoding of labels\n","y_train_char = keras.utils.to_categorical(np.asarray(y_train_char))\n","\n","x_test_char = np.reshape(x_test_char, (len(x_test_char), seq_char_length))\n","y_test_char = keras.utils.to_categorical(np.asarray(y_test_char))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hcyzP955aukz"},"source":["The definition of the model is the one given below. You will not train the model, so this piece of code is only for you to know what kind of model we trained for this task."]},{"cell_type":"code","metadata":{"id":"LO3FoRM1nEOe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616693625265,"user_tz":0,"elapsed":6104,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"2eb9d94b-a21e-4d74-93d7-ef37fa8e7e30"},"source":["from keras.models import Sequential\n","from keras.layers import Dense, Embedding, Dropout\n","from keras.layers import LSTM\n","# define the LSTM model\n","embedding_size = 300\n","lstm_units = 256\n","\n","char_gen_model = Sequential()\n","char_gen_model.add(Embedding(y_train_char.shape[1],\n","                    embedding_size, input_length=seq_char_length))\n","char_gen_model.add(LSTM(lstm_units))\n","char_gen_model.add(Dense(y_train_char.shape[1], activation='softmax'))\n","\n","char_gen_model.compile(loss='categorical_crossentropy', optimizer='adam')\n","char_gen_model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding (Embedding)        (None, 100, 300)          28800     \n","_________________________________________________________________\n","lstm (LSTM)                  (None, 256)               570368    \n","_________________________________________________________________\n","dense (Dense)                (None, 96)                24672     \n","=================================================================\n","Total params: 623,840\n","Trainable params: 623,840\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jSgGhwym_WLx"},"source":["As the training takes a while, we include a saved model that you can load to skip the training step. Use this model to compute your results."]},{"cell_type":"code","metadata":{"id":"xcasWx79nFcY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616693627325,"user_tz":0,"elapsed":8154,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"250d1c39-bdc0-4709-eed2-04414e7ae314"},"source":["!wget https://imperialcollegelondon.box.com/shared/static/1ffasfm5bx691allukv4y8n0tglr5c06.h5 -O ./char_model.h5\n","char_gen_model = keras.models.load_model(\"./char_model.h5\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["--2021-03-25 17:33:47--  https://imperialcollegelondon.box.com/shared/static/1ffasfm5bx691allukv4y8n0tglr5c06.h5\n","Resolving imperialcollegelondon.box.com (imperialcollegelondon.box.com)... 107.152.24.197\n","Connecting to imperialcollegelondon.box.com (imperialcollegelondon.box.com)|107.152.24.197|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: /public/static/1ffasfm5bx691allukv4y8n0tglr5c06.h5 [following]\n","--2021-03-25 17:33:47--  https://imperialcollegelondon.box.com/public/static/1ffasfm5bx691allukv4y8n0tglr5c06.h5\n","Reusing existing connection to imperialcollegelondon.box.com:443.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://imperialcollegelondon.app.box.com/public/static/1ffasfm5bx691allukv4y8n0tglr5c06.h5 [following]\n","--2021-03-25 17:33:47--  https://imperialcollegelondon.app.box.com/public/static/1ffasfm5bx691allukv4y8n0tglr5c06.h5\n","Resolving imperialcollegelondon.app.box.com (imperialcollegelondon.app.box.com)... 107.152.24.201\n","Connecting to imperialcollegelondon.app.box.com (imperialcollegelondon.app.box.com)|107.152.24.201|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://public.boxcloud.com/d/1/b1!AA_WTtTfMMQB8WkgQjV0D1Ux_EOwVUr2pml1LjC5zgOdecVUWefj_3gclkgWcOXHf_zBVLNbzWgptQJC7Xp1gguBfbHit4xeISxHesluPsgmEiCp3CMKLY75YmfM7tK9cgAMmyuGujVLsRlYPhsbZN4lf9ZqCZ29Fnx19E44ysO-Ifp4di2DkFUrHvo3xx4PM5BsJjPtYte1lbpLWS5PrQ6Qy5sMwkPSp1GkUu38VKKkNKUe0bBAI-XyjzjupoEIL1-6LftYU_4o_uG6HyJGLhCkOe9tLiRpOURYUUZ9HEj17aYzPKulrDc_VvoKS0isQIpo0hu-SdBtE0l2oqPVHHTRgh963AcYkeJzR_Qw7d2triw9WqWAOMSjXucvAzJ4kWqpSjJOe_ZA90_iHC_yMSQJ6SVouHQyC51VijaAfbhbewyrBTbw6MeVj29MiQzs-l5tkJcthLiIV7kyFKANSfRAvbE5HDfBTuSAdddvLq1Rjlqt4hg2J6kbG930insZ0ggY23lBn9g6g7WikWWBX1NyVhhI6tRp3BkQKeprBKpzaJNq6v0saAxXHxor6yRXiPiDTNvuCW-YeG57yAnVWnpGariP3B3rzKqmNuq9_TarA6FGj6s6gjfsQc8QME7FeuteVFCFhrWcLjQyn3mwGJI1DlKw8Rzkku07VByHqfPE56FwDsNaZcr6krJ_nnMtj3DtL7RJDZ71bpsFoSA-1FzEjlyw4J3emq-skTKlWh9yqAh6nt2cf30r7KDVyJhtuD9xxmOADrEJ354WimSPuJJftT63KG4fClhLRvWFyAH71-dH-QsEBkQyNM2HHWZIMwdXFIaVNMsoDZj9BCjwEXFNcn9ogIR0yCJ99ntlqvxCbRtiE_dTGMidFb_jswSfXOw3IvGD_14c9PX710WLd68r8_TO-C2AlGUJMIyU6ZttMqdFW5cc6AsH6q5tndovygHXKfVS6UBJ_5FRlx5C8hq1TjYbQ8PhPjk-CWDGQn40-cEc0ZFBvPQ-_7NwbOJWwq7oViSdrCFA8j38d4xcbYjHNhqUrkX1zGdSxaIr4NOWF7GmOXFpVv1OIv5YvGjcyYsXMS8iZEyuih_xyFCyUUOxsyBJ99kc0GFUYANZLzS2ICztnSyDqrOI1nJKKdkWaVjJrPmHnNIOulrE_LwFUzakPEysNlC4XejzPLnuNoljy4TWwhq-zV_yilQ8X6J9clGzU8hTMo0jB-erunu-odXggTW9_RxBOIBGIPaHUse2tu-w42K9sUX05xbo9YN9wimfVzeJD3yamxxlZWLl9wY38MlQBQghUix5cGAw9qnNqH_Ard75MOm_aFSmn7Y5RrH-f7KTqQN3F-JF0UTXXtyZlhwwCMLm3SIxmZ_GsUrQAR38DuF4BzzBE-D1PKxRUO0o7-qJaU9duL1KBp6mWHwhs6xMevizWbIZMXT7pAXRS3I_wcUUVM26ltlW/download [following]\n","--2021-03-25 17:33:47--  https://public.boxcloud.com/d/1/b1!AA_WTtTfMMQB8WkgQjV0D1Ux_EOwVUr2pml1LjC5zgOdecVUWefj_3gclkgWcOXHf_zBVLNbzWgptQJC7Xp1gguBfbHit4xeISxHesluPsgmEiCp3CMKLY75YmfM7tK9cgAMmyuGujVLsRlYPhsbZN4lf9ZqCZ29Fnx19E44ysO-Ifp4di2DkFUrHvo3xx4PM5BsJjPtYte1lbpLWS5PrQ6Qy5sMwkPSp1GkUu38VKKkNKUe0bBAI-XyjzjupoEIL1-6LftYU_4o_uG6HyJGLhCkOe9tLiRpOURYUUZ9HEj17aYzPKulrDc_VvoKS0isQIpo0hu-SdBtE0l2oqPVHHTRgh963AcYkeJzR_Qw7d2triw9WqWAOMSjXucvAzJ4kWqpSjJOe_ZA90_iHC_yMSQJ6SVouHQyC51VijaAfbhbewyrBTbw6MeVj29MiQzs-l5tkJcthLiIV7kyFKANSfRAvbE5HDfBTuSAdddvLq1Rjlqt4hg2J6kbG930insZ0ggY23lBn9g6g7WikWWBX1NyVhhI6tRp3BkQKeprBKpzaJNq6v0saAxXHxor6yRXiPiDTNvuCW-YeG57yAnVWnpGariP3B3rzKqmNuq9_TarA6FGj6s6gjfsQc8QME7FeuteVFCFhrWcLjQyn3mwGJI1DlKw8Rzkku07VByHqfPE56FwDsNaZcr6krJ_nnMtj3DtL7RJDZ71bpsFoSA-1FzEjlyw4J3emq-skTKlWh9yqAh6nt2cf30r7KDVyJhtuD9xxmOADrEJ354WimSPuJJftT63KG4fClhLRvWFyAH71-dH-QsEBkQyNM2HHWZIMwdXFIaVNMsoDZj9BCjwEXFNcn9ogIR0yCJ99ntlqvxCbRtiE_dTGMidFb_jswSfXOw3IvGD_14c9PX710WLd68r8_TO-C2AlGUJMIyU6ZttMqdFW5cc6AsH6q5tndovygHXKfVS6UBJ_5FRlx5C8hq1TjYbQ8PhPjk-CWDGQn40-cEc0ZFBvPQ-_7NwbOJWwq7oViSdrCFA8j38d4xcbYjHNhqUrkX1zGdSxaIr4NOWF7GmOXFpVv1OIv5YvGjcyYsXMS8iZEyuih_xyFCyUUOxsyBJ99kc0GFUYANZLzS2ICztnSyDqrOI1nJKKdkWaVjJrPmHnNIOulrE_LwFUzakPEysNlC4XejzPLnuNoljy4TWwhq-zV_yilQ8X6J9clGzU8hTMo0jB-erunu-odXggTW9_RxBOIBGIPaHUse2tu-w42K9sUX05xbo9YN9wimfVzeJD3yamxxlZWLl9wY38MlQBQghUix5cGAw9qnNqH_Ard75MOm_aFSmn7Y5RrH-f7KTqQN3F-JF0UTXXtyZlhwwCMLm3SIxmZ_GsUrQAR38DuF4BzzBE-D1PKxRUO0o7-qJaU9duL1KBp6mWHwhs6xMevizWbIZMXT7pAXRS3I_wcUUVM26ltlW/download\n","Resolving public.boxcloud.com (public.boxcloud.com)... 107.152.24.200\n","Connecting to public.boxcloud.com (public.boxcloud.com)|107.152.24.200|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 7525976 (7.2M) [application/octet-stream]\n","Saving to: ‘./char_model.h5’\n","\n","./char_model.h5     100%[===================>]   7.18M  28.6MB/s    in 0.3s    \n","\n","2021-03-25 17:33:48 (28.6 MB/s) - ‘./char_model.h5’ saved [7525976/7525976]\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MsuUE8vua77e"},"source":["The code you need to evaluate the BLEU score is given below. Vary the temperature to the different needed values. It takes around 1 minute in average per temperature if `n_eval` is set to 20."]},{"cell_type":"code","metadata":{"id":"s5ufMSdgp0A6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616697287717,"user_tz":0,"elapsed":1224707,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"794080b8-f17e-409d-ce9e-a748ad074a8a"},"source":["from nltk.translate.bleu_score import sentence_bleu\n","import sys\n","import time\n","import string\n","a = time.time()\n","characters = sorted(list(set(data)))\n","n_to_char = {n:char for n, char in enumerate(characters)}\n","char_to_n = {char:n for n, char in enumerate(characters)}\n","temperature = 0.0\n","results=pd.DataFrame(columns=[\"temperature\",'bleu','bleu_score'])\n","while temperature <=2:\n","  bleu_score = 0\n","  n_eval = 20\n","  seq_char_length = 100\n","  for _ in range(n_eval):\n","    start = np.random.randint(0, len(x_test_char)-seq_char_length-1)\n","    pattern = x_test_char[start].tolist()\n","    reference = x_test_char[start+seq_char_length].tolist()\n","    reference = ''.join([n_to_char[value] for value in reference])\n","    # generate characters\n","    output_sent = ''\n","    for n_char in range(seq_char_length):\n","      x = np.reshape(pattern, (1, len(pattern)))\n","      prediction = char_gen_model.predict(x, verbose=0).astype(np.float64)\n","      prediction = np.log(prediction + 1e-7) / (temperature + 0.01)\n","      exp_preds = np.exp(prediction)\n","      prediction = exp_preds / np.sum(exp_preds)\n","      prediction = np.random.multinomial(1, prediction[0,:], 1)\n","      index = np.argmax(prediction)\n","      result = n_to_char[index]\n","      output_sent += result\n","      pattern.append(index)\n","      pattern = pattern[1:]\n","    # We filter the reference and candidate words to remove any punctuation\n","    # We also use only lower case words\n","    reference = reference.translate(str.maketrans('', '', string.punctuation)).replace('\\n',' ').lower().split(' ')\n","    # We filter any empty element in the list\n","    reference = list(filter(lambda x: x is not '', reference))\n","    candidate = output_sent.replace('\\n',' ').translate(str.maketrans('', '', string.punctuation)).lower().split(' ')\n","    candidate = list(filter(lambda x: x is not '', candidate))\n","    # We remove the first and the last word for both the reference and candidate\n","    # because they may not be completed words\n","    bleu_score += sentence_bleu(reference[1:-1], candidate[1:-1])\n","  results.loc[len(results)]=[temperature, bleu_score, (bleu_score/n_eval)]\n","  # print(bleu_score/n_eval)\n","  temperature+=0.1\n","results.head()\n","\n","results.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/Bleu Scores.csv')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/nltk/translate/bleu_score.py:490: UserWarning: \n","Corpus/Sentence contains 0 counts of 2-gram overlaps.\n","BLEU scores might be undesirable; use SmoothingFunction().\n","  warnings.warn(_msg)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"gVEF_WPycOnD"},"source":["The code below allows you to generate sentences for different input patterns and different temperature values. You can test how the temperature values affect the quality of the output sentences for the character-level model by generating a few examples."]},{"cell_type":"code","metadata":{"id":"Yshz7OZGnIWX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616699803967,"user_tz":0,"elapsed":196326,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"8624dd48-f3b5-4d70-b8e1-260bc67af073"},"source":["import sys\n","\n","results=pd.DataFrame(columns=[\"temperature\",'output'])\n","# Change the temperature here\n","\n","temperature=0.0\n","while temperature<=2:\n","  output=\"\"\n","  # temperature = 0.5\n","  # You can modify the input pattern here.\n","  pattern = [char_to_n[value] for value in list(\"TYRION pours himself some wine and drinks it down. He pours another glass, and walks back to CERSEI \")]\n","  pattern = pattern[:seq_char_length]\n","  print(\"\\nPredicted:\")\n","  # generate 300 characters\n","  for i in range(300):\n","    x = np.reshape(pattern, (1, len(pattern)))\n","    prediction = char_gen_model.predict(x, verbose=0).astype(np.float64)\n","    ## We put the constant 0.02 to avoid dividing by zero\n","    ## We sum by 1e-7 to avoid log(0)\n","    prediction = np.log(prediction + 1e-7) / (temperature + 0.01)\n","    exp_preds = np.exp(prediction)\n","    prediction = exp_preds / np.sum(exp_preds)\n","    ## We applied the smoothing with the temperature\n","    ## Now we predict following the probabilities in the variable prediction\n","    prediction = np.random.multinomial(1, prediction[0,:], 1)\n","    index = np.argmax(prediction)\n","    result = n_to_char[index]\n","    seq_in = [n_to_char[value] for value in pattern]\n","    ## Print the result\n","    sys.stdout.write(result)\n","    output=output+result\n","    ## Create the input sequence for the next character by appending the predicted\n","    ## character and dropping the first one to always have constant seq. length\n","    pattern.append(index)\n","    pattern = pattern[1:]\n","  results.loc[len(results)]=[temperature, str(output)]\n","  temperature+=0.1\n","\n","results.head()\n","\n","results.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/Predicted Texts - Character Model.csv')\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n","Predicted:\n","and the HOUND stands and starts to her hands and starts to her hands and looks at the table.\n","THEON: I wanted to speak to the great man.\n","TYRION: I don't know what you want to stay to the great man.\n","TYRION: I don't know what you want to stay to the great man.\n","TYRION: I don't know what you want to stay\n","Predicted:\n","and the HOUND stands and starts to close to the ground. The fire begins to leave a sword and she stands and starts to close to the ground. The crowd charges around the stairs. The scene ships and leaves the stairs.\n","TYRION: I don't know what they want to stay to the words of the North and the Lannist\n","Predicted:\n","and MERYN and TORMUND and BRYNDEN is standing out of the shore.\n","THEON: I don't know what you were not a lord.\n","THEON: You would have to see you to the Lannisters.\n","TYRION: I don't know what you want to speak to the throne. I wanted to speak to the first time.\n","TYRION: I don't know what he would be the \n","Predicted:\n","and the HOUND and TYRION and MERYN are standing away.\n","DAENERYS: I can't protect you.\n","ROBB: And I have a look at all the truth of your men.\n","JORAH: I wanted to make me the throne army in the war the truth of the world. You have a spear to the rest of your father.\n","THEON: I want you to do to say that mu\n","Predicted:\n","and DAENERYS are surrounded and walks towards the slaves who could take the stage. The men takes a sword. The riders disarms the floor.\n","ROOSE: I need to see my father.\n","TYRION: I know the rest of the house of the sea told me a sword.\n","TYRION: The Lord of Winterfell is what I could have the great monst\n","Predicted:\n","and BRAN and the Dothraki hands her arm on the brothel.\n","TYRION: I can't take the Seven Kingdoms.\n","JAIME: I don't know what you want to be left to come back to you that you can tell me that when you were a girl.\n","JORAH: I was the way to release you to the Seven Kingdoms.\n","CERSEI: I don't care what I wan\n","Predicted:\n","on.\n","CERSEI: I was a good stanning.\n","TORMUND: You would have your swords and let you know.\n","CERSEI: The Lord of Craster's men as my side.\n","JAIME: Allish lad.\n","JORAH: It is strengurded.\n","TYRION: I can do to voming that ships will spread a while my dragons are not to her eyes are completely served me to do \n","Predicted:\n","in the wooden stag down notices towards you swords.\n","THEON: You are not monstroads and find the other materman?\n","MARGAERY: Quite a giant for reminaked.\n","CUT TO: Needle means to the same travels of reques.\n","MELISANDRE: But the Queen.\n","DAENERYS: I'm sorry for the war. Or would you go not born and no one wo\n","Predicted:\n","and NED are knight.\n","ARYA: If it fell is no lucky wears the other way--\n","DOLOROUS EDD:  A good liars have got these camp. There's what she is what she decided the Red Keep at a time.\n","TYWIN: There are she looks at them leaving a chance, I would have to hand or the exactless prefers.\n","LITTLEFINGER: Ser B\n","Predicted:\n","and Sansa stabs his blade at the wall.\n","JAIME: I hated him this, but not could have smeg. I used to couldn't speak, you've feel the throne is why you should have you? Because you can see this is with him. He's a sorky.\n","TYRION: You are a lad, Your Grace.\n","CERSEI: You undered. A smullicell them, they la\n","Predicted:\n","watch.\n","JAIME: Your man who had the prisoner will never mentishhoid, tell that, too. I don’t can remin.\n","AERYN: You do not.\n","TYWIN: Of course I was fully goodles. Did you know Tally?\n","TYRION: I have born him when he says a good men. Leave him in a yeard revealous proppies chance nothing. We don't call t\n","Predicted:\n","and enjoying it down, carryridgle of girl.\n","INT: THE NORTH\n","A brings see his sword, maste, but begins turns and places him by his arm. Thes rat emose slowers into the tunnel argives, and laughs, our people screaming? It shares for you.\n","JAIME: Not for pen. Have you let your ertient?\n","SAMWELL: Your god m\n","Predicted:\n","capts. SAM and JOJEN enter\n","GUARD: That root Yunkai as over if we judgeas our inner Blackwate.\n","HOUND: It's not being people that there.. Osha’s small gives her days tile not redar.\n","PODRICK: I apprem oathing.\n","ARYA: Sansa Stark whis otherside-anumanger. The scub is hadies.\n","VARYS: We took year by the va\n","Predicted:\n","as TYRION gates incops against him.\n","EXT! PYCET-\n","LEAFs expecting ROBB tryaphes his own1.  steepture.\n","BRAN: Will you broke we'll never know, Ramkaw.\n","GREY WORM: Finisheshill,...\n","DAENERYS: Find someone.\n","MAN: Was Brienning the Valran doesn't it, fire.\n","Cersei yell that near.\n","Rammar of Me UNELLISER apprait\n","Predicted:\n","and it's some one.\n","BRAN: Meannling her..?\n","EXT: SHERYS’'CK INT, DROGO vit other. DAENERYS leaves LORAS lead alone, ridingly.\n","ROLLIVE: Lotms.\n","ORELL: Your Grace. Xgriays, but then you can't.\n","PODRICK: Someone othundem?\n","Bronn: But latting was completely.\n","CATELYN: I need.\n","EXT: Neirely. Upet swamping to Ap\n","Predicted:\n","in him, stumble with Youn.\n","CERSEI tanslyings her.\n","WALDER: Certef you go’s good excluse they, Your Grace. Drops, milla changedart.\n","CRASTER: Callasiel.\n","STANNIS: AH, thing?\n","GILLY: Apen aren’t fell a true overlooking about the same man in the rivor. Joffrey. Hold gaughd nortage.\n","BRONN: Six. I have!\n","THEO\n","Predicted:\n","one vitarred.\n","They runneed otherwivivally.\n","Tyrion Lannister:  Wo-k!\n","[Ser Podreis snarches “Man approich. (suddenlocks her iscing JAIMON) When buty, child, as I saw by JARIAS, BRAND loose his chambers.\n","EXT: Holdf Yunt, Been are murdery and kif cover.\n","He hext lost having sarring, Well--\n","JAQEN: Khalees\n","Predicted:\n","addrrance]\n","BERON: Qual!\n","THEON: All thief foret, amore alway inside\n","ROS jack two don't have fictioning glave ru8heptirs, \"An protectles\n","MISSANDEI: Sify, Lord Sniming.\n","Razne{t's fleding, CWyr recounging with Yother, Of look off his eyes. People your suspict's onist. Nothing’s bilt's, Dorluok,0 Ser Pod\n","Predicted:\n","in watching into yourselces, Catelyn syspers.\n","TRYSTANE: Her.\n","TYRION: 1,0Lor.\"\n","EXT: Kin? Wasign? Would you Unemetone tuat? No.\n","HEAND: Her!\n","Melisandre wiphted\n","l's napoint Tarsadon...A “abevys.\n","CERSEI: And if shy need? Pleam?\n","[smilesl eivhs, unklee\n","BRICKE: Please’s Waqunnaie.\n","Sum hold hurprop Daxins. H\n","Predicted:\n","are. VARYS can be,, set is fif tigitue WILL., NAST glet agaivepur— Ser GIARE, TOMMANDERTh #1 are’s let asl LORAS enteryglab.\n","HANLID: 8\n","STANNIS: IL,0welce.\n","[YGhy Turtly takes.\n","LOCKE: Heeln's lifause\n","MERO'h pregtinIll meem to tendy out.\n","EXT. a plorn. \n","VySMGEI and DAARIO and 16lenden] YulledfuA puratio"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CeNwJWRN0Mue"},"source":["**Word-level model**\n","\n","We now give the code to run the word-level model. The code is similar to the char-level model. The main difference is that we only try to predict the 2000 words most commonly used in the dataset. The reason for this limitation is to limit the size of the output layer and number of input embeddings for memory constraints."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z-XfzutEv9Ta","executionInfo":{"status":"ok","timestamp":1616698867042,"user_tz":0,"elapsed":7372,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"d2108041-6b4f-4379-9529-424234a757a5"},"source":["from collections import Counter\n","n_words = 2000\n","# We preprocess the data to separate the punctuation from the words so e.g.\n","# \"sword.\" and \"sword\" are not treated as separate words. \n","# We also use only lower-cased words\n","data_p = data.replace('.', ' . ').replace(',', ' , ').replace(':', ' : ').replace('?', ' ? ')\n","data_p = data_p.replace('!', ' !').replace('\\n', ' \\n ').replace('[', ' [ ').replace(']', ' ] ')\n","data_p = data_p.replace(')', ' ) ').replace('(', ' ( ').lower().split(' ')\n","data_p = list(filter(lambda x: x is not '' and x is not ' ', data_p))\n","common = dict(Counter(data_p).most_common(n_words))\n","n_to_word = {n:word for n, word in enumerate(common.keys())}\n","word_to_n = {word:n for n, word in enumerate(common.keys())}\n","x_word = []\n","y_word = []\n","length = len(data_p)\n","seq_length = 30\n","for i in range(0, length-seq_length):\n","  sequence = data_p[i:i + seq_length]\n","  label = data_p[i + seq_length]\n","  seq = []\n","  if label in common:\n","    for word in sequence:\n","      if word in word_to_n:\n","        seq.append(word_to_n[word])\n","      else:\n","        # If the word in the input sequence is not from the most common 2000 \n","        # words, we use a special token. We use the same token for all the \n","        # non-common words.\n","        seq.append(len(word_to_n))\n","    x_word.append(seq)\n","    y_word.append(word_to_n[label])\n","n_samples = len(x_word)\n","print('Total Samples:' , n_samples)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Total Samples: 544224\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"teAOmchqxvQd"},"source":["import keras\n","import numpy as np\n","\n","x_train_word = x_word[:int(n_samples*0.8)]\n","x_test_word = x_word[int(n_samples*0.8):]\n","y_train_word = np.array(y_word[:int(n_samples*0.8)])\n","y_test_word = np.array(y_word[int(n_samples*0.8):])\n","## Transform the list to a numpy array\n","x_train_word = np.reshape(x_train_word, (len(x_train_word), seq_length))\n","\n","x_test_word = np.reshape(x_test_word, (len(x_test_word), seq_length))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iJvV2NaP0yam"},"source":["The definition of the word-level model we train is given below. The model is the same as in the char-level case, the only difference is the size of the output vector and the number of input embeddings."]},{"cell_type":"code","metadata":{"id":"myJRka3BxyUf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616698871868,"user_tz":0,"elapsed":1058,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"205b8da6-9160-4a12-d383-98a7a598d20b"},"source":["from keras.models import Sequential\n","from keras.layers import Dense, Embedding, Dropout\n","from keras.layers import LSTM\n","# define the LSTM model\n","embedding_size = 300\n","lstm_units = 256\n","\n","word_gen_model = Sequential()\n","word_gen_model.add(Embedding(n_words + 1,\n","                    embedding_size, input_length=seq_length))\n","word_gen_model.add(LSTM(lstm_units))\n","word_gen_model.add(Dense(n_words + 1, activation='softmax'))\n","\n","word_gen_model.compile(loss='sparse_categorical_crossentropy', optimizer='adam')\n","word_gen_model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, 30, 300)           600300    \n","_________________________________________________________________\n","lstm_1 (LSTM)                (None, 256)               570368    \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 2001)              514257    \n","=================================================================\n","Total params: 1,684,925\n","Trainable params: 1,684,925\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"s10IJIxrzEUE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616698877928,"user_tz":0,"elapsed":3564,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"47fdd0d9-897b-4bb1-a966-3cd5e77987dd"},"source":["!wget https://imperialcollegelondon.box.com/shared/static/h38nnk3mbi0zl1w6x76uilawivpeklhz.h5 -O ./word_model.h5\n","word_gen_model = keras.models.load_model(\"./word_model.h5\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["--2021-03-25 19:01:14--  https://imperialcollegelondon.box.com/shared/static/h38nnk3mbi0zl1w6x76uilawivpeklhz.h5\n","Resolving imperialcollegelondon.box.com (imperialcollegelondon.box.com)... 107.152.24.197\n","Connecting to imperialcollegelondon.box.com (imperialcollegelondon.box.com)|107.152.24.197|:443... connected.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: /public/static/h38nnk3mbi0zl1w6x76uilawivpeklhz.h5 [following]\n","--2021-03-25 19:01:14--  https://imperialcollegelondon.box.com/public/static/h38nnk3mbi0zl1w6x76uilawivpeklhz.h5\n","Reusing existing connection to imperialcollegelondon.box.com:443.\n","HTTP request sent, awaiting response... 301 Moved Permanently\n","Location: https://imperialcollegelondon.app.box.com/public/static/h38nnk3mbi0zl1w6x76uilawivpeklhz.h5 [following]\n","--2021-03-25 19:01:14--  https://imperialcollegelondon.app.box.com/public/static/h38nnk3mbi0zl1w6x76uilawivpeklhz.h5\n","Resolving imperialcollegelondon.app.box.com (imperialcollegelondon.app.box.com)... 107.152.24.201\n","Connecting to imperialcollegelondon.app.box.com (imperialcollegelondon.app.box.com)|107.152.24.201|:443... connected.\n","HTTP request sent, awaiting response... 302 Found\n","Location: https://public.boxcloud.com/d/1/b1!H3gsLFplk4BhyhyyHZbVEYw3aGAF1KaWgbK-uAR8v5VUZx-Wytyx93LOH16HDrPVMQK3q4GrXg-SCKiWt8fpTr9LQihoF1WBM0kIqzbxSYSfKjoir6GmMwTsnTX2mpcTSIRykap2M6_5gZU8TjiA9K9tV8tWFVtiKZWh3VeJ6JKNmY4iQXTjlGiBR8pJUeyHtJ10Wzs4sTD0HK4POqXREzKsDSIKNWygAmkNbq0ABX8aoIszpoKvbpv-4GcQo8DW74bdOTOFoyUHBkn3vxY88QLxvWB6Q1WxbgJMkxJ9G9rIvTNCBqA_eF_WCsEtC0IjVeWy1L4OASjIUkSTq5WQbI4knImz3aPph1NLWkI7F8CrWnDHBvqGIfXzrjAVvUJkw-iQENN23VYcf9n5JEp2ROcPDrPs68v-1OseNM8_G1nv1QIr6llxro29VVPC4sbxU34fh-YJV1GhD8T-Fm5r_KyHbOOpmz6OLkHVht3OvwMdq7WT0-afi7XleCcR5BfWKpt1Onl5oVL24D1Y5xgoIhWfUlmp_c35E5yxJwrrQ9ilqqQc0WySfx2bb6BVNezGMPOqvC1mDF8o-VSbjA96VOdwTYl8kIDv49mQCkmMYMfriAe1Xt0FZNRY5yHV5LzEnfBE0P3eE7l--lVGL6EMSDsvd15_mB5PTkJW-ITPJCkarj5tUwyPiiqBzrLQOSAkB71n9tKzBnIXnkRFhBQphYjVcv0u8lSu4f_C8C7I0ixG9i07h1A2LghZt88CEuUwsS3bvItTr7Cqowmt9yN6GEWy1Qi7AYQ5R7T25vdMRSjX5cZSxoYqy6a5GWirAVpRUti5iONK2w5TPxPxDSVHwtdCXQ0pGPtVaAILyqMHwtP1Xg5bJTZPcqFN7C432k7rpawXIZ8-a7Xk7IbyU3b1X7rFATwZqyyGmsAvhcRjkISPcXMn-wkdF-x5aQDNOnbK7rJc7NJTf0rdSbwZreHvzSdILzeKA0-BCXOhM1aF801uApK4Fi41SLYFX7Yi8_1xaQ7Ed9rPXoJppL3Kh_Kz6DWxdB1DEfK5926BDJNtupHoA4kmc3zRRX2ZCLmuGFuGNVO4NMB5BYD6PkaBniM9BWtWDN-cBNUQy5dqdAIY9Goo01q70kI7jLFVjHMo2pynbI-_-slkR1M-dKF19Cz2NdI9-rBT5Ju55pOZCvACjJtDdiBwWhjO20GmpW9xIE0R2g-gfd_L837pBUQAjmV8VOkkzWWB82jZ-hG5c_trAS1ezm7d0BJoDDE-9g1oSzFylfY0Agt0cK-whaNMtpUdrtl2Lm9jEtCwiin02HbIOfpPaMdopUI1TFJFcDi4_uCPTjS0JbWcZ2DuSKD4iolmpAmLUCSpAg52f2CrtOdow4nMVCER672VqCNYTtK8AwwGh9yxptYnrgUYEj-ubhpjteqsHqO68bw4h6IEutMJz0JWgkxCgFU29L8iyRQvj5uGGpL7Sq0S2k0./download [following]\n","--2021-03-25 19:01:15--  https://public.boxcloud.com/d/1/b1!H3gsLFplk4BhyhyyHZbVEYw3aGAF1KaWgbK-uAR8v5VUZx-Wytyx93LOH16HDrPVMQK3q4GrXg-SCKiWt8fpTr9LQihoF1WBM0kIqzbxSYSfKjoir6GmMwTsnTX2mpcTSIRykap2M6_5gZU8TjiA9K9tV8tWFVtiKZWh3VeJ6JKNmY4iQXTjlGiBR8pJUeyHtJ10Wzs4sTD0HK4POqXREzKsDSIKNWygAmkNbq0ABX8aoIszpoKvbpv-4GcQo8DW74bdOTOFoyUHBkn3vxY88QLxvWB6Q1WxbgJMkxJ9G9rIvTNCBqA_eF_WCsEtC0IjVeWy1L4OASjIUkSTq5WQbI4knImz3aPph1NLWkI7F8CrWnDHBvqGIfXzrjAVvUJkw-iQENN23VYcf9n5JEp2ROcPDrPs68v-1OseNM8_G1nv1QIr6llxro29VVPC4sbxU34fh-YJV1GhD8T-Fm5r_KyHbOOpmz6OLkHVht3OvwMdq7WT0-afi7XleCcR5BfWKpt1Onl5oVL24D1Y5xgoIhWfUlmp_c35E5yxJwrrQ9ilqqQc0WySfx2bb6BVNezGMPOqvC1mDF8o-VSbjA96VOdwTYl8kIDv49mQCkmMYMfriAe1Xt0FZNRY5yHV5LzEnfBE0P3eE7l--lVGL6EMSDsvd15_mB5PTkJW-ITPJCkarj5tUwyPiiqBzrLQOSAkB71n9tKzBnIXnkRFhBQphYjVcv0u8lSu4f_C8C7I0ixG9i07h1A2LghZt88CEuUwsS3bvItTr7Cqowmt9yN6GEWy1Qi7AYQ5R7T25vdMRSjX5cZSxoYqy6a5GWirAVpRUti5iONK2w5TPxPxDSVHwtdCXQ0pGPtVaAILyqMHwtP1Xg5bJTZPcqFN7C432k7rpawXIZ8-a7Xk7IbyU3b1X7rFATwZqyyGmsAvhcRjkISPcXMn-wkdF-x5aQDNOnbK7rJc7NJTf0rdSbwZreHvzSdILzeKA0-BCXOhM1aF801uApK4Fi41SLYFX7Yi8_1xaQ7Ed9rPXoJppL3Kh_Kz6DWxdB1DEfK5926BDJNtupHoA4kmc3zRRX2ZCLmuGFuGNVO4NMB5BYD6PkaBniM9BWtWDN-cBNUQy5dqdAIY9Goo01q70kI7jLFVjHMo2pynbI-_-slkR1M-dKF19Cz2NdI9-rBT5Ju55pOZCvACjJtDdiBwWhjO20GmpW9xIE0R2g-gfd_L837pBUQAjmV8VOkkzWWB82jZ-hG5c_trAS1ezm7d0BJoDDE-9g1oSzFylfY0Agt0cK-whaNMtpUdrtl2Lm9jEtCwiin02HbIOfpPaMdopUI1TFJFcDi4_uCPTjS0JbWcZ2DuSKD4iolmpAmLUCSpAg52f2CrtOdow4nMVCER672VqCNYTtK8AwwGh9yxptYnrgUYEj-ubhpjteqsHqO68bw4h6IEutMJz0JWgkxCgFU29L8iyRQvj5uGGpL7Sq0S2k0./download\n","Resolving public.boxcloud.com (public.boxcloud.com)... 107.152.24.200\n","Connecting to public.boxcloud.com (public.boxcloud.com)|107.152.24.200|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 20254516 (19M) [application/octet-stream]\n","Saving to: ‘./word_model.h5’\n","\n","./word_model.h5     100%[===================>]  19.32M  22.3MB/s    in 0.9s    \n","\n","2021-03-25 19:01:17 (22.3 MB/s) - ‘./word_model.h5’ saved [20254516/20254516]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GgvJiBOs5CEF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616699329213,"user_tz":0,"elapsed":377881,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"2635e4d0-10ff-40bd-fccd-409df8a9d38c"},"source":["from nltk.translate.bleu_score import sentence_bleu\n","import string\n","import sys\n","temperature = 0.0\n","results=pd.DataFrame(columns=[\"temperature\",'bleu','bleu_score'])\n","while temperature <=2:\n","  bleu_score = 0\n","  n_eval = 20\n","  seq_length = 30\n","  for _ in range(n_eval):\n","    # We look for references that do not contain any non-common words as we only\n","    # learnt to predict the 2000 most common words\n","    while True:\n","      start = np.random.randint(0, len(x_test_word)-seq_length-1)\n","      pattern = x_test_word[start].tolist()\n","      reference = x_test_word[start+seq_length].tolist()\n","      if n_words not in reference:\n","        break\n","    reference = ' '.join([n_to_word[value] for value in reference])\n","    # generate words\n","    output_sent = ''\n","    for i in range(seq_length):\n","      x = np.reshape(pattern, (1, len(pattern)))\n","      prediction = word_gen_model.predict(x, verbose=0).astype(np.float64)\n","      prediction = np.log(prediction + 1e-7) / (temperature + 0.01)\n","      exp_preds = np.exp(prediction)\n","      prediction = exp_preds / np.sum(exp_preds)\n","      prediction = np.random.multinomial(1, prediction[0,:], 1)\n","      index = np.argmax(prediction)\n","      result = n_to_word.get(index, '')\n","      output_sent += result + ' '\n","      pattern.append(index)\n","      pattern = pattern[1:]\n","    # We filter the reference and candidate words to remove any punctuation\n","    reference = reference.translate(str.maketrans('', '', string.punctuation)).replace('\\n', ' ').split(' ')\n","    # We filter any empty element in the list\n","    reference = list(filter(lambda x: x is not '', reference))\n","    candidate = output_sent.replace('\\n',' ').translate(str.maketrans('', '', string.punctuation)).split(' ')\n","    candidate = list(filter(lambda x: x is not '', candidate))\n","    bleu_score += sentence_bleu([reference], candidate)\n","  results.loc[len(results)]=[temperature, bleu_score, (bleu_score/n_eval)]\n","  # print(bleu_score/n_eval)\n","  temperature+=0.1\n","results.head()\n","\n","results.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/Bleu Scores - Word.csv')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/nltk/translate/bleu_score.py:490: UserWarning: \n","Corpus/Sentence contains 0 counts of 3-gram overlaps.\n","BLEU scores might be undesirable; use SmoothingFunction().\n","  warnings.warn(_msg)\n","/usr/local/lib/python3.7/dist-packages/nltk/translate/bleu_score.py:490: UserWarning: \n","Corpus/Sentence contains 0 counts of 2-gram overlaps.\n","BLEU scores might be undesirable; use SmoothingFunction().\n","  warnings.warn(_msg)\n","/usr/local/lib/python3.7/dist-packages/nltk/translate/bleu_score.py:490: UserWarning: \n","Corpus/Sentence contains 0 counts of 4-gram overlaps.\n","BLEU scores might be undesirable; use SmoothingFunction().\n","  warnings.warn(_msg)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"hf1cYUeC27W3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1616699607595,"user_tz":0,"elapsed":67229,"user":{"displayName":"Udai Arneja","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgvIZT5RqqegbdTKMziVehjeBTFwnu84VVrx1gbS5A=s64","userId":"09880777762577870649"}},"outputId":"30d0d39f-ff56-48a9-b2f3-b5acc6091c14"},"source":["import sys\n","# Vary the temperature here\n","results=pd.DataFrame(columns=[\"temperature\",'output'])\n","# Change the temperature here\n","temperature=0.0\n","while temperature<=2:\n","  output=\"\"\n","  pattern = \"TYRION pours himself some wine and drinks it down. He pours another glass, and walks back to CERSEI placing his cup on her desk. He takes another glass.\\nTYRION: \"\n","  # Process input pattern\n","  pattern = pattern.replace('.', ' . ').replace(',', ' , ').replace(':', ' : ').replace('?', ' ? ')\n","  pattern = pattern.replace('!', ' !').replace('\\n', ' \\n ').replace('[', ' [ ').replace(']', ' ] ')\n","  pattern = pattern.replace(')', ' ) ').replace('(', ' ( ').lower().split(' ')\n","  pattern = list(filter(lambda x: x is not '' and x is not ' ', pattern))\n","\n","  pattern = pattern[:seq_length]\n","\n","  print(\"\\nInput Pattern:\\n\", ' '.join(pattern))\n","  pattern = [word_to_n.get(value, n_words) for value in pattern]\n","  print(\"\\nPredicted:\")\n","  # generate 100 words\n","  for i in range(100):\n","    x = np.reshape(pattern, (1, len(pattern)))\n","    prediction = word_gen_model.predict(x, verbose=0).astype(np.float64)\n","    ## We put the constant 0.02 to avoid dividing by zero\n","    ## We sum by 1e-7 to avoid log(0)\n","    prediction = np.log(prediction + 1e-7) / (temperature + 0.01)\n","    exp_preds = np.exp(prediction)\n","    prediction = exp_preds / np.sum(exp_preds)\n","    ## We applied the smoothing with the temperature\n","    ## Now we predict following the probabilities in the variable prediction\n","    prediction = np.random.multinomial(1, prediction[0,:], 1)\n","    index = np.argmax(prediction)\n","    result = n_to_word[index]\n","    ## Print the result\n","    sys.stdout.write(result+' ')\n","    output=output+result+\" \"\n","    ## Create the input sequence for the next character by appending the predicted\n","    ## character and dropping the first one to always have constant seq. length\n","    pattern.append(index)\n","    pattern = pattern[1:]\n","  results.loc[len(results)]=[temperature, str(output)]\n","  temperature+=0.1\n","\n","results.head()\n","\n","results.to_csv('/content/drive/My Drive/Deep Learning 2021/Notebook Five - RNN/Predicted Texts - Word Model.csv')\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out . \n"," cersei : you think i'm the king ? \n"," cersei : i don't . \n"," cersei : you can't be . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : you can't . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : you can't . \n"," cersei : i don't know . \n"," \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out . \n"," cersei : you think i'm the king ? \n"," cersei : i don't . \n"," cersei : you can't be a queen . \n"," cersei : i don't care what you think . \n"," cersei : you can't . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : you can't . \n"," cersei : i don't know . \n"," cersei : you can't tell me anything . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out of the room . \n"," cersei : you should be proud to be . \n"," cersei : i don't think i am . \n"," cersei : i don't know . \n"," cersei : you can't trust me . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : i don't know . \n"," cersei : i can't . \n"," cersei : you can't tell me anything . \n"," cersei : i don't know . \n"," cersei : you can't . \n"," cersei : and you will . \n"," cersei : i don't \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out of the room . \n"," cersei : i have a bit harder . \n"," olenna : you can't mean it . \n"," cersei : and you will . \n"," cersei : you think i'm a queen . \n"," cersei : why ? what ? \n"," tommen : i don't know . \n"," cersei : you can't trust anyone in king's landing . \n"," cersei : i will not . \n"," cersei : i don't know how to do it . \n"," cersei : i would like to speak with stannis . \n"," jaime : i don't think i am \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out of his room . \n"," cersei : i don't need to be afraid . \n"," cersei : i don't need to speak with you . \n"," cersei : i don't know what i am . \n"," cersei : you can't be a queen . \n"," cersei : you can't help me help . \n"," margaery : i don't want you to be a man of the world . \n"," olenna : and yet . \n"," cersei : perhaps you should be married here . \n"," tyrion : you can't . \n"," tyrion : i can't . \n"," tyrion : \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out . \n"," cersei : you should be proud of your life . \n"," cersei : may i ask the king to do ? \n"," lancel : he is the only one who put up near you . \n"," tyrion : and you ? \n"," tyrion : i do not have to make sure you understand how you put it in you and i carry . \n"," tyrion : and if i marry the ( off the door ) . you are the king . \n"," tyrion : i think you have a choice . \n"," tyrion : i don't \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out and stabs her around . he stares at him . \n"," ext : the north \n"," the men cheer . \n"," int . castle black \n"," a white walker , looking to a shot of the lannister camp . sam and gilly watch as sam tries to look around the attack . \n"," sam : you can't stop them . \n"," sam : and i can't \n"," sam : i know how you feel . \n"," sam : i didn't . \n"," sam : and you're a coward . the word . \n"," sam : yes , i think \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","off of his wine . \n"," tywin : the girl is a knight , you know who joffrey's valyrian is . \n"," tywin : and if he does , jaime would be a knight , cersei , who do is no matter how she will . \n"," cersei : the lannisters have stopped with you . if he comes back , we must go get . \n"," cersei : i should have killed you once . \n"," cersei : i suppose that is the word , but you have all the way to me . \n"," tyrion : i asked \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","off down the steps . he starts to stand and a bit gold cloak sits down at the gold . \n"," cut to : another part of the garden . \n"," lord bolton : seven kingdoms . \n"," the door opens , and the door opens . \n"," int . great sept of baelor \n"," qyburn : my lady , may i be born an end in this world , my lady ? \n"," cersei : i will do anything . \n"," cersei : would you be now ? \n"," cersei : this way . \n"," cersei : thank you \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","child into the room day . \n"," varys : though the second sons wanted attacks the littlefinger of the house that she was a coward and one knows how to do is to make his power . \n"," dany : no . but you are a lovely fool . and when you came to us and lived on the woods . you should be the first time you saw your king as you bringing them lannisters . do you think you'd marry one ? \n"," jaime : it would . \n"," jaime lannister : have you ever been a room \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","by . joffrey puts his blade and walks forward . joffrey is shocked . everyone cheers . \n"," shae : your mother . \n"," cersei : bring us some wine . \n"," shae : why should i arrive ? \n"," tyrion's aunt opens that pours her baby . \n"," tyrion : my king's presence is mine , i finally raised you little lady . and you , and how are you there and better missandei from the city , runs a lady valyrian ? \n"," missandei : i'll know i'm true to meet you . \n"," grey worm : no \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","without him . with daenerys’ room . \n"," daenerys : ( speaks valyrian ) unsullied ! unsullied ! please . \n"," the unsullied boy at their feet and die . karl a daario and the men begin again . one catches up as jorah and viserys is no . \n"," wine merchant : all you seven kingdoms , all men from through their gates . now at castle black , might a time trying to set against you in a fortnight . then i show him the slynt to kill me . he can't take an army if it would \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out . \n"," oberyn : move , move . move . \n"," tyrion and podrick exit \n"," cersei : forward ! \n"," tyrion : there's some bad luck to stop them . \n"," shae : i have gold , my lady . there's power to send out these new bound now . you'll probably be the last of my friends . \n"," shae : she was always much gave you please treason . \n"," ros releases the door . \n"," int . king's landing . \n"," go on the door opens . \n"," ros walks by her future with young \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out to cup his wine . \n"," woman : ser man , my cause , my lady . just one more ever said to feels you . \n"," daenerys : i'd keep my ass alive stannis who has pieces never learned a thing his knight inside the life . king's landing is right within better than sworn bed . \n"," jaime exits . \n"," ext . the riverlands \n"," ext . king's landing war room . \n"," myranda rides with a large . his sparrow oh , we meet draw , she . \n"," man : ( singing ) \n"," \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","bite to an reading . \n"," joffrey : please he is forever . . . it is your concern until the boys were filled of your arms the steps to give men could saved to robert baratheon . and as prince robert , you will leave their battle at soon once , best bodies were like winterfell to thoros . he's in no longer has always ] \n"," kingsguard : bloody fight for his dornish men . to your lord yourself , kingslayer . listen ! and three old head on this road that wasn't safe in gold . what \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","moment to get back into the flames - \n"," tyrion : loras sit past me and unsullied die and your next boy , and but you’re one in your red play . our door will be this until a door and doing where vale hate her burn . i’ll need them more than once . strange with all , or cruel on the hunting . where could i died ? come at your feet . burn , don't cut us loose ! \n"," the up rider across the other hand . them comes in closer . we begin to follow \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","to turn him into young world . \n"," oberyn : what in ask of my great guests of westeros , do you better speak ? balcony all are sisters . \n"," barristan and commander of the pree comes from this world salt commander . luwin stand before him . way his wall \n"," at the hand . \n"," ramsay : look the close and your spear through while you're here . you could say who brought them fed . watch that probably to food boat she white , catelyn . it's right . \n"," , then you dreams , staring \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","out , is morning and his old cloaks . he starts \n"," jaime : those arrows come being warrior i fell from foot , isn't for this . all are love you beyond still served as lord stark , prince that couldn't spoke in turn your up to everything else . would again be born than him into death . \n"," kevan lannister : only what love was saying . like ask because bran at five castles as it is told you . we'll pray for my children ! they helped it off to bring us one of the blue \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","drink to a crowd and speak all melisandre . then walks in , pull out off \n"," meryn gets up and march off . janos attacks gilly helps them teach his sword . they'll see jorah approach her men and been meeting cock lets it on camello . when they see the other where in noble pyp kill the white walker pick her baby off around in the promised – the place child . stops black and 000 wights begin to tell he left around to different , onto there is taking their way ] \n"," the stark : ghost \n","Input Pattern:\n"," tyrion pours himself some wine and drinks it down . he pours another glass , and walks back to cersei placing his cup on her desk . he takes another\n","\n","Predicted:\n","on to joffrey's body out in fear . varys collapses , follows once doesn't look part of someone you can work at sansa working . little whore company enjoying room in her life and moves dress up beside bronn . jaime appears up something far by her hair ) pardon , truth they must end his wars strike ! how prisoners what winter of time . why are threat ! what’s wrong with blood ? yes . or anymore closed and he’s brave and anything men ever having will be far from their place . gold take someone there under "],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1zN7nGsdoaqe"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"M1QONLodolNM","executionInfo":{"status":"ok","timestamp":1617754272941,"user_tz":-60,"elapsed":1080,"user":{"displayName":"Karl Kareem Melaimi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgqTkPa4rAnD-DUE7FkLDMVK3a6JuQABlx8CSRhlz8=s64","userId":"06917153526152365701"}},"outputId":"31400c41-0d6c-4f3d-dcd4-e1642c03877a"},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","open = pd.read_csv('/content/Bleu_Scores.csv')\n","\n","\n","plt.plot(open['bleu_score'])\n","plt.xticks(list(range(0,22,2)))\n","plt.xlabel('Temperature')\n","plt.ylabel('BLEU Score')\n","plt.title('Blue Score vs Temperature for Character level model')\n"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Blue Score vs Temperature for Character level model')"]},"metadata":{"tags":[]},"execution_count":14},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":312},"id":"A9AzeTSuqz42","executionInfo":{"status":"ok","timestamp":1617754305274,"user_tz":-60,"elapsed":982,"user":{"displayName":"Karl Kareem Melaimi","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgqTkPa4rAnD-DUE7FkLDMVK3a6JuQABlx8CSRhlz8=s64","userId":"06917153526152365701"}},"outputId":"670a8d95-bea7-4a71-c7f6-11f241515211"},"source":["open1 = pd.read_csv('/content/BLEU.csv')\n","\n","\n","plt.plot(open1['bleu_score'])\n","plt.xticks(list(range(0,22,2)))\n","plt.xlabel('Temperature')\n","plt.ylabel('BLEU Score')\n","plt.title('Blue Score vs Temperature for Character level model')"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Blue Score vs Temperature for Character level model')"]},"metadata":{"tags":[]},"execution_count":15},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}